{
    "project": {},
    "files": {
        "assets\\app-services\\authenticationservice.js": {
            "name": "assets\\app-services\\authenticationservice.js",
            "modules": {},
            "classes": {
                "ServiceAuthentication": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\app-services\\flashservice.js": {
            "name": "assets\\app-services\\flashservice.js",
            "modules": {},
            "classes": {
                "ServiceFlash": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\app-services\\json_service.js": {
            "name": "assets\\app-services\\json_service.js",
            "modules": {},
            "classes": {
                "ServiceJson": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\app-services\\user.service.js": {
            "name": "assets\\app-services\\user.service.js",
            "modules": {},
            "classes": {
                "ServiceUser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\app-services\\user_service_localstorage.js": {
            "name": "assets\\app-services\\user_service_localstorage.js",
            "modules": {},
            "classes": {
                "ServiceUserlocalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\dist\\js\\datepicker.js": {
            "name": "assets\\dist\\js\\datepicker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\home\\home.controller.js": {
            "name": "assets\\home\\home.controller.js",
            "modules": {},
            "classes": {
                "HomeController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\login\\login.controller.js": {
            "name": "assets\\login\\login.controller.js",
            "modules": {},
            "classes": {
                "LoginController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\register\\register.controller.js": {
            "name": "assets\\register\\register.controller.js",
            "modules": {},
            "classes": {
                "RegisterController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets\\ui-grid.js": {
            "name": "assets\\ui-grid.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\app.js": {
            "name": "js\\app.js",
            "modules": {
                "app": 1
            },
            "classes": {
                "APP": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packageJson.js": {
            "name": "packageJson.js",
            "modules": {},
            "classes": {
                "1_ЗАВИСИМОСТИ_ПРИЛОЖЕНИЯ": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "app": {
            "name": "app",
            "submodules": {},
            "elements": {
                "style": 1,
                "img": 1,
                "div": 1,
                "ANY": 1,
                "input": 1
            },
            "classes": {
                "ServiceAuthentication": 1,
                "ServiceFlash": 1,
                "ServiceJson": 1,
                "ServiceUser": 1,
                "ServiceUserlocalStorage": 1,
                "HomeController": 1,
                "LoginController": 1,
                "RegisterController": 1,
                "APP": 1,
                "1_ЗАВИСИМОСТИ_ПРИЛОЖЕНИЯ": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "packageJson.js",
            "line": 1,
            "description": "ПРИЛОЖЕНИЕ РАЗРАБАТЫВАЛ ИСПОЛЬЗУЯ (Windows/Chrome/Node v8.9.1):<br>\n1. gulp;<br>\n2. webpack;<br>\n3. browser-sync;<br>\n4. angularjs;<br>\n5. yuidoc;\n    \nТОЧКА ВХОДА - ФАЙЛ frontend/js/app.js (самовызывающаяся функция).\n\n       angular\n           .module('app',  ['ui.grid', 'ui.grid.selection', 'ngRoute', 'ngCookies', 'ui.sortable'])\n           .config(config)\n           .run(run);",
            "itemtype": "main"
        }
    },
    "classes": {
        "ServiceAuthentication": {
            "name": "ServiceAuthentication",
            "shortname": "ServiceAuthentication",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "file": "assets\\app-services\\authenticationservice.js",
            "line": 8,
            "mainName": "ServiceAuthentication",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ServiceFlash": {
            "name": "ServiceFlash",
            "shortname": "ServiceFlash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\app-services\\flashservice.js",
            "line": 8,
            "mainName": "ServiceFlash",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ServiceJson": {
            "name": "ServiceJson",
            "shortname": "ServiceJson",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\app-services\\json_service.js",
            "line": 8,
            "mainName": "ServiceJson",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ServiceUser": {
            "name": "ServiceUser",
            "shortname": "ServiceUser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\app-services\\user.service.js",
            "line": 8,
            "mainName": "ServiceUser",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ServiceUserlocalStorage": {
            "name": "ServiceUserlocalStorage",
            "shortname": "ServiceUserlocalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\app-services\\user_service_localstorage.js",
            "line": 8,
            "description": "ВКЛЮЧЕН В HTML\n\n       <!--Fake user service for demo that uses local storage -->\n       <script src=\"js/user_service_localstorage.js\"></script>",
            "mainName": "ServiceUserlocalStorage",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "HomeController": {
            "name": "HomeController",
            "shortname": "HomeController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\home\\home.controller.js",
            "line": 11,
            "description": "ПРЕДОСТАВЛЕНИЕ ДАННЫХ В ВИДЕ DRAG&DROP И ng-GRID\n           \n           (function () {\n               angular\n                   .module('app')\n                   .controller('HomeController', HomeController)\n                   .filter('id_list', id_list)\n                   .filter('execution_status', execution_status)\n                   .filter('id_user', id_user)\n\n                HomeController.$inject = ['UserService', 'JsonService', 'uiGridConstants','$rootScope', '$timeout'];\n               ........",
            "mainName": "HomeController",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "LoginController": {
            "name": "LoginController",
            "shortname": "LoginController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\login\\login.controller.js",
            "line": 8,
            "description": "АУТЕНТИФИКАЦИЯ ПОЛЬЗОВАТЕЛЯ\n\n       LoginController.$inject = ['$location', 'AuthenticationService', 'FlashService'];\n\n       function LoginController($location, AuthenticationService, FlashService) {\n\n           var vm = this;\n\n           vm.login = login;\n\n           (function initController() {\n               // reset login status\n               AuthenticationService.ClearCredentials();\n           })();\n\n           function login() {\n               vm.dataLoading = true;\n               AuthenticationService.Login(vm.username, vm.password, function (response) {\n                   if (response.success) {\n                       AuthenticationService.SetCredentials(vm.username, vm.password);\n                       $location.path('/');\n                   } else {\n                       FlashService.Error(response.message);\n                       vm.dataLoading = false;\n                   }\n               });\n           };\n       }",
            "mainName": "LoginController",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "RegisterController": {
            "name": "RegisterController",
            "shortname": "RegisterController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "assets\\register\\register.controller.js",
            "line": 8,
            "description": "РЕГИСТРАЦИЯ ПОЛЬЗОВАТЕЛЯ\n\n       angular\n           .module('app')\n           .controller('RegisterController', RegisterController);\n\n       RegisterController.$inject = ['UserService',  '$location', '$rootScope', 'FlashService'];\n\n       function RegisterController(UserService, $location, $rootScope, FlashService) {\n           var vm = this;\n\n           vm.register = register;\n\n           function register() {\n               vm.dataLoading = true;\n               UserService.Create(vm.user)\n                   .then(function (response) {\n                       if (response.success) {\n                           FlashService.Success('Registration successful', true);\n                           $location.path('/login');\n                       } else {\n                           FlashService.Error(response.message);\n                           vm.dataLoading = false;\n                       }\n                   });\n           }\n       }",
            "mainName": "RegisterController",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "APP": {
            "name": "APP",
            "shortname": "APP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "js\\app.js",
            "line": 4,
            "description": "ПРИЛОЖЕНИЕ РАЗРАБАТЫВАЛ ИСПОЛЬЗУЯ (Windows/Chrome/Node v8.9.1):<br>\n1. gulp;<br>\n2. webpack;<br>\n3. browser-sync;<br>\n4. angularjs;<br>\n5. yuidoc;\n    \nТОЧКА ВХОДА - ФАЙЛ frontend/js/app.js (самовызывающаяся функция).\n\n       angular\n           .module('app',  ['ui.grid', 'ui.grid.selection', 'ngRoute', 'ngCookies', 'ui.sortable'])\n           .config(config)\n           .run(run);",
            "mainName": "app",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "1_ЗАВИСИМОСТИ_ПРИЛОЖЕНИЯ": {
            "name": "1_ЗАВИСИМОСТИ_ПРИЛОЖЕНИЯ",
            "shortname": "1_ЗАВИСИМОСТИ_ПРИЛОЖЕНИЯ",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "app",
            "namespace": "",
            "file": "packageJson.js",
            "line": 1,
            "description": "ЗАВИСИМОСТИ ПРИЛОЖЕНИЯ.\n\n\t\"devDependencies\": {\n\t    \"assets-webpack-plugin\": \"^3.2.0\",\n\t    \"babel-core\": \"^6.4.0\",\n\t    \"babel-eslint\": \"^8.0.2\",\n\t    \"babel-loader\": \"^6.2.1\",\n\t    \"babel-preset-es2015\": \"^6.3.13\",\n\t    \"browser-sync\": \"^2.18.13\",\n\t    \"cookie\": \"^0.3.1\",\n\t    \"debug\": \"^3.1.0\",\n\t    \"debug-trace\": \"^2.2.1\",\n\t    \"del\": \"^2.2.0\",\n\t    \"express\": \"^3.21.2\",\n\t    \"fs\": \"0.0.1-security\",\n\t    \"gulp\": \"github:gulpjs/gulp#4.0\",\n\t    \"gulp-autoprefixer\": \"^4.0.0\",\n\t    \"gulp-babel\": \"^6.1.1\",\n\t    \"gulp-cached\": \"^1.1.0\",\n\t    \"gulp-concat\": \"^2.6.1\",\n\t    \"gulp-cssnano\": \"^2.1.0\",\n\t    \"gulp-debug\": \"^2.1.2\",\n\t    \"gulp-eslint\": \"^1.1.1\",\n\t    \"gulp-header\": \"^1.7.1\",\n\t    \"gulp-if\": \"^2.0.0\",\n\t    \"gulp-image-resize\": \"^0.7.1\",\n\t    \"gulp-imagemin\": \"^2.4.0\",\n\t    \"gulp-load-plugins\": \"^1.5.0\",\n\t    \"gulp-newer\": \"^1.1.0\",\n\t    \"gulp-notify\": \"^2.2.0\",\n\t    \"gulp-plumber\": \"^1.0.1\",\n\t    \"gulp-remember\": \"^0.3.1\",\n\t    \"gulp-rename\": \"^1.2.2\",\n\t    \"gulp-rev\": \"^6.0.1\",\n\t    \"gulp-rev-replace\": \"^0.4.3\",\n\t    \"gulp-sourcemaps\": \"^2.6.1\",\n\t    \"gulp-string-replace\": \"^0.4.0\",\n\t    \"gulp-stylus\": \"^2.6.0\",\n\t    \"gulp-svg-sprite\": \"^1.2.19\",\n\t    \"gulp-uglify\": \"^3.0.0\",\n\t    \"gulp-useref\": \"^3.0.4\",\n\t    \"gulplog\": \"^1.0.0\",\n\t    \"help-functions\": \"^1.0.55\",\n\t    \"json-loader\": \"^0.5.7\",\n\t    \"lazypipe\": \"^1.0.1\",\n\t    \"nconf\": \"^0.8.5\",\n\t    \"node-notifier\": \"^5.1.2\",\n\t    \"node-static\": \"^0.7.10\",\n\t    \"open\": \"0.0.5\",\n\t    \"stream-combiner2\": \"^1.1.1\",\n\t    \"stylus\": \"^0.54.5\",\n\t    \"through2\": \"^2.0.3\",\n\t    \"uglify-es\": \"^3.2.1\",\n\t    \"webpack\": \"^1.12.11\"\n\t  },\n\t  \"dependencies\": {\n\t    \"lodash\": \"^4.17.4\",\n\t    \"lodash.throttle\": \"^4.1.1\"\n\t  }",
            "mainName": "yuidoc",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        }
    },
    "elements": {
        "style": {
            "name": "style",
            "attributes": [],
            "module": "app",
            "file": "assets\\ui-grid.js",
            "line": 2087,
            "ngdoc": "directive",
            "restrict": "A",
            "description": "Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.",
            "example": [
                "\n<doc:example module=\"app\">\n<doc:source>\n<script>\nvar app = angular.module('app', ['ui.grid']);\n\napp.controller('MainCtrl', ['$scope', function ($scope) {\n\n}]);\n</script>\n\n<div ng-controller=\"MainCtrl\">\n  <div ui-grid-menu shown=\"true\"  ></div>\n</div>\n</doc:source>\n<doc:scenario>\n</doc:scenario>\n</doc:example>"
            ]
        },
        "img": {
            "name": "img",
            "attributes": [],
            "module": "app",
            "file": "assets\\ui-grid.js",
            "line": 2448,
            "ngdoc": "directive",
            "memberof": "ui.grid.directive:uiGridOneBind",
            "restrict": "A",
            "params": [
                {
                    "name": "uiGridOneBindSrc",
                    "description": "The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.",
                    "type": "String"
                }
            ],
            "description": "One time binding for the src dom tag."
        },
        "div": {
            "name": "div",
            "attributes": [],
            "module": "app",
            "file": "assets\\ui-grid.js",
            "line": 2459,
            "ngdoc": "directive",
            "restrict": "A",
            "params": [
                {
                    "name": "uiGridOneBindText",
                    "description": "The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.",
                    "type": "String"
                }
            ],
            "description": "One time binding for the text dom tag.",
            "example": [
                "\n  <example module=\"app\">\n    <file name=\"app.js\">\n      var app = angular.module('app', ['ui.grid']);\n\n      app.controller('MainCtrl', ['$scope', function ($scope) {\n        $scope.data = [\n          { name: 'Bob', title: 'CEO' },\n          { name: 'Frank', title: 'Lowly Developer' }\n        ];\n      }]);\n    </file>\n    <file name=\"index.html\">\n      <div ng-controller=\"MainCtrl\">\n        <div ui-grid=\"{ data: data }\"></div>\n      </div>\n    </file>\n  </example>"
            ]
        },
        "ANY": {
            "name": "ANY",
            "attributes": [],
            "module": "app",
            "file": "assets\\ui-grid.js",
            "line": 2611,
            "ngdoc": "directive",
            "restrict": "A",
            "params": [
                {
                    "name": "uiGridOneBindAriaDescribedby",
                    "description": "The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.",
                    "type": "String"
                }
            ],
            "description": "One time binding for the aria-describedby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.\n<br/>\n<pre>\n           <div ng-init=\"anId = 'gridID32'\" ui-grid-one-bind-aria-describedby=\"anId\"></div>\n        </pre>\nWill become:\n<pre>\n           <div ng-init=\"anId = 'gridID32'\" ui-grid-one-bind-aria-describedby=\"anId\" aria-describedby=\"gridID32\"></div>\n        </pre>"
        },
        "input": {
            "name": "input",
            "attributes": [],
            "module": "app",
            "file": "assets\\ui-grid.js",
            "line": 17426,
            "ngdoc": "directive",
            "restrict": "E",
            "description": "directive to provide binding between input[date] value and ng-model for angular 1.2\nIt is similar to input[date] directive of angular 1.3\n\nSupported date format for input is 'yyyy-MM-dd'\nThe directive will set the $valid property of input element and the enclosing form to false if\nmodel is invalid date or value of input is entered wrong."
        }
    },
    "classitems": [
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 602,
            "description": "Updates datepicker options",
            "params": [
                {
                    "name": "param",
                    "description": "- parameter's name to update. If object then it will extend current options",
                    "type": "String|Object"
                },
                {
                    "name": "value",
                    "description": "- new param value",
                    "type": "String|Number|Object",
                    "optional": true
                }
            ],
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 702,
            "description": "Check if date is between minDate and maxDate",
            "params": [
                {
                    "name": "date",
                    "description": "- date object",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "- cell type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 1448,
            "description": "Returns copy of date with hours and minutes equals to 0",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                }
            ],
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 1637,
            "description": "Calculates days number to render. Generates days html and returns it.",
            "params": [
                {
                    "name": "date",
                    "description": "- Date object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 1676,
            "description": "Generates months html",
            "params": [
                {
                    "name": "date",
                    "description": "- date instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 2004,
            "description": "Sets minHours and minMinutes from date (usually it's a minDate)\nAlso changes minMinutes if current hours are bigger then @date hours",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 2045,
            "description": "Looks for min/max hours/minutes and if current values\nare out of range sets valid values.",
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 2119,
            "description": "Sets minHours, minMinutes etc. from date. If date is not passed, than sets\nvalues from options",
            "params": [
                {
                    "name": "date",
                    "description": "- Date object, to get values from",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\dist\\js\\datepicker.js",
            "line": 2143,
            "description": "Calculates valid hour value to display in text input and datepicker's body.",
            "params": [
                {
                    "name": "date",
                    "description": "- date or hours",
                    "type": "Date|Number"
                },
                {
                    "name": "ampm",
                    "description": "- 12 hours mode",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "}",
                "type": "Hours: *, dayPeriod: string"
            },
            "access": "private",
            "tagname": "",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 36,
            "description": "<p>ВСЕ ЧТО \"ПРЕДАЕТСЯ\"\" В HTML</p>\n           vm.tasck_limit = 15;\n           vm.ngGridView = null;\n\n           vm.user = null;\n           vm.allUsers = [];\n           vm.deleteUser = deleteUser;\n\n           vm.exit_modal = exit_modal;\n           vm.savetasck = savetasck;\n           vm.edittasck = edittasck;\n           vm.deltasck = deltasck;\n           vm.addtasck = addtasck;\n           vm.def_click = def_click;\n           vm.finish_loader = finish_loader;\n           vm.start_loader = start_loader;\n           vm.logModels = logModels;\n           vm.my_alert = my_alert;\n           vm.change_list = change_list;\n           vm.change = false;\n\n           vm.rawScreens = [];\n           vm.sortingLog = [];\n\n           vm.resjsontasks = [];\n           vm.resgetJsonLists = [];\n\n           vm.sortableOptions = {\n               placeholder: \"app\",\n               connectWith: \".apps-container\",\n               update: function(event, ui) {\n                 if (// ensure we are in the first update() callback\n                     !ui.item.sortable.received &&\n                     // check that its an actual moving\n                     // between the two lists\n                     ui.item.sortable.source[0] !== ui.item.sortable.droptarget[0] &&\n                     // check the size limitation\n                     ui.item.sortable.droptargetModel.length >= vm.tasck_limit) {\n                   ui.item.sortable.cancel();\n                 }\n               },\n               stop: function(event, ui) {\n                 //!!! ОБНОВЛЯЕМ id_list У ПЕРЕМЕЩЕННОЙ ЗАДАЧИ !!!\n                 // var str = Number(ui.item.sortable.droptargetList[0].attributes.id.value.slice(7,10));\n                 // ui.item.sortable.model.id_list = str + 1\n                 \n                 for (let i = 0; i < vm.rawScreens.length; i++) {\n                   vm.rawScreens[i].map(function (x) {\n                       // console.log(x);\n                       x.id_list = i + 1; \n                   })\n                 }\n               }\n           }; \n\n           vm.status = [\n               {id: 1, name:'Ожидает'},\n               {id: 2, name:'В работе'},\n               {id: 3, name:'Выполнено'},\n           ];\n\n           $('#dtpckr').datepicker();\n\n           var gridnameJsonLists = [];\n           let curUser = false;",
            "itemtype": "property",
            "name": "ДАННЫЕ ДЛЯ HTML",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 213,
            "description": "ФУНКЦИОНАЛ makeList (id_list):<br>\nВОЗВРАЩАЕТ ОТФИЛЬТРОВАННЫЙ ПО ПОЛЯМ: id_list/id_user МАССИВ ЗАДАЧ<br>\n               \n               function makeList (id_list) {\n                   var filter_resjsontasks = [];\n                   if(vm.user.id != 1) {\n                       filter_resjsontasks = vm.resjsontasks.filter(item => item.id_list == id_list && item.id_user == vm.user.id);\n                   }else{\n                       filter_resjsontasks = vm.resjsontasks.filter(item => item.id_list == id_list);\n                   }\n                   return filter_resjsontasks;\n               };",
            "itemtype": "method",
            "name": "makeList",
            "params": [
                {
                    "name": "id_list",
                    "description": "ID ЛИСТА",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "filter_resjsontasks",
                "type": "Object"
            },
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 241,
            "description": "ФУНКЦИОНАЛ createSheets (resgetJsonLists):<br>\nЦИКЛОМ СОЗДАЮТСЯ ЛИСТЫ. ЛИСТАМ ПРИСВАИВАЕТСЯ ИМЯ И ID<br> СОЗДАННЫЕ ЛИСТЫ ДОБАВЛЯЮТСЯ В МАССИВ vm.rawScreens\n               \n               function createSheets(resgetJsonLists){\n                   if(!curUser){\n                       UserService.GetByUsername($rootScope.globals.currentUser.username)\n                       .then(function (user) {\n                           // console.log('user', user);\n                           vm.user = user;\n                           for(let i=0; i < resgetJsonLists.length; i++){\n                               vm['list_' + resgetJsonLists[i].id] = makeList(resgetJsonLists[i].id);\n                               vm['list_' + resgetJsonLists[i].id].name = resgetJsonLists[i].name;\n                               vm.rawScreens.push(vm['list_' + resgetJsonLists[i].id]);\n                           };\n                           curUser = true;\n                           //СОЗДАЁМ ГРИД\n                           initGrid();\n                       });\n                   }else{\n                       for(let i=0; i < resgetJsonLists.length; i++){\n                           vm['list_' + resgetJsonLists[i].id] = makeList(resgetJsonLists[i].id);\n                           vm['list_' + resgetJsonLists[i].id].name = resgetJsonLists[i].name;\n                           vm.rawScreens.push(vm['list_' + resgetJsonLists[i].id]);\n                       };\n                   }\n               };\n\nПРИ ПЕРВОМ ПРОХОДЕ СОЗДАЕМ ГРИД",
            "itemtype": "method",
            "name": "createSheets",
            "params": [
                {
                    "name": "resgetJsonLists",
                    "description": "МАССИВ ИМЕН ЛИСТОВ",
                    "type": "Object"
                }
            ],
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 298,
            "description": "ФУНКЦИОНАЛ initGrid ():<br>\n1. vm.ngGridView - ОТОБРАЖАЕТ ГРИД В HTML<br>\n2. vm.status - МАССИВ СТАТУСОВ ЗАДАЧИ (myCelTemp1 - SELECT ИЗ vm.status)<br>\n3. vm.dragndrop_list - МАССИВ ЛИСТОВ (myCelTemp2 - SELECT ИЗ vm.dragndrop_list) <br>\n4. ВЫВОД ПОЛЕЙ В GRID ПО ПОРЯДКУ СОРТИРОВКИ ПОЛЯ sort МАССИВА ridnameJsonLists<br>\n5. ДЛЯ ОТОБРАЖЕНИЯ В ТАБЛИЦЕ СОЗДАЕМ \"СТРОКОВЫЙ ОБЪЕКТ\"- str И ПУШИМ ЕГО В columnDefs\n           \n           for(let j=0; j < tt.length; j++){\n               if(tt[j].id != \"$$hashKey\") {\n                       str = '{\"field\" : \"' + tt[j].id + '\"' + ',' + '\"displayName\" : \"' + gridnameJsonLists[j].gridname + '\"}' \n                       vm.gridOptions.columnDefs.push(JSON.parse(str)); \n               };\n           };\n\n6. СКРЫВАЕМ ПОЛЕ ЕСЛИ ОНО ПРИСУТСТВУЕТ В МАССИВЕ notVisible ДЛЯ ОСТАЛЬНЫХ - ПЕРЕИМЕНОВЫВАЕМ ПОЛЯ ГРИДА\n           \n           let notVisible = ['id'];//'id_list'\n\n           //СКРЫВАЕМ ПОЛЕ ЕСЛИ ОНО ПРИСУТСТВУЕТ В МАССИВЕ notVisible ДЛЯ ОСТАЛЬНЫХ - ПЕРЕИМЕНОВЫВАЕМ ПОЛЯ ГРИДА\n           for(let j=0; j < notVisible.length; j++){\n               for(let i=0; i < vm.gridOptions.columnDefs.length; i++){\n                   if(vm.gridOptions.columnDefs[i].field == notVisible[j]){\n                       vm.gridOptions.columnDefs[i].visible = false;\n                   }else{\n                       //НАХОДИМ ПО id (j) ИНДЕКС ЗАДАЧИ В МАССИВЕ vm.resjsontasks\n                       let firstIndex = find_index_by_id(gridnameJsonLists, vm.gridOptions.columnDefs[i].field);\n                       vm.gridOptions.columnDefs[i].displayName = gridnameJsonLists[firstIndex].gridname;\n                       vm.gridOptions.columnDefs[i].width = gridnameJsonLists[firstIndex].width;\n                   }\n               }\n           };\n\n7. ДОБАВЛЯЕМ КНОПКИ РЕДАКТИРОВАНИЯ И УДАЛЕНИЯ\n8. ДОБАВЛЯЕММ ФИЛЬТРЫ  И ОТМЕНЯЕМ ФИЛЬТРЫ ДЛЯ КНОПОК\n\n           for(let j=0; j < vm.gridOptions.columnDefs.length; j++){\n               \n               if(vm.gridOptions.columnDefs[j].field == \"id_list\" || vm.gridOptions.columnDefs[j].field == \"execution_status\"){\n                   if(vm.gridOptions.columnDefs[j].field == \"id_list\") {\n                       myFilter = myList\n                   } else  {\n                       myFilter = myStatus\n                   }\n\n                   str = '{' \n                       + '\"type\" : \"select\",' \n                       + '\"selectOptions\"  : [ '\n                       + myFilter \n                   + ']}'\n\n                   vm.gridOptions.columnDefs[j].filter = JSON.parse(str);\n\n                   if(vm.gridOptions.columnDefs[j].field == \"id_list\") {\n                       vm.gridOptions.columnDefs[j].cellFilter = 'id_list';\n                   }else{\n                       vm.gridOptions.columnDefs[j].cellFilter = 'execution_status';\n                   }\n\n               };\n\n               if(vm.gridOptions.columnDefs[j].field == \"edit\" || vm.gridOptions.columnDefs[j].field == \"delete\") vm.gridOptions.columnDefs[j].enableFiltering = false;\n               if(vm.gridOptions.columnDefs[j].field == \"id_user\") {\n                   vm.gridOptions.columnDefs[j].cellFilter = 'id_user';\n                   \n                   let dropDown;\n\n                   if(vm.user.id == 1) {\n                       vm.allUsers.map(item => dropDown = dropDown + '{\"value\": \"' + item.id + '\", \"label\": \"' + item.username + '\" },');\n                   }else{\n                       vm.allUsers.map(item => {\n                           if(item.id == vm.user.id) {\n                               dropDown = dropDown + '{\"value\": \"' + item.id + '\", \"label\": \"' + item.username + '\" },'\n                           }\n                       })\n                   }\n                   \n                   str = '{' \n                       + '\"type\" : \"select\",' \n                       + '\"selectOptions\"  :  ['\n                       + dropDown.slice(9,-1) \n                   + ']}';\n\n                   vm.gridOptions.columnDefs[j].filter = JSON.parse(str);\n               }\n           };",
            "itemtype": "method",
            "name": "initGrid",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 580,
            "description": "ФУНКЦИОНАЛ addtasck (i):<br>\n1. ФОРМИРУЕТ ИЗ СТРОКИ ОБЪЕКТ-ЗАДАЧУ<br> \n2. ДОБАВЛЯЕТ ОБЪЕКТ В vm.resjsontasks <br>\n3. ОБНОВЛЯЕТ vm.rawScreens И ГРИД",
            "itemtype": "method",
            "name": "addtasck",
            "params": [
                {
                    "name": "i",
                    "description": "НОМЕР ЛИСТА DRAG&DROP",
                    "type": "Integer"
                }
            ],
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 631,
            "description": "ФУНКЦИОНАЛ edittasck (i, j, t_index):<br>\nОТКРЫТИЕ ЗАДАЧИ ДЛЯ ПОДРОБНОГО ПРОСМОТРА И ВОЗМОЖНОГО РЕДАКТИРОВАНИЯ",
            "itemtype": "method",
            "name": "edittasck",
            "params": [
                {
                    "name": "i",
                    "description": "НОМЕР ЛИСТА DRAG&DROP",
                    "type": "Integer"
                },
                {
                    "name": "j",
                    "description": "id ЗАДАЧИ",
                    "type": "Integer"
                },
                {
                    "name": "t_index",
                    "description": "ПОРЯДКОВЫЙ НОМЕР ЗАДАЧИ В DRAG&DROP",
                    "type": "Integer"
                }
            ],
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 659,
            "description": "ФУНКЦИОНАЛ find_index_by_id(source, id) :<br>\nПОИСК ИНДЕКСА ЗАДАЧИ В МАССИВЕ ПЕРЕДАННОГО ОБЪЕКТА - source ПО ПЕРЕДАННОМУ id\n               function find_index_by_id(source,id){\n                   let indexes = $.map(source, function(obj, index) {\n                           if(obj.id == id) {\n                               return index;\n                           }\n                       }) \n                   return indexes[0];\n               };",
            "itemtype": "method",
            "name": "find_index_by_id",
            "params": [
                {
                    "name": "source",
                    "description": "МАССИВ ОБЪЕКТОВ",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "id ЗАДАЧИ",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "НАЙДЕННЫЙ ИНДЕКС",
                "type": "Integer"
            },
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\home\\home.controller.js",
            "line": 686,
            "itemtype": "method",
            "name": "savetasck",
            "description": "ФУНКЦИОНАЛ savetasck() :<br>\n1. ПОИСК ИНДЕКСА ЗАДАЧИ В МАССИВЕ vm.resjsontasks<br> \n2. ОБНОВЛЕНИЕ ПОЛЕЙ В ЗАДАЧЕ (ИЗ МАССИВА vm.resjsontasks)<br>\n3. ЕСЛИ БЫЛ ИЗМЕНЕН СТАТУС ЗАДАЧИ - ОБНОВЛЕНИЕ МАССИВА vm.rawScreens<br>",
            "class": "HomeController",
            "module": "app"
        },
        {
            "file": "assets\\login\\login.controller.js",
            "line": 51,
            "description": "initController <br> СБРОСИТЬ login СТАТУС - AuthenticationService.ClearCredentials()<br>",
            "itemtype": "method",
            "name": "initController",
            "class": "LoginController",
            "module": "app"
        },
        {
            "file": "assets\\login\\login.controller.js",
            "line": 61,
            "description": "login <br> ПРОВЕРКА username И password <br> ЕСЛИ ВСЕ ОК - $location.path('/')",
            "itemtype": "method",
            "name": "login",
            "class": "LoginController",
            "module": "app"
        },
        {
            "file": "assets\\register\\register.controller.js",
            "line": 49,
            "description": "register <br> СОЗДАЕТ (РЕГИСТРУЕТ) ПОЛЬЗОВАТЕЛЯ <br> ИНФОРМИРУЕТ О РЕЗУЛЬТАТЕ РЕГИСТРАЦИИ <br> ПЕРЕХОД НА СТРАНИЦУ АУТЕНТИФИКАЦИИ ( $location.path('/login'); )",
            "itemtype": "method",
            "name": "register",
            "class": "RegisterController",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14,
            "ngdoc": "object",
            "name": "ui.grid.service:uiGridConstants",
            "description": "Constants for use across many grid features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 85,
            "ngdoc": "object",
            "name": "ASC",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Used in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and\n{@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}\nto configure the sorting direction of the column",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 94,
            "ngdoc": "object",
            "name": "DESC",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Used in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and\n{@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}\nto configure the sorting direction of the column",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 105,
            "ngdoc": "object",
            "name": "filter",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Used in {@link ui.grid.class:GridOptions.columnDef#properties_filter columnDef.filter}\nto configure filtering on the column\n\n`SELECT` and `INPUT` are used with the `type` property of the filter, the rest are used to specify\none of the built-in conditions.\n\nAvailable `condition` options are:\n- `uiGridConstants.filter.STARTS_WITH`\n- `uiGridConstants.filter.ENDS_WITH`\n- `uiGridConstants.filter.CONTAINS`\n- `uiGridConstants.filter.GREATER_THAN`\n- `uiGridConstants.filter.GREATER_THAN_OR_EQUAL`\n- `uiGridConstants.filter.LESS_THAN`\n- `uiGridConstants.filter.LESS_THAN_OR_EQUAL`\n- `uiGridConstants.filter.NOT_EQUAL`\n\n\nAvailable `type` options are:\n- `uiGridConstants.filter.SELECT` - use a dropdown box for the cell header filter field\n- `uiGridConstants.filter.INPUT` - use a text box for the cell header filter field",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 144,
            "ngdoc": "object",
            "name": "aggregationTypes",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Used in {@link ui.grid.class:GridOptions.columnDef#properties_aggregationType columnDef.aggregationType}\nto specify the type of built-in aggregation the column should use.\n\nAvailable options are:\n- `uiGridConstants.aggregationTypes.sum` - add the values in this column to produce the aggregated value\n- `uiGridConstants.aggregationTypes.count` - count the number of rows to produce the aggregated value\n- `uiGridConstants.aggregationTypes.avg` - average the values in this column to produce the aggregated value\n- `uiGridConstants.aggregationTypes.min` - use the minimum value in this column as the aggregated value\n- `uiGridConstants.aggregationTypes.max` - use the maximum value in this column as the aggregated value",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 166,
            "ngdoc": "array",
            "name": "CURRENCY_SYMBOLS",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "A list of all presently circulating currency symbols that was copied from\nhttps://en.wikipedia.org/wiki/Currency_symbol#List_of_presently-circulating_currency_symbols\n\nCan be used on {@link ui.grid.class:rowSorter} to create a number string regex that ignores currency symbols.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 182,
            "ngdoc": "object",
            "name": "scrollDirection",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Set on {@link ui.grid.class:Grid#properties_scrollDirection Grid.scrollDirection},\nto indicate the direction the grid is currently scrolling in\n\nAvailable options are:\n- `uiGridConstants.scrollDirection.UP` - set when the grid is scrolling up\n- `uiGridConstants.scrollDirection.DOWN` - set when the grid is scrolling down\n- `uiGridConstants.scrollDirection.LEFT` - set when the grid is scrolling left\n- `uiGridConstants.scrollDirection.RIGHT` - set when the grid is scrolling right\n- `uiGridConstants.scrollDirection.NONE` - set when the grid is not scrolling, this is the default",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 205,
            "ngdoc": "object",
            "name": "dataChange",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Used with {@link ui.grid.core.api:PublicApi#methods_notifyDataChange PublicApi.notifyDataChange},\n{@link ui.grid.class:Grid#methods_callDataChangeCallbacks Grid.callDataChangeCallbacks},\nand {@link ui.grid.class:Grid#methods_registerDataChangeCallback Grid.registerDataChangeCallback}\nto specify the type of the event(s).\n\nAvailable options are:\n- `uiGridConstants.dataChange.ALL` - listeners fired on any of these events, fires listeners on all events.\n- `uiGridConstants.dataChange.EDIT` - fired when the data in a cell is edited\n- `uiGridConstants.dataChange.ROW` - fired when a row is added or removed\n- `uiGridConstants.dataChange.COLUMN` - fired when the column definitions are modified\n- `uiGridConstants.dataChange.OPTIONS` - fired when the grid options are modified",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 229,
            "ngdoc": "object",
            "name": "scrollbars",
            "propertyof": "ui.grid.service:uiGridConstants",
            "description": "Used with {@link ui.grid.class:GridOptions#properties_enableHorizontalScrollbar GridOptions.enableHorizontalScrollbar}\nand {@link ui.grid.class:GridOptions#properties_enableVerticalScrollbar GridOptions.enableVerticalScrollbar}\nto specify the scrollbar policy for that direction.\n\nAvailable options are:\n- `uiGridConstants.scrollbars.NEVER` - never show scrollbars in this direction\n- `uiGridConstants.scrollbars.ALWAYS` - always show scrollbars in this direction",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 368,
            "ngdoc": "service",
            "name": "ui.grid.service:uiGridColumnMenuService",
            "description": "Services for working with column menus, factored out\nto make the code easier to understand",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 377,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "initialize",
            "description": "Sets defaults, puts a reference to the $scope on\nthe uiGridController",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                },
                {
                    "name": "uiGridCtrl",
                    "description": "the uiGridController for the grid\nwe're on",
                    "type": "Controller"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 400,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "setColMenuItemWatch",
            "description": "Setup a watch on $scope.col.menuItems, and update\nmenuItems based on this.  $scope.col needs to be set by the column\nbefore calling the menu.",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                },
                {
                    "name": "uiGridCtrl",
                    "description": "the uiGridController for the grid\nwe're on",
                    "type": "Controller"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 433,
            "ngdoc": "boolean",
            "name": "enableSorting",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(optional) True by default. When enabled, this setting adds sort\nwidgets to the column header, allowing sorting of the data in the individual column.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 440,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "sortable",
            "description": "determines whether this column is sortable",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 457,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "isActiveSort",
            "description": "determines whether the requested sort direction is current active, to\nallow highlighting in the menu",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                },
                {
                    "name": "direction",
                    "description": "the direction that we'd have selected for us to be active",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 473,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "suppressRemoveSort",
            "description": "determines whether we should suppress the removeSort option",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 491,
            "ngdoc": "boolean",
            "name": "enableHiding",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(optional) True by default. When set to false, this setting prevents a user from hiding the column\nusing the column menu or the grid menu.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 498,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "hideable",
            "description": "determines whether a column can be hidden, by checking the enableHiding columnDef option",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 516,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "getDefaultMenuItems",
            "description": "returns the default menu items for a column menu",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 583,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "getColumnElementPosition",
            "description": "gets the position information needed to place the column\nmenu below the column header",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                },
                {
                    "name": "column",
                    "description": "the column we want to position below",
                    "type": "GridCol"
                },
                {
                    "name": "$columnElement",
                    "description": "the column element we want to position below",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "containing left, top, offset, height, width",
                "type": "Hash"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 614,
            "ngdoc": "method",
            "methodof": "ui.grid.service:uiGridColumnMenuService",
            "name": "repositionMenu",
            "description": "Reposition the menu below the new column.  If the menu has no child nodes\n(i.e. it's not currently visible) then we guess it's width at 100, we'll be called again\nlater to fix it",
            "params": [
                {
                    "name": "$scope",
                    "description": "the $scope from the uiGridColumnMenu",
                    "type": "$scope"
                },
                {
                    "name": "column",
                    "description": "the column we want to position below",
                    "type": "GridCol"
                },
                {
                    "name": "positionData",
                    "description": "a hash containing left, top, offset, height, width",
                    "type": "Hash"
                },
                {
                    "name": "$elm",
                    "description": "the column menu element that we want to reposition",
                    "type": "Element"
                },
                {
                    "name": "$columnElement",
                    "description": "the column element that we want to reposition underneath",
                    "type": "Element"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 675,
            "ngdoc": "directive",
            "name": "ui.grid.directive:uiGridColumnMenu",
            "description": "Provides the column menu framework, leverages uiGridMenu underneath",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 698,
            "ngdoc": "method",
            "methodof": "ui.grid.directive:uiGridColumnMenu",
            "name": "showMenu",
            "description": "Shows the column menu.  If the menu is already displayed it\ncalls the menu to ask it to hide (it will animate), then it repositions the menu\nto the right place whilst hidden (it will make an assumption on menu width),\nthen it asks the menu to show (it will animate), then it repositions the menu again\nonce we can calculate it's size.",
            "params": [
                {
                    "name": "column",
                    "description": "the column we want to position below",
                    "type": "GridCol"
                },
                {
                    "name": "$columnElement",
                    "description": "the column element we want to position below",
                    "type": "Element"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 737,
            "ngdoc": "method",
            "methodof": "ui.grid.directive:uiGridColumnMenu",
            "name": "hideMenu",
            "description": "Hides the column menu.",
            "params": [
                {
                    "name": "broadcastTrigger",
                    "description": "true if we were triggered by a broadcast\nfrom the menu itself - in which case don't broadcast again as we'll get\nan infinite loop",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1433,
            "ngdoc": "property",
            "name": "enableColumnMenu",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "if column menus are enabled, controls the column menus for this specific\ncolumn (i.e. if gridOptions.enableColumnMenus, then you can control column menus\nusing this option. If gridOptions.enableColumnMenus === false then you get no column\nmenus irrespective of the value of this option ).  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1443,
            "ngdoc": "property",
            "name": "enableColumnMenus",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Override for column menus everywhere - if set to false then you get no\ncolumn menus.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1689,
            "ngdoc": "service",
            "name": "ui.grid.gridMenuService",
            "description": "Methods for working with the grid menu",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1697,
            "ngdoc": "method",
            "methodof": "ui.grid.gridMenuService",
            "name": "initialize",
            "description": "Sets up the gridMenu. Most importantly, sets our\nscope onto the grid object as grid.gridMenuScope, allowing us\nto operate when passed only the grid.  Second most importantly,\nwe register the 'addToGridMenu' and 'removeFromGridMenu' methods\non the core api.",
            "params": [
                {
                    "name": "$scope",
                    "description": "the scope of this gridMenu",
                    "type": "$scope"
                },
                {
                    "name": "grid",
                    "description": "the grid to which this gridMenu is associated",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1729,
            "ngdoc": "function",
            "name": "addToGridMenu",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "add items to the grid menu.  Used by features\nto add their menu items if they are enabled, can also be used by\nend users to add menu items.  This method has the advantage of allowing\nremove again, which can simplify management of which items are included\nin the menu when.  (Noting that in most cases the shown and active functions\nprovide a better way to handle visibility of menu items)",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid on which we are acting",
                    "type": "Grid"
                },
                {
                    "name": "items",
                    "description": "menu items in the format as described in the tutorial, with\nthe added note that if you want to use remove you must also specify an `id` field,\nwhich is provided when you want to remove an item.  The id should be unique.",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1747,
            "ngdoc": "function",
            "name": "removeFromGridMenu",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Remove an item from the grid menu based on a provided id. Assumes\nthat the id is unique, removes only the last instance of that id. Does nothing if\nthe specified id is not found",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid on which we are acting",
                    "type": "Grid"
                },
                {
                    "name": "id",
                    "description": "the id we'd like to remove from the menu",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1762,
            "ngdoc": "function",
            "name": "addToGridMenu",
            "propertyof": "ui.grid.gridMenuService",
            "description": "add items to the grid menu.  Used by features\nto add their menu items if they are enabled, can also be used by\nend users to add menu items.  This method has the advantage of allowing\nremove again, which can simplify management of which items are included\nin the menu when.  (Noting that in most cases the shown and active functions\nprovide a better way to handle visibility of menu items)",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid on which we are acting",
                    "type": "Grid"
                },
                {
                    "name": "items",
                    "description": "menu items in the format as described in the tutorial, with\nthe added note that if you want to use remove you must also specify an `id` field,\nwhich is provided when you want to remove an item.  The id should be unique.",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1792,
            "ngdoc": "function",
            "name": "removeFromGridMenu",
            "methodof": "ui.grid.gridMenuService",
            "description": "Remove an item from the grid menu based on a provided id.  Assumes\nthat the id is unique, removes only the last instance of that id.  Does nothing if\nthe specified id is not found.  If there is no gridMenuScope or registeredMenuItems\nthen do nothing silently - the desired result is those menu items not be present and they\naren't.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid on which we are acting",
                    "type": "Grid"
                },
                {
                    "name": "id",
                    "description": "the id we'd like to remove from the menu",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1827,
            "ngdoc": "array",
            "name": "gridMenuCustomItems",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "(optional) An array of menu items that should be added to\nthe gridMenu.  Follow the format documented in the tutorial for column\nmenu customisation.  The context provided to the action function will\ninclude context.grid.  An alternative if working with dynamic menus is to use the\nprovided api - core.addToGridMenu and core.removeFromGridMenu, which handles\nsome of the management of items for you.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1839,
            "ngdoc": "boolean",
            "name": "gridMenuShowHideColumns",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "true by default, whether the grid menu should allow hide/show\nof columns",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1847,
            "ngdoc": "method",
            "methodof": "ui.grid.gridMenuService",
            "name": "getMenuItems",
            "description": "Decides the menu items to show in the menu.  This is a\ncombination of:\n\n- the default menu items that are always included,\n- any menu items that have been provided through the addMenuItem api. These\n  are typically added by features within the grid\n- any menu items included in grid.options.gridMenuCustomItems.  These can be\n  changed dynamically, as they're always recalculated whenever we show the\n  menu",
            "params": [
                {
                    "name": "$scope",
                    "description": "the scope of this gridMenu, from which we can find all\nthe information that we need",
                    "type": "$scope"
                }
            ],
            "return": {
                "description": "an array of menu items that can be shown",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1903,
            "ngdoc": "array",
            "name": "gridMenuTitleFilter",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "(optional) A function that takes a title string\n(usually the col.displayName), and converts it into a display value.  The function\nmust return either a string or a promise.\n\nUsed for internationalization of the grid menu column names - for angular-translate\nyou can pass $translate as the function, for i18nService you can pass getSafeText as the\nfunction",
            "example": [
                "\n<pre>\n  gridOptions = {\n    gridMenuTitleFilter: $translate\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1921,
            "ngdoc": "method",
            "methodof": "ui.grid.gridMenuService",
            "name": "showHideColumns",
            "description": "Adds two menu items for each of the columns in columnDefs.  One\nmenu item for hide, one menu item for show.  Each is visible when appropriate\n(show when column is not visible, hide when column is visible).  Each toggles\nthe visible property on the columnDef using toggleColumnVisibility",
            "params": [
                {
                    "name": "$scope",
                    "description": "of a gridMenu, which contains a reference to the grid",
                    "type": "$scope"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 1986,
            "ngdoc": "method",
            "methodof": "ui.grid.gridMenuService",
            "name": "setMenuItemTitle",
            "description": "Handles the response from gridMenuTitleFilter, adding it directly to the menu\nitem if it returns a string, otherwise waiting for the promise to resolve or reject then\nputting the result into the title",
            "params": [
                {
                    "name": "menuItem",
                    "description": "the menuItem we want to put the title on",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the colDef from which we can get displayName, name or field",
                    "type": "Object"
                },
                {
                    "name": "grid",
                    "description": "the grid, from which we can get the options.gridMenuTitleFilter",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 2017,
            "ngdoc": "method",
            "methodof": "ui.grid.gridMenuService",
            "name": "toggleColumnVisibility",
            "description": "Toggles the visibility of an individual column.  Expects to be\nprovided a context that has on it a gridColumn, which is the column that\nwe'll operate upon.  We change the visibility, and refresh the grid as appropriate",
            "params": [
                {
                    "name": "gridCol",
                    "description": "the column that we want to toggle",
                    "type": "GridCol"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 2411,
            "ngdoc": "overview",
            "name": "ui.grid.directive:uiGridOneBind",
            "summary": "A group of directives that provide a one time bind to a dom element.",
            "description": "A group of directives that provide a one time bind to a dom element.\nAs one time bindings are not supported in Angular 1.2.* this directive provdes this capability.\nThis is done to reduce the number of watchers on the dom.\n<br/>\n<h2>Short Example ({@link ui.grid.directive:uiGridOneBindSrc ui-grid-one-bind-src})</h2>\n<pre>\n       <div ng-init=\"imageName = 'myImageDir.jpg'\">\n         <img ui-grid-one-bind-src=\"imageName\"></img>\n       </div>\n    </pre>\nWill become:\n<pre>\n      <div ng-init=\"imageName = 'myImageDir.jpg'\">\n        <img ui-grid-one-bind-src=\"imageName\" src=\"myImageDir.jpg\"></img>\n      </div>\n    </pre>\n    </br>\n    <h2>Short Example ({@link ui.grid.directive:uiGridOneBindText ui-grid-one-bind-text})</h2>\n<pre>\n       <div ng-init=\"text='Add this text'\" ui-grid-one-bind-text=\"text\"></div>\n    </pre>\nWill become:\n<pre>\n  <div ng-init=\"text='Add this text'\" ui-grid-one-bind-text=\"text\">Add this text</div>\n    </pre>\n    </br>\n<b>Note:</b> This behavior is slightly different for the {@link ui.grid.directive:uiGridOneBindIdGrid uiGridOneBindIdGrid}\nand {@link ui.grid.directive:uiGridOneBindAriaLabelledbyGrid uiGridOneBindAriaLabelledbyGrid} directives.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3134,
            "ngdoc": "function",
            "name": "customScroller",
            "methodof": "ui.grid.class:GridOptions",
            "description": "(optional) uiGridViewport.on('scroll', scrollHandler) by default.\nA function that allows you to provide your own scroller function. It is particularly helpful if you want to use third party scrollers\nas this allows you to do that.\n\n<div class=\"alert alert-info\" role=\"alert\"> <strong>NOTE:</strong> It is important to remember to always pass in an event object to\nthe scrollHandler as the grid scrolling behavior will break without it.</div>\n<h5>Example</h5>\n<pre>\n  $scope.gridOptions = {\n      customScroller: function myScrolling(uiGridViewport, scrollHandler) {\n          uiGridViewport.on('scroll', function myScrollingOverride(event) {\n              // Do something here\n\n              scrollHandler(event);\n          });\n      }\n  };\n</pre>",
            "params": [
                {
                    "name": "uiGridViewport",
                    "description": "Element being scrolled. (this gets passed in by the grid).",
                    "type": "Object"
                },
                {
                    "name": "scrollHandler",
                    "description": "Function that needs to be called when scrolling happens. (this gets passed in by the grid).",
                    "type": "Function"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3743,
            "ngdoc": "object",
            "name": "ui.grid.core.api:PublicApi",
            "description": "Public Api for the core grid features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3750,
            "ngdoc": "function",
            "name": "ui.grid.class:Grid",
            "description": "Grid is the main viewModel.  Any properties or methods needed to maintain state are defined in\nthis prototype.  One instance of Grid is created per Grid directive instance.",
            "params": [
                {
                    "name": "options",
                    "description": "Object map of options to pass into the grid. An 'id' property is expected.",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3775,
            "ngdoc": "object",
            "name": "appScope",
            "propertyof": "ui.grid.class:Grid",
            "description": "reference to the application scope (the parent scope of the ui-grid element).  Assigned in ui-grid controller\n<br/>\nuse gridOptions.appScopeProvider to override the default assignment of $scope.$parent with any reference",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3788,
            "ngdoc": "object",
            "name": "footerHeight",
            "propertyof": "ui.grid.class:Grid",
            "description": "returns the total footer height gridFooter + columnFooter",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3797,
            "ngdoc": "object",
            "name": "columnFooterHeight",
            "propertyof": "ui.grid.class:Grid",
            "description": "returns the total column footer height",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3840,
            "ngdoc": "boolean",
            "name": "isScrollingVertically",
            "propertyof": "ui.grid.class:Grid",
            "description": "set to true when Grid is scrolling vertically. Set to false via debounced method",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3848,
            "ngdoc": "boolean",
            "name": "isScrollingHorizontally",
            "propertyof": "ui.grid.class:Grid",
            "description": "set to true when Grid is scrolling horizontally. Set to false via debounced method",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3856,
            "ngdoc": "property",
            "name": "scrollDirection",
            "propertyof": "ui.grid.class:Grid",
            "description": "set one of the {@link ui.grid.service:uiGridConstants#properties_scrollDirection uiGridConstants.scrollDirection}\n values (UP, DOWN, LEFT, RIGHT, NONE), which tells us which direction we are scrolling.\nSet to NONE via debounced method",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3889,
            "ngdoc": "function",
            "name": "flagScrollingVertically",
            "methodof": "ui.grid.class:Grid",
            "description": "sets isScrollingVertically to true and sets it to false in a debounced function",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3908,
            "ngdoc": "function",
            "name": "flagScrollingHorizontally",
            "methodof": "ui.grid.class:Grid",
            "description": "sets isScrollingHorizontally to true and sets it to false in a debounced function",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3941,
            "ngdoc": "function",
            "name": "refresh",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Refresh the rendered grid on screen.\nThe refresh method re-runs both the columnProcessors and the\nrowProcessors, as well as calling refreshCanvas to update all\nthe grid sizing.  In general you should prefer to use queueGridRefresh\ninstead, which is basically a debounced version of refresh.\n\nIf you only want to resize the grid, not regenerate all the rows\nand columns, you should consider directly calling refreshCanvas instead.",
            "params": [
                {
                    "name": "rowsAltered",
                    "description": "Optional flag for refreshing when the number of rows has changed",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3958,
            "ngdoc": "function",
            "name": "queueGridRefresh",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Request a refresh of the rendered grid on screen, if multiple\ncalls to queueGridRefresh are made within a digest cycle only one will execute.\nThe refresh method re-runs both the columnProcessors and the\nrowProcessors, as well as calling refreshCanvas to update all\nthe grid sizing.  In general you should prefer to use queueGridRefresh\ninstead, which is basically a debounced version of refresh.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3972,
            "ngdoc": "function",
            "name": "refreshRows",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Runs only the rowProcessors, columns remain as they were.\nIt then calls redrawInPlace and refreshCanvas, which adjust the grid sizing.",
            "return": {
                "description": "promise that is resolved when render completes?",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3983,
            "ngdoc": "function",
            "name": "queueRefresh",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Requests execution of refreshCanvas, if multiple requests are made\nduring a digest cycle only one will run.  RefreshCanvas updates the grid sizing.",
            "return": {
                "description": "promise that is resolved when render completes?",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 3994,
            "ngdoc": "function",
            "name": "handleWindowResize",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Trigger a grid resize, normally this would be picked\nup by a watch on window size, but in some circumstances it is necessary\nto call this manually",
            "return": {
                "description": "promise that is resolved when render completes?",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4007,
            "ngdoc": "function",
            "name": "addRowHeaderColumn",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "adds a row header column to the grid",
            "params": [
                {
                    "name": "column",
                    "description": "def",
                    "type": "Object"
                },
                {
                    "name": "order",
                    "description": "Determines order of header column on grid.  Lower order means header\nis positioned to the left of higher order headers",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4019,
            "ngdoc": "function",
            "name": "scrollToIfNecessary",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Scrolls the grid to make a certain row and column combo visible,\n  in the case that it is not completely visible on the screen already.",
            "params": [
                {
                    "name": "gridRow",
                    "description": "row to make visible",
                    "type": "GridRow"
                },
                {
                    "name": "gridCol",
                    "description": "column to make visible",
                    "type": "GridCol"
                }
            ],
            "return": {
                "description": "a promise that is resolved when scrolling is complete",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4032,
            "ngdoc": "function",
            "name": "scrollTo",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Scroll the grid such that the specified\nrow and column is in view",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance to make visible",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "to make visible",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that is resolved after any scrolling is finished",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4044,
            "ngdoc": "function",
            "name": "registerRowsProcessor",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Register a \"rows processor\" function. When the rows are updated,\nthe grid calls each registered \"rows processor\", which has a chance\nto alter the set of rows (sorting, etc) as long as the count is not\nmodified.",
            "params": [
                {
                    "name": "processorFunction",
                    "description": "rows processor function, which\nis run in the context of the grid (i.e. this for the function will be the grid), and must\nreturn the updated rows list, which is passed to the next processor in the chain",
                    "type": "Function(renderedRowsToProcess, columns )"
                },
                {
                    "name": "priority",
                    "description": "the priority of this processor.  In general we try to do them in 100s to leave room\nfor other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.\n\nAt present allRowsVisible is running at 50, sort manipulations running at 60-65, filter is running at 100,\nsort is at 200, grouping and treeview at 400-410, selectable rows at 500, pagination at 900 (pagination will generally want to be last)",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4065,
            "ngdoc": "function",
            "name": "registerColumnsProcessor",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Register a \"columns processor\" function. When the columns are updated,\nthe grid calls each registered \"columns processor\", which has a chance\nto alter the set of columns as long as the count is not\nmodified.",
            "params": [
                {
                    "name": "processorFunction",
                    "description": "columns processor function, which\nis run in the context of the grid (i.e. this for the function will be the grid), and must\nreturn the updated columns list, which is passed to the next processor in the chain",
                    "type": "Function(renderedColumnsToProcess, rows )"
                },
                {
                    "name": "priority",
                    "description": "the priority of this processor.  In general we try to do them in 100s to leave room\nfor other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.\n\nAt present allRowsVisible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4087,
            "ngdoc": "function",
            "name": "sortHandleNulls",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "A null handling method that can be used when building custom sort\nfunctions",
            "example": [
                "\n<pre>\n  mySortFn = function(a, b) {\n  var nulls = $scope.gridApi.core.sortHandleNulls(a, b);\n  if ( nulls !== null ){\n    return nulls;\n  } else {\n    // your code for sorting here\n  };\n</pre>"
            ],
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "null if there were no nulls/undefineds, otherwise returns\na sort value that should be passed back from the sort function",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4112,
            "ngdoc": "function",
            "name": "sortChanged",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "The sort criteria on one or more columns has\nchanged.  Provides as parameters the grid and the output of\ngetColumnSorting, which is an array of gridColumns\nthat have sorting on them, sorted in priority order.",
            "params": [
                {
                    "name": "scope",
                    "description": "The scope of the controller. This is used to deregister this event when the scope is destroyed.",
                    "type": "$scope"
                },
                {
                    "name": "callBack",
                    "description": "Will be called when the event is emited. The function passes back the grid and an array of\ncolumns with sorts on them, in priority order.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\n     gridApi.core.on.sortChanged( $scope, function(grid, sortColumns){\n       // do something\n     });\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4134,
            "ngdoc": "function",
            "name": "columnVisibilityChanged",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "The visibility of a column has changed,\nthe column itself is passed out as a parameter of the event.",
            "params": [
                {
                    "name": "scope",
                    "description": "The scope of the controller. This is used to deregister this event when the scope is destroyed.",
                    "type": "$scope"
                },
                {
                    "name": "callBack",
                    "description": "Will be called when the event is emited. The function passes back the GridCol that has changed.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<pre>\n     gridApi.core.on.columnVisibilityChanged( $scope, function (column) {\n       // do something\n     } );\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4153,
            "ngdoc": "method",
            "name": "notifyDataChange",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Notify the grid that a data or config change has occurred,\nwhere that change isn't something the grid was otherwise noticing.  This\nmight be particularly relevant where you've changed values within the data\nand you'd like cell classes to be re-evaluated, or changed config within\nthe columnDef and you'd like headerCellClasses to be re-evaluated.",
            "params": [
                {
                    "name": "type",
                    "description": "one of the\n{@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}\nvalues (ALL, ROW, EDIT, COLUMN), which tells us which refreshes to fire.",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4169,
            "ngdoc": "method",
            "name": "clearAllFilters",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Clears all filters and optionally refreshes the visible rows.",
            "params": [
                {
                    "name": "refreshRows",
                    "description": "Defaults to true.",
                    "type": "Object"
                },
                {
                    "name": "clearConditions",
                    "description": "Defaults to false.",
                    "type": "Object"
                },
                {
                    "name": "clearFlags",
                    "description": "Defaults to false.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If `refreshRows` is true, returns a promise of the rows refreshing.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4226,
            "ngdoc": "function",
            "name": "isRTL",
            "methodof": "ui.grid.class:Grid",
            "description": "Returns true if grid is RightToLeft",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4237,
            "ngdoc": "function",
            "name": "registerColumnBuilder",
            "methodof": "ui.grid.class:Grid",
            "description": "When the build creates columns from column definitions, the columnbuilders will be called to add\nadditional properties to the column.",
            "params": [
                {
                    "name": "columnBuilder",
                    "description": "function to be called",
                    "type": "Function(colDef, col, gridOptions)"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4249,
            "ngdoc": "function",
            "name": "buildColumnDefsFromData",
            "methodof": "ui.grid.class:Grid",
            "description": "Populates columnDefs from the provided data",
            "params": [
                {
                    "name": "rowBuilder",
                    "description": "function to be called",
                    "type": "Function(colDef, col, gridOptions)"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4260,
            "ngdoc": "function",
            "name": "registerRowBuilder",
            "methodof": "ui.grid.class:Grid",
            "description": "When the build creates rows from gridOptions.data, the rowBuilders will be called to add\nadditional properties to the row.",
            "params": [
                {
                    "name": "rowBuilder",
                    "description": "function to be called",
                    "type": "Function(row, gridOptions)"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4273,
            "ngdoc": "function",
            "name": "registerDataChangeCallback",
            "methodof": "ui.grid.class:Grid",
            "description": "When a data change occurs, the data change callbacks of the specified type\nwill be called.  The rules are:\n\n- when the data watch fires, that is considered a ROW change (the data watch only notices\n  added or removed rows)\n- when the api is called to inform us of a change, the declared type of that change is used\n- when a cell edit completes, the EDIT callbacks are triggered\n- when the columnDef watch fires, the COLUMN callbacks are triggered\n- when the options watch fires, the OPTIONS callbacks are triggered\n\nFor a given event:\n- ALL calls ROW, EDIT, COLUMN, OPTIONS and ALL callbacks\n- ROW calls ROW and ALL callbacks\n- EDIT calls EDIT and ALL callbacks\n- COLUMN calls COLUMN and ALL callbacks\n- OPTIONS calls OPTIONS and ALL callbacks",
            "params": [
                {
                    "name": "callback",
                    "description": "function to be called",
                    "type": "Function(grid)"
                },
                {
                    "name": "types",
                    "description": "the types of data change you want to be informed of.  Values from\nthe {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}\n values ( ALL, EDIT, ROW, COLUMN, OPTIONS ).  Optional and defaults to ALL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "deregister function - a function that can be called to deregister this callback",
                "type": "Function"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4317,
            "ngdoc": "function",
            "name": "callDataChangeCallbacks",
            "methodof": "ui.grid.class:Grid",
            "description": "Calls the callbacks based on the type of data change that\nhas occurred. Always calls the ALL callbacks, calls the ROW, EDIT, COLUMN and OPTIONS callbacks if the\nevent type is matching, or if the type is ALL.",
            "params": [
                {
                    "name": "type",
                    "description": "the type of event that occurred - one of the\n{@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}\n values (ALL, ROW, EDIT, COLUMN, OPTIONS)",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4343,
            "ngdoc": "function",
            "name": "notifyDataChange",
            "methodof": "ui.grid.class:Grid",
            "description": "Notifies us that a data change has occurred, used in the public\napi for users to tell us when they've changed data or some other event that\nour watches cannot pick up",
            "params": [
                {
                    "name": "type",
                    "description": "the type of event that occurred - one of the\nuiGridConstants.dataChange values (ALL, ROW, EDIT, COLUMN)",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4367,
            "ngdoc": "function",
            "name": "columnRefreshCallback",
            "methodof": "ui.grid.class:Grid",
            "description": "refreshes the grid when a column refresh\nis notified, which triggers handling of the visible flag.\nThis is called on uiGridConstants.dataChange.COLUMN, and is\nregistered as a dataChangeCallback in grid.js",
            "params": [
                {
                    "name": "grid",
                    "description": "The grid object.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Any options passed into the callback.",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4384,
            "ngdoc": "function",
            "name": "processRowsCallback",
            "methodof": "ui.grid.class:Grid",
            "description": "calls the row processors, specifically\nintended to reset the sorting when an edit is called,\nregistered as a dataChangeCallback on uiGridConstants.dataChange.EDIT",
            "params": [
                {
                    "name": "name",
                    "description": "column name",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4398,
            "ngdoc": "function",
            "name": "updateFooterHeightCallback",
            "methodof": "ui.grid.class:Grid",
            "description": "recalculates the footer height,\nregistered as a dataChangeCallback on uiGridConstants.dataChange.OPTIONS",
            "params": [
                {
                    "name": "name",
                    "description": "column name",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4412,
            "ngdoc": "function",
            "name": "getColumn",
            "methodof": "ui.grid.class:Grid",
            "description": "returns a grid column for the column name",
            "params": [
                {
                    "name": "name",
                    "description": "column name",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4426,
            "ngdoc": "function",
            "name": "getColDef",
            "methodof": "ui.grid.class:Grid",
            "description": "returns a grid colDef for the column name",
            "params": [
                {
                    "name": "name",
                    "description": "column.field",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4440,
            "ngdoc": "function",
            "name": "assignTypes",
            "methodof": "ui.grid.class:Grid",
            "description": "uses the first row of data to assign colDef.type for any types not defined.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4446,
            "ngdoc": "property",
            "name": "type",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "the type of the column, used in sorting.  If not provided then the\ngrid will guess the type.  Add this only if the grid guessing is not to your\nsatisfaction.  One of:\n- 'string'\n- 'boolean'\n- 'number'\n- 'date'\n- 'object'\n- 'numberStr'\nNote that if you choose date, your dates should be in a javascript date type",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4481,
            "ngdoc": "function",
            "name": "isRowHeaderColumn",
            "methodof": "ui.grid.class:Grid",
            "description": "returns true if the column is a row Header",
            "params": [
                {
                    "name": "column",
                    "description": "column",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4492,
            "ngdoc": "function",
            "name": "addRowHeaderColumn",
            "methodof": "ui.grid.class:Grid",
            "description": "adds a row header column to the grid",
            "params": [
                {
                    "name": "colDef",
                    "description": "Column definition object.",
                    "type": "Object"
                },
                {
                    "name": "order",
                    "description": "Number that indicates where the column should be placed in the grid.",
                    "type": "Float"
                },
                {
                    "name": "stopColumnBuild",
                    "description": "Prevents the buildColumn callback from being triggered. This is useful to improve\nperformance of the grid during initial load.",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4544,
            "ngdoc": "function",
            "name": "getOnlyDataColumns",
            "methodof": "ui.grid.class:Grid",
            "description": "returns all columns except for rowHeader columns",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4561,
            "ngdoc": "function",
            "name": "buildColumns",
            "methodof": "ui.grid.class:Grid",
            "description": "creates GridColumn objects from the columnDefinition.  Calls each registered\ncolumnBuilder to further process the column",
            "params": [
                {
                    "name": "options",
                    "description": "An object contains options to use when building columns\n\n* **orderByColumnDefs**: defaults to **false**. When true, `buildColumns` will reorder existing columns according to the order within the column definitions.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise to load any needed column resources",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4624,
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4677,
            "ngdoc": "function",
            "name": "preCompileCellTemplates",
            "methodof": "ui.grid.class:Grid",
            "description": "precompiles all cell templates",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4696,
            "ngdoc": "function",
            "name": "getGridQualifiedColField",
            "methodof": "ui.grid.class:Grid",
            "description": "Returns the $parse-able accessor for a column within its $scope",
            "params": [
                {
                    "name": "col",
                    "description": "col object",
                    "type": "GridColumn"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4711,
            "ngdoc": "function",
            "name": "createLeftContainer",
            "methodof": "ui.grid.class:Grid",
            "description": "creates the left render container if it doesn't already exist",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4723,
            "ngdoc": "function",
            "name": "createRightContainer",
            "methodof": "ui.grid.class:Grid",
            "description": "creates the right render container if it doesn't already exist",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4735,
            "ngdoc": "function",
            "name": "hasLeftContainer",
            "methodof": "ui.grid.class:Grid",
            "description": "returns true if leftContainer exists",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4745,
            "ngdoc": "function",
            "name": "hasRightContainer",
            "methodof": "ui.grid.class:Grid",
            "description": "returns true if rightContainer exists",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4756,
            "description": "defaults the name property from field to maintain backwards compatibility with 2.x\nvalidates that name or field is present",
            "name": "preprocessColDef",
            "methodof": "ui.grid.class:Grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4808,
            "ngdoc": "function",
            "name": "getRow",
            "methodof": "ui.grid.class:Grid",
            "description": "returns the GridRow that contains the rowEntity",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the gridOptions.data array element instance",
                    "type": "Object"
                },
                {
                    "name": "lookInRows",
                    "description": "[optional] the rows to look in - if not provided then\nlooks in grid.rows",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4829,
            "ngdoc": "function",
            "name": "modifyRows",
            "methodof": "ui.grid.class:Grid",
            "description": "creates or removes GridRow objects from the newRawData array.  Calls each registered\nrowBuilder to further process the row",
            "params": [
                {
                    "name": "newRawData",
                    "description": "Modified set of data\n\nThis method aims to achieve three things:\n1. the resulting rows array is in the same order as the newRawData, we'll call\nrowsProcessors immediately after to sort the data anyway\n2. if we have row hashing available, we try to use the rowHash to find the row\n3. no memory leaks - rows that are no longer in newRawData need to be garbage collected\n\nThe basic logic flow makes use of the newRawData, oldRows and oldHash, and creates\nthe newRows and newHash\n\n```\nnewRawData.forEach newEntity\n  if (hashing enabled)\n    check oldHash for newEntity\n  else\n    look for old row directly in oldRows\n  if !oldRowFound     // must be a new row\n    create newRow\n  append to the newRows and add to newHash\n  run the processors\n```\n\nRows are identified using the hashKey if configured.  If not configured, then rows\nare identified using the gridOptions.rowEquality function\n\nThis method is useful when trying to select rows immediately after loading data without\nusing a $timeout/$interval, e.g.:\n\n  $scope.gridOptions.data =  someData;\n  $scope.gridApi.grid.modifyRows($scope.gridOptions.data);\n  $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);\n\nOR to persist row selection after data update (e.g. rows selected, new data loaded, want\noriginally selected rows to be re-selected))",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4928,
            "description": "adds the newRawData array of rows to the grid and calls all registered\nrowBuilders. this keyword will reference the grid",
            "name": "addRows",
            "methodof": "ui.grid.class:Grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4953,
            "ngdoc": "function",
            "name": "processRowBuilders",
            "methodof": "ui.grid.class:Grid",
            "description": "processes all RowBuilders for the gridRow",
            "params": [
                {
                    "name": "gridRow",
                    "description": "reference to gridRow",
                    "type": "GridRow"
                }
            ],
            "return": {
                "description": "the gridRow with all additional behavior added",
                "type": "GridRow"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 4971,
            "ngdoc": "function",
            "name": "registerStyleComputation",
            "methodof": "ui.grid.class:Grid",
            "description": "registered a styleComputation function\n\nIf the function returns a value it will be appended into the grid's `<style>` block",
            "params": [
                {
                    "name": "styleComputation",
                    "description": "function",
                    "type": "Function($scope)"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5008,
            "ngdoc": "function",
            "name": "registerRowsProcessor",
            "methodof": "ui.grid.class:Grid",
            "description": "Register a \"rows processor\" function. When the rows are updated,\nthe grid calls each registered \"rows processor\", which has a chance\nto alter the set of rows (sorting, etc) as long as the count is not\nmodified.",
            "params": [
                {
                    "name": "processorFunction",
                    "description": "rows processor function, which\nis run in the context of the grid (i.e. this for the function will be the grid), and must\nreturn the updated rows list, which is passed to the next processor in the chain",
                    "type": "Function(renderedRowsToProcess, columns )"
                },
                {
                    "name": "priority",
                    "description": "the priority of this processor.  In general we try to do them in 100s to leave room\nfor other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.\n\nAt present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5039,
            "ngdoc": "function",
            "name": "removeRowsProcessor",
            "methodof": "ui.grid.class:Grid",
            "params": [
                {
                    "name": "rows",
                    "description": "processor function",
                    "type": "Function(renderableRows)"
                }
            ],
            "description": "Remove a registered rows processor",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5059,
            "description": "Run all the registered rows processors on the array of renderable rows",
            "name": "processRowsProcessors",
            "methodof": "ui.grid.class:Grid",
            "params": [
                {
                    "name": "The",
                    "description": "array of \"renderable\" rows",
                    "type": "Array[GridRow]"
                },
                {
                    "name": "The",
                    "description": "array of columns",
                    "type": "Array[GridColumn]"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5160,
            "ngdoc": "function",
            "name": "registerColumnsProcessor",
            "methodof": "ui.grid.class:Grid",
            "params": [
                {
                    "name": "columnProcessor",
                    "description": "column processor function, which\nis run in the context of the grid (i.e. this for the function will be the grid), and\nwhich must return an updated renderedColumnsToProcess which can be passed to the next processor\nin the chain",
                    "type": "Function(renderedColumnsToProcess, rows)"
                },
                {
                    "name": "priority",
                    "description": "the priority of this processor.  In general we try to do them in 100s to leave room\nfor other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.\n\nAt present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)",
                    "type": "Number"
                }
            ],
            "description": "Register a \"columns processor\" function. When the columns are updated,\n    the grid calls each registered \"columns processor\", which has a chance\n    to alter the set of columns, as long as the count is not modified.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5286,
            "ngdoc": "function",
            "name": "handleWindowResize",
            "methodof": "ui.grid.class:Grid",
            "description": "Triggered when the browser window resizes; automatically resizes the grid",
            "return": {
                "description": "A resolved promise once the window resize has completed.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5302,
            "ngdoc": "function",
            "name": "queueRefresh",
            "methodof": "ui.grid.class:Grid",
            "description": "queues a grid refreshCanvas, a way of debouncing all the refreshes we might otherwise issue",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5327,
            "ngdoc": "function",
            "name": "queueGridRefresh",
            "methodof": "ui.grid.class:Grid",
            "description": "queues a grid refresh, a way of debouncing all the refreshes we might otherwise issue",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5352,
            "ngdoc": "function",
            "name": "updateCanvasHeight",
            "methodof": "ui.grid.class:Grid",
            "description": "flags all render containers to update their canvas height",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5369,
            "ngdoc": "function",
            "name": "buildStyles",
            "methodof": "ui.grid.class:Grid",
            "description": "calls each styleComputation function",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5495,
            "description": "Scroll needed containers by calling their ScrollSyncs",
            "params": [
                {
                    "name": "sourceContainerId",
                    "description": "the containerId that has already set it's top/left.\n        can be empty string which means all containers need to set top/left"
                },
                {
                    "name": "scrollEvent",
                    "description": ""
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5611,
            "ngdoc": "function",
            "name": "getCellValue",
            "methodof": "ui.grid.class:Grid",
            "description": "Gets the value of a cell for a particular row and column",
            "params": [
                {
                    "name": "row",
                    "description": "Row to access",
                    "type": "GridRow"
                },
                {
                    "name": "col",
                    "description": "Column to access",
                    "type": "GridColumn"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5633,
            "ngdoc": "function",
            "name": "getCellDisplayValue",
            "methodof": "ui.grid.class:Grid",
            "description": "Gets the displayed value of a cell after applying any the `cellFilter`",
            "params": [
                {
                    "name": "row",
                    "description": "Row to access",
                    "type": "GridRow"
                },
                {
                    "name": "col",
                    "description": "Column to access",
                    "type": "GridColumn"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5673,
            "ngdoc": "function",
            "name": "resetColumnSorting",
            "methodof": "ui.grid.class:Grid",
            "description": "Return the columns that the grid is currently being sorted by",
            "params": [
                {
                    "name": "excludedColumn",
                    "description": "Optional GridColumn to exclude from having its sorting reset",
                    "type": "GridColumn",
                    "optional": true
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5690,
            "ngdoc": "function",
            "name": "getColumnSorting",
            "methodof": "ui.grid.class:Grid",
            "description": "Return the columns that the grid is currently being sorted by",
            "return": {
                "description": "An array of GridColumn objects",
                "type": "Array[GridColumn]"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5715,
            "ngdoc": "function",
            "name": "sortColumn",
            "methodof": "ui.grid.class:Grid",
            "description": "Set the sorting on a given column, optionally resetting any existing sorting on the Grid.\nEmits the sortChanged event whenever the sort criteria are changed.",
            "params": [
                {
                    "name": "column",
                    "description": "Column to set the sorting on",
                    "type": "GridColumn"
                },
                {
                    "name": "direction",
                    "description": "Direction to sort by, either descending or ascending.\n  If not provided, the column will iterate through the sort directions\n  specified in the {@link ui.grid.class:GridOptions.columnDef#sortDirectionCycle sortDirectionCycle} attribute.",
                    "type": "uiGridConstants.ASC|uiGridConstants.DESC",
                    "optional": true
                },
                {
                    "name": "add",
                    "description": "Add this column to the sorting. If not provided or set to `false`, the Grid will reset any existing sorting and sort\n  by this column only",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "A resolved promise that supplies the column.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5795,
            "description": "communicate to outside world that we are done with initial rendering",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5815,
            "ngdoc": "function",
            "name": "refresh",
            "methodof": "ui.grid.class:Grid",
            "description": "Refresh the rendered grid on screen.",
            "params": [
                {
                    "name": "rowsAltered",
                    "description": "Optional flag for refreshing when the number of rows has changed.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5839,
            "ngdoc": "function",
            "name": "refreshRows",
            "methodof": "ui.grid.class:Grid",
            "description": "Refresh the rendered rows on screen?  Note: not functional at present",
            "return": {
                "description": "promise that is resolved when render completes?",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 5860,
            "ngdoc": "function",
            "name": "refreshCanvas",
            "methodof": "ui.grid.class:Grid",
            "description": "Builds all styles and recalculates much of the grid sizing",
            "params": [
                {
                    "name": "buildStyles",
                    "description": "optional parameter.  Use TBD",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise that is resolved when the canvas\nhas been refreshed",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6020,
            "ngdoc": "function",
            "name": "redrawCanvas",
            "methodof": "ui.grid.class:Grid",
            "description": "Redraw the rows and columns based on our current scroll position",
            "params": [
                {
                    "name": "rowsAdded",
                    "description": "Optional to indicate rows are added and the scroll percentage must be recalculated",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6049,
            "ngdoc": "function",
            "name": "hasLeftContainerColumns",
            "methodof": "ui.grid.class:Grid",
            "description": "returns true if leftContainer has columns",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6059,
            "ngdoc": "function",
            "name": "hasRightContainerColumns",
            "methodof": "ui.grid.class:Grid",
            "description": "returns true if rightContainer has columns",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6069,
            "ngdoc": "method",
            "methodof": "ui.grid.class:Grid",
            "name": "scrollToIfNecessary",
            "description": "Scrolls the grid to make a certain row and column combo visible,\n  in the case that it is not completely visible on the screen already.",
            "params": [
                {
                    "name": "gridRow",
                    "description": "row to make visible",
                    "type": "GridRow"
                },
                {
                    "name": "gridCol",
                    "description": "column to make visible",
                    "type": "GridCol"
                }
            ],
            "return": {
                "description": "a promise that is resolved when scrolling is complete",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6228,
            "ngdoc": "method",
            "methodof": "ui.grid.class:Grid",
            "name": "scrollTo",
            "description": "Scroll the grid such that the specified\nrow and column is in view",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance to make visible",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "to make visible",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that is resolved after any scrolling is finished",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6251,
            "ngdoc": "function",
            "name": "clearAllFilters",
            "methodof": "ui.grid.class:Grid",
            "description": "Clears all filters and optionally refreshes the visible rows.",
            "params": [
                {
                    "name": "refreshRows",
                    "description": "Defaults to true.",
                    "type": "Object"
                },
                {
                    "name": "clearConditions",
                    "description": "Defaults to false.",
                    "type": "Object"
                },
                {
                    "name": "clearFlags",
                    "description": "Defaults to false.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If `refreshRows` is true, returns a promise of the rows refreshing.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6297,
            "description": "Store key value pair",
            "params": [
                {
                    "name": "key",
                    "description": "key to store can be any type"
                },
                {
                    "name": "value",
                    "description": "value to store can be any type"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6306,
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "the value for the key",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6314,
            "description": "Remove the key/value pair",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6338,
            "ngdoc": "function",
            "name": "ui.grid.class:GridApi",
            "description": "GridApi provides the ability to register public methods events inside the grid and allow\nfor other components to use the api via featureName.raise.methodName and featureName.on.eventName(function(args){}.\n<br/>\nTo listen to events, you must add a callback to gridOptions.onRegisterApi\n<pre>\n  $scope.gridOptions.onRegisterApi = function(gridApi){\n     gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){\n         $log.log('navigation event');\n     });\n  };\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "grid that owns api",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6358,
            "ngdoc": "function",
            "name": "renderingComplete",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Rendering is complete, called at the same\ntime as `onRegisterApi`, but provides a way to obtain\nthat same event within features without stopping end\nusers from getting at the onRegisterApi method.\n\nIncluded in gridApi so that it's always there - otherwise\nthere is still a timing problem with when a feature can\ncall this.",
            "params": [
                {
                    "name": "gridApi",
                    "description": "the grid api, as normally\nreturned in the onRegisterApi method",
                    "type": "GridApi"
                }
            ],
            "example": [
                "\n<pre>\n     gridApi.core.on.renderingComplete( grid );\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6381,
            "ngdoc": "event",
            "name": "filterChanged",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised after the filter is changed.  The nature\nof the watch expression doesn't allow notification of what changed,\nso the receiver of this event will need to re-extract the filter\nconditions from the columns.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6393,
            "ngdoc": "function",
            "name": "setRowInvisible",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Sets an override on the row to make it always invisible,\nwhich will override any filtering or other visibility calculations.\nIf the row is currently visible then sets it to invisible and calls\nboth grid refresh and emits the rowsVisibleChanged event",
            "params": [
                {
                    "name": "row",
                    "description": "the row we want to make invisible",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6405,
            "ngdoc": "function",
            "name": "clearRowInvisible",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Clears any override on visibility for the row so that it returns to\nusing normal filtering and other visibility calculations.\nIf the row is currently invisible then sets it to visible and calls\nboth grid refresh and emits the rowsVisibleChanged event\nTODO: if a filter is active then we can't just set it to visible?",
            "params": [
                {
                    "name": "row",
                    "description": "the row we want to make visible",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6418,
            "ngdoc": "function",
            "name": "getVisibleRows",
            "methodof": "ui.grid.core.api:PublicApi",
            "description": "Returns all visible rows",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid you want to get visible rows from",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "an array of gridRow",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6428,
            "ngdoc": "event",
            "name": "rowsVisibleChanged",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised after the rows that are visible\nchange.  The filtering is zero-based, so it isn't possible\nto say which rows changed (unlike in the selection feature).\nWe can plausibly know which row was changed when setRowInvisible\nis called, but in that situation the user already knows which row\nthey changed.  When a filter runs we don't know what changed,\nand that is the one that would have been useful.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6443,
            "ngdoc": "event",
            "name": "rowsRendered",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised after the cache of visible rows is changed.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6452,
            "ngdoc": "event",
            "name": "scrollBegin",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised when scroll begins.  Is throttled, so won't be raised too frequently",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6460,
            "ngdoc": "event",
            "name": "scrollEnd",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised when scroll has finished.  Is throttled, so won't be raised too frequently",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6468,
            "ngdoc": "event",
            "name": "canvasHeightChanged",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised when the canvas height has changed\n<br/>\narguments: oldHeight, newHeight",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6478,
            "ngdoc": "event",
            "name": "gridDimensionChanged",
            "eventof": "ui.grid.core.api:PublicApi",
            "description": "is raised when the grid dimensions have changed (when autoResize is on)\n<br/>\narguments: oldGridHeight, oldGridWidth, newGridHeight, newGridWidth",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6489,
            "ngdoc": "function",
            "name": "ui.grid.class:suppressEvents",
            "methodof": "ui.grid.class:GridApi",
            "description": "Used to execute a function while disabling the specified event listeners.\nDisables the listenerFunctions, executes the callbackFn, and then enables\nthe listenerFunctions again",
            "params": [
                {
                    "name": "listenerFuncs",
                    "description": "listenerFunc or array of listenerFuncs to suppress. These must be the same\nfunctions that were used in the .on.eventName method",
                    "type": "Object"
                },
                {
                    "name": "callBackFn",
                    "description": "function to execute",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<pre>\n   var navigate = function (newRowCol, oldRowCol){\n      //do something on navigate\n   }\n\n   gridApi.cellNav.on.navigate(scope,navigate);\n\n\n   //call the scrollTo event and suppress our navigate listener\n   //scrollTo will still raise the event for other listeners\n   gridApi.suppressEvents(navigate, function(){\n      gridApi.cellNav.scrollTo(aRow, aCol);\n   });\n\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6541,
            "ngdoc": "function",
            "name": "registerEvent",
            "methodof": "ui.grid.class:GridApi",
            "description": "Registers a new event for the given feature.  The event will get a\n.raise and .on prepended to it\n<br>\n.raise.eventName() - takes no arguments\n<br/>\n<br/>\n.on.eventName(scope, callBackFn, _this)\n<br/>\nscope - a scope reference to add a deregister call to the scopes .$on('destroy').  Scope is optional and can be a null value,\nbut in this case you must deregister it yourself via the returned deregister function\n<br/>\ncallBackFn - The function to call\n<br/>\n_this - optional this context variable for callbackFn. If omitted, grid.api will be used for the context\n<br/>\n.on.eventName returns a dereg funtion that will remove the listener.  It's not necessary to use it as the listener\nwill be removed when the scope is destroyed.",
            "params": [
                {
                    "name": "featureName",
                    "description": "name of the feature that raises the event",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "name of the event",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6622,
            "ngdoc": "function",
            "name": "registerEventsFromObject",
            "methodof": "ui.grid.class:GridApi",
            "description": "Registers features and events from a simple objectMap.\neventObjectMap must be in this format (multiple features allowed)\n<pre>\n{featureName:\n       {\n         eventNameOne:function(args){},\n         eventNameTwo:function(args){}\n       }\n }\n</pre>",
            "params": [
                {
                    "name": "eventObjectMap",
                    "description": "map of feature/event names",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6657,
            "ngdoc": "function",
            "name": "registerMethod",
            "methodof": "ui.grid.class:GridApi",
            "description": "Registers a new event for the given feature",
            "params": [
                {
                    "name": "featureName",
                    "description": "name of the feature",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "name of the method",
                    "type": "String"
                },
                {
                    "name": "callBackFn",
                    "description": "function to execute",
                    "type": "Object"
                },
                {
                    "name": "_this",
                    "description": "binds callBackFn 'this' to _this.  Defaults to gridApi.grid",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6677,
            "ngdoc": "function",
            "name": "registerMethodsFromObject",
            "methodof": "ui.grid.class:GridApi",
            "description": "Registers features and methods from a simple objectMap.\neventObjectMap must be in this format (multiple features allowed)\n<br>\n{featureName:\n       {\n         methodNameOne:function(args){},\n         methodNameTwo:function(args){}\n       }",
            "params": [
                {
                    "name": "eventObjectMap",
                    "description": "map of feature/event names",
                    "type": "Object"
                },
                {
                    "name": "_this",
                    "description": "binds this to _this for all functions.  Defaults to gridApi.grid",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6722,
            "description": "******************************************************************************************\nPaulL1: Ugly hack here in documentation.  These properties are clearly properties of GridColumn,\nand need to be noted as such for those extending and building ui-grid itself.\nHowever, from an end-developer perspective, they interact with all these through columnDefs,\nand they really need to be documented there.  I feel like they're relatively static, and\nI can't find an elegant way for ngDoc to reference to both....so I've duplicated each\ncomment block.  Ugh.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6733,
            "ngdoc": "property",
            "name": "name",
            "propertyof": "ui.grid.class:GridColumn",
            "description": "(mandatory) Each column should have a name, although for backward\ncompatibility with 2.x name can be omitted if field is present.\n\nImportant - This must be unique to each column on a web page since it can\nbe used as a key for retrieving information such as custom sort algorithms.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6745,
            "ngdoc": "property",
            "name": "name",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(mandatory) Each column should have a name, although for backward\ncompatibility with 2.x name can be omitted if field is present.\n\nImportant - This must be unique to each column on a web page since it can\nbe used as a key for retrieving information such as custom sort algorithms.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6757,
            "ngdoc": "property",
            "name": "displayName",
            "propertyof": "ui.grid.class:GridColumn",
            "description": "Column name that will be shown in the header.  If displayName is not\nprovided then one is generated using the name.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6766,
            "ngdoc": "property",
            "name": "displayName",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Column name that will be shown in the header.  If displayName is not\nprovided then one is generated using the name.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6775,
            "ngdoc": "property",
            "name": "field",
            "propertyof": "ui.grid.class:GridColumn",
            "description": "field must be provided if you wish to bind to a\nproperty in the data source.  Should be an angular expression that evaluates against grid.options.data\narray element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.\nSee the angular docs on binding expressions.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6786,
            "ngdoc": "property",
            "name": "field",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "field must be provided if you wish to bind to a\nproperty in the data source.  Should be an angular expression that evaluates against grid.options.data\narray element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.    * See the angular docs on binding expressions.    *",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6795,
            "ngdoc": "property",
            "name": "filter",
            "propertyof": "ui.grid.class:GridColumn",
            "description": "Filter on this column.\n\nAvailable built-in conditions and types are listed under {@link jui.grid.service:uiGridConstants#properties_filter uiGridOptions.filter}",
            "example": [
                "\n<pre>{ term: 'text', condition: uiGridConstants.filter.STARTS_WITH, placeholder: 'type to filter...', ariaLabel: 'Filter for text', flags: { caseSensitive: false }, type: uiGridConstants.filter.SELECT, [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ] }</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6807,
            "ngdoc": "property",
            "name": "extraStyle",
            "propertyof": "ui.grid.class:GridColumn",
            "description": "additional on this column.",
            "example": [
                "\n<pre>{extraStyle: {display:'table-cell'}}</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6817,
            "ngdoc": "object",
            "name": "ui.grid.class:GridColumn",
            "description": "Represents the viewModel for each column.  Any state or methods needed for a Grid Column\nare defined on this prototype",
            "params": [
                {
                    "name": "colDef",
                    "description": "the column def to associate with this column",
                    "type": "ColumnDef"
                },
                {
                    "name": "uid",
                    "description": "the unique and immutable uid we'd like to allocate to this column",
                    "type": "Number"
                },
                {
                    "name": "grid",
                    "description": "the grid we'd like to create this column in",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6842,
            "ngdoc": "property",
            "name": "aggregationType",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "The aggregation that you'd like to show in the columnFooter for this\ncolumn.  Valid values are in\n{@link ui.grid.service:uiGridConstants#properties_aggregationTypes uiGridConstants.aggregationTypes},\nand currently include `uiGridConstants.aggregationTypes.count`,\n`uiGridConstants.aggregationTypes.sum`, `uiGridConstants.aggregationTypes.avg`, `uiGridConstants.aggregationTypes.min`,\n`uiGridConstants.aggregationTypes.max`.\n\nYou can also provide a function as the aggregation type, in this case your function needs to accept the full\nset of visible rows, and return a value that should be shown",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6908,
            "ngdoc": "function",
            "name": "getAggregationValue",
            "methodof": "ui.grid.class:GridColumn",
            "description": "gets the aggregation value based on the aggregation type for this column.\nDebounced using scrollDebounce option setting",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6924,
            "ngdoc": "function",
            "name": "hideColumn",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Hides the column by setting colDef.visible = false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6935,
            "ngdoc": "method",
            "methodof": "ui.grid.class:GridColumn",
            "name": "setPropertyOrDefault",
            "description": "Sets a property on the column using the passed in columnDef, and\nsetting the defaultValue if the value cannot be found on the colDef",
            "params": [
                {
                    "name": "colDef",
                    "description": "the column def to look in for the property value",
                    "type": "ColumnDef"
                },
                {
                    "name": "propName",
                    "description": "the property name we'd like to set",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "the value to use if the colDef doesn't provide the setting",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6964,
            "ngdoc": "property",
            "name": "width",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "sets the column width.  Can be either\na number or a percentage, or an * for auto.",
            "example": [
                "\n<pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', width: 100},\n                                         { field: 'field2', width: '20%'},\n                                         { field: 'field3', width: '*' }]; </pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6977,
            "ngdoc": "property",
            "name": "minWidth",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "sets the minimum column width.  Should be a number.",
            "example": [
                "\n<pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', minWidth: 100}]; </pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6987,
            "ngdoc": "property",
            "name": "maxWidth",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "sets the maximum column width.  Should be a number.",
            "example": [
                "\n<pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', maxWidth: 100}]; </pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 6997,
            "ngdoc": "property",
            "name": "visible",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "sets whether or not the column is visible\n</br>Default is true",
            "example": [
                "\n<pre>  $scope.gridOptions.columnDefs = [\n    { field: 'field1', visible: true},\n    { field: 'field2', visible: false }\n  ]; </pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7011,
            "ngdoc": "property",
            "name": "sort",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "An object of sort information, attributes are:\n\n- direction: values are {@link ui.grid.service:uiGridConstants#properties_ASC uiGridConstants.ASC}\n or {@link ui.grid.service:uiGridConstants#properties_DESC uiGridConstants.DESC}\n- ignoreSort: if set to true this sort is ignored (used by tree to manipulate the sort functionality)\n- priority: says what order to sort the columns in (lower priority gets sorted first).",
            "example": [
                "\n<pre>\n  $scope.gridOptions.columnDefs = [{\n    field: 'field1',\n    sort: {\n      direction: uiGridConstants.ASC,\n      ignoreSort: true,\n      priority: 0\n     }\n  }];\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7035,
            "ngdoc": "property",
            "name": "sortingAlgorithm",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Algorithm to use for sorting this column. Takes 'a' and 'b' parameters\nlike any normal sorting function with additional 'rowA', 'rowB', and 'direction' parameters\nthat are the row objects and the current direction of the sort respectively.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7045,
            "ngdoc": "property",
            "name": "defaultSort",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "An object of sort information, provides a hidden default ordering of the data\nwhen no user sorts are applied, or when a user-provided sort deems two rows to be equal.\n\nMay be combined with a regular {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort}\nto explicitly sort by that column by default.\n\nShares the same object format as {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort}.\n\nNote that a defaultSort can never take priority over an explicit sort.",
            "example": [
                "\n<pre>\n  $scope.gridOptions.columnDefs = [{\n    field: 'field1',\n    defaultSort: {\n      direction: uiGridConstants.ASC,\n      priority: 0\n     }\n  }];\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7070,
            "ngdoc": "array",
            "name": "filters",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Specify multiple filter fields.",
            "example": [
                "\n<pre>$scope.gridOptions.columnDefs = [\n  {\n    field: 'field1', filters: [\n      {\n        term: 'aa',\n        condition: uiGridConstants.filter.STARTS_WITH,\n        placeholder: 'starts with...',\n        ariaLabel: 'Filter for field1',\n        flags: { caseSensitive: false },\n        type: uiGridConstants.filter.SELECT,\n        selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]\n      },\n      {\n        condition: uiGridConstants.filter.ENDS_WITH,\n        placeholder: 'ends with...'\n      }\n    ]\n  }\n]; </pre>\n\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7099,
            "ngdoc": "array",
            "name": "filters",
            "propertyof": "ui.grid.class:GridColumn",
            "description": "Filters for this column. Includes 'term' property bound to filter input elements.",
            "example": [
                "\n<pre>[\n  {\n    term: 'foo', // ngModel for <input>\n    condition: uiGridConstants.filter.STARTS_WITH,\n    placeholder: 'starts with...',\n    ariaLabel: 'Filter for foo',\n    flags: { caseSensitive: false },\n    type: uiGridConstants.filter.SELECT,\n    selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]\n  },\n  {\n    term: 'baz',\n    condition: uiGridConstants.filter.ENDS_WITH,\n    placeholder: 'ends with...'\n  }\n] </pre>\n\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7125,
            "ngdoc": "array",
            "name": "menuItems",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "used to add menu items to a column.  Refer to the tutorial on this\nfunctionality.  A number of settings are supported:\n\n- title: controls the title that is displayed in the menu\n- icon: the icon shown alongside that title\n- action: the method to call when the menu is clicked\n- shown: a function to evaluate to determine whether or not to show the item\n- active: a function to evaluate to determine whether or not the item is currently selected\n- context: context to pass to the action function, available in this.context in your handler\n- leaveOpen: if set to true, the menu should stay open after the action, defaults to false",
            "example": [
                "\n<pre>  $scope.gridOptions.columnDefs = [\n  { field: 'field1', menuItems: [\n    {\n      title: 'Outer Scope Alert',\n      icon: 'ui-grid-icon-info-circled',\n      action: function($event) {\n        this.context.blargh(); // $scope.blargh() would work too, this is just an example\n      },\n      shown: function() { return true; },\n      active: function() { return true; },\n      context: $scope\n    },\n    {\n      title: 'Grid ID',\n      action: function() {\n        alert('Grid ID: ' + this.grid.id);\n      }\n    }\n  ] }]; </pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7162,
            "ngdoc": "method",
            "methodof": "ui.grid.class:GridColumn",
            "name": "updateColumnDef",
            "description": "Moves settings from the columnDef down onto the column,\nand sets properties as appropriate",
            "params": [
                {
                    "name": "colDef",
                    "description": "the column def to look in for the property value",
                    "type": "ColumnDef"
                },
                {
                    "name": "isNew",
                    "description": "whether the column is being newly created, if not\nwe're updating an existing column, and some items such as the sort shouldn't\nbe copied down",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7256,
            "ngdoc": "property",
            "name": "cellTooltip",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Whether or not to show a tooltip when a user hovers over the cell.\nIf set to false, no tooltip.  If true, the cell value is shown in the tooltip (useful\nif you have long values in your cells), if a function then that function is called\npassing in the row and the col `cellTooltip( row, col )`, and the return value is shown in the tooltip,\nif it is a static string then displays that static string.\n\nDefaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7283,
            "ngdoc": "property",
            "name": "headerTooltip",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Whether or not to show a tooltip when a user hovers over the header cell.\nIf set to false, no tooltip.  If true, the displayName is shown in the tooltip (useful\nif you have long values in your headers), if a function then that function is called\npassing in the row and the col `headerTooltip( col )`, and the return value is shown in the tooltip,\nif a static string then shows that static string.\n\nDefaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7311,
            "ngdoc": "property",
            "name": "footerCellClass",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "footerCellClass can be a string specifying the class to append to a cell\nor it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7321,
            "ngdoc": "property",
            "name": "cellClass",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "cellClass can be a string specifying the class to append to a cell\nor it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7331,
            "ngdoc": "property",
            "name": "headerCellClass",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "headerCellClass can be a string specifying the class to append to a cell\nor it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7341,
            "ngdoc": "property",
            "name": "cellFilter",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "cellFilter is a filter to apply to the content of each cell",
            "example": [
                "\n<pre>\n  gridOptions.columnDefs[0].cellFilter = 'date'\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7353,
            "ngdoc": "boolean",
            "name": "sortCellFiltered",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(optional) False by default. When `true` uiGrid will apply the cellFilter before\nsorting the data. Note that when using this option uiGrid will assume that the displayed value is\na string, and use the {@link ui.grid.class:RowSorter#sortAlpha sortAlpha} `sortFn`. It is possible\nto return a non-string value from an angularjs filter, in which case you should define a {@link ui.grid.class:GridOptions.columnDef#sortingAlgorithm sortingAlgorithm}\nfor the column which hanldes the returned type. You may specify one of the `sortingAlgorithms`\nfound in the {@link ui.grid.RowSorter rowSorter} service.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7366,
            "ngdoc": "boolean",
            "name": "filterCellFiltered",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(optional) False by default. When `true` uiGrid will apply the cellFilter before\napplying \"search\" `filters`.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7375,
            "ngdoc": "property",
            "name": "headerCellFilter",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "headerCellFilter is a filter to apply to the content of the column header",
            "example": [
                "\n<pre>\n  gridOptions.columnDefs[0].headerCellFilter = 'translate'\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7387,
            "ngdoc": "property",
            "name": "footerCellFilter",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "footerCellFilter is a filter to apply to the content of the column footer",
            "example": [
                "\n<pre>\n  gridOptions.columnDefs[0].footerCellFilter = 'date'\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7408,
            "ngdoc": "property",
            "name": "sortDirectionCycle",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(optional) An array of {@link ui.grid.service:uiGridConstants#properties_ASC sort directions},\nspecifying the order that they should cycle through as the user repeatedly clicks on the column heading.\nThe default is `[null, uiGridConstants.ASC, uiGridConstants.DESC]`. Null\nrefers to the unsorted state. This does not affect the initial sort\ndirection; use the {@link ui.grid.class:GridOptions.columnDef#sort sort}\nproperty for that. If\n{@link ui.grid.class:GridOptions.columnDef#suppressRemoveSort suppressRemoveSort}\nis also set, the unsorted state will be skipped even if it is listed here.\nEach direction may not appear in the list more than once (e.g. `[ASC,\nDESC, DESC]` is not allowed), and the list may not be empty.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7427,
            "ngdoc": "boolean",
            "name": "suppressRemoveSort",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "(optional) False by default. When enabled, this setting hides the removeSort option\nin the menu, and prevents users from manually removing the sort",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7438,
            "ngdoc": "property",
            "name": "enableFiltering",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "turn off filtering for an individual column, where\nyou've turned on filtering for the overall grid",
            "example": [
                "\n<pre>\n  gridOptions.columnDefs[0].enableFiltering = false;\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7485,
            "ngdoc": "property",
            "name": "filter",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "Specify a single filter field on this column.\n\nA filter consists of a condition, a term, and a placeholder:\n\n- condition defines how rows are chosen as matching the filter term. This can be set to\none of the constants in {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter},\nor you can supply a custom filter function\nthat gets passed the following arguments: [searchTerm, cellValue, row, column].\n- term: If set, the filter field will be pre-populated\nwith this value.\n- placeholder: String that will be set to the `<input>.placeholder` attribute.\n- ariaLabel: String that will be set to the `<input>.ariaLabel` attribute. This is what is read as a label to screen reader users.\n- noTerm: set this to true if you have defined a custom function in condition, and\nyour custom function doesn't require a term (so it can run even when the term is null)\n- rawTerm: set this to true if you have defined a custom function in condition, and\nyour custom function requires access to the raw unmodified search term that was entered\n- flags: only flag currently available is `caseSensitive`, set to false if you don't want\ncase sensitive matching\n- type: defaults to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.INPUT},\nwhich gives a text box.  If set to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.SELECT}\nthen a select box will be shown with options selectOptions\n- selectOptions: options in the format `[ { value: 1, label: 'male' }]`.  No i18n filter is provided, you need\nto perform the i18n on the values before you provide them\n- disableCancelFilterButton: defaults to false. If set to true then the 'x' button that cancels/clears the filter\nwill not be shown.",
            "example": [
                "\n<pre>$scope.gridOptions.columnDefs = [\n  {\n    field: 'field1',\n    filter: {\n      term: 'xx',\n      condition: uiGridConstants.filter.STARTS_WITH,\n      placeholder: 'starts with...',\n      ariaLabel: 'Starts with filter for field1',\n      flags: { caseSensitive: false },\n      type: uiGridConstants.filter.SELECT,\n      selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ],\n      disableCancelFilterButton: true\n    }\n  }\n]; </pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7581,
            "ngdoc": "function",
            "name": "unsort",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Removes column from the grid sorting",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7602,
            "ngdoc": "function",
            "name": "getColClass",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Returns the class name for the column",
            "params": [
                {
                    "name": "prefixDot",
                    "description": "if true, will return .className instead of className",
                    "type": "Bool"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7615,
            "ngdoc": "function",
            "name": "isPinnedLeft",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Returns true if column is in the left render container",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7625,
            "ngdoc": "function",
            "name": "isPinnedRight",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Returns true if column is in the right render container",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7636,
            "ngdoc": "function",
            "name": "getColClassDefinition",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Returns the class definition for th column",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7646,
            "ngdoc": "function",
            "name": "getRenderContainer",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Returns the render container object that this column belongs to.\n\nColumns will be default be in the `body` render container if they aren't allocated to one specifically.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7666,
            "ngdoc": "function",
            "name": "showColumn",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Makes the column visible by setting colDef.visible = true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7677,
            "ngdoc": "property",
            "name": "aggregationHideLabel",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "defaults to false, if set to true hides the label text\nin the aggregation footer, so only the value is displayed.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7685,
            "ngdoc": "function",
            "name": "getAggregationText",
            "methodof": "ui.grid.class:GridColumn",
            "description": "Gets the aggregation label from colDef.aggregationLabel if\nspecified or by using i18n, including deciding whether or not to display\nbased on colDef.aggregationHideLabel.",
            "params": [
                {
                    "name": "label",
                    "description": "the i18n lookup value to use for the column label",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7744,
            "ngdoc": "function",
            "name": "ui.grid.class:GridOptions",
            "description": "Default GridOptions class.  GridOptions are defined by the application developer and overlaid\nover this object.  Setting gridOptions within your controller is the most common method for an application\ndeveloper to configure the behaviour of their ui-grid",
            "example": [
                " To define your gridOptions within your controller:\n<pre>$scope.gridOptions = {\n  data: $scope.myData,\n  columnDefs: [\n    { name: 'field1', displayName: 'pretty display name' },\n    { name: 'field2', visible: false }\n ]\n};</pre>\n\nYou can then use this within your html template, when you define your grid:\n<pre>&lt;div ui-grid=\"gridOptions\"&gt;&lt;/div&gt;</pre>\n\nTo provide default options for all of the grids within your application, use an angular\ndecorator to modify the GridOptions factory.\n<pre>\napp.config(function($provide){\n  $provide.decorator('GridOptions',function($delegate){\n    var gridOptions;\n    gridOptions = angular.copy($delegate);\n    gridOptions.initialize = function(options) {\n      var initOptions;\n      initOptions = $delegate.initialize(options);\n      initOptions.enableColumnMenus = false;\n      return initOptions;\n    };\n    return gridOptions;\n  });\n});\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7783,
            "ngdoc": "function",
            "name": "onRegisterApi",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "A callback that returns the gridApi once the grid is instantiated, which is\nthen used to interact with the grid programatically.\n\nNote that the gridApi.core.renderingComplete event is identical to this\ncallback, but has the advantage that it can be called from multiple places\nif needed",
            "example": [
                "\n<pre>\n  $scope.gridOptions.onRegisterApi = function ( gridApi ) {\n    $scope.gridApi = gridApi;\n    $scope.gridApi.selection.selectAllRows( $scope.gridApi.grid );\n  };\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7805,
            "ngdoc": "object",
            "name": "data",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "(mandatory) Array of data to be rendered into the grid, providing the data source or data binding for\nthe grid.\n\nMost commonly the data is an array of objects, where each object has a number of attributes.\nEach attribute automatically becomes a column in your grid.  This array could, for example, be sourced from\nan angularJS $resource query request.  The array can also contain complex objects, refer the binding tutorial\nfor examples of that.\n\nThe most flexible usage is to set your data on $scope:\n\n`$scope.data = data;`\n\nAnd then direct the grid to resolve whatever is in $scope.data:\n\n`$scope.gridOptions.data = 'data';`\n\nThis is the most flexible approach as it allows you to replace $scope.data whenever you feel like it without\ngetting pointer issues.\n\nAlternatively you can directly set the data array:\n\n`$scope.gridOptions.data = [ ];`\nor\n\n`$http.get('/data/100.json')\n.success(function(data) {\n  $scope.myData = data;\n  $scope.gridOptions.data = $scope.myData;\n });`\n\nWhere you do this, you need to take care in updating the data - you can't just update `$scope.myData` to some other\narray, you need to update $scope.gridOptions.data to point to that new array as well.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7845,
            "ngdoc": "array",
            "name": "columnDefs",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Array of columnDef objects.  Only required property is name.\nThe individual options available in columnDefs are documented in the\n{@link ui.grid.class:GridOptions.columnDef columnDef} section\n</br>_field property can be used in place of name for backwards compatibility with 2.x_",
            "example": [
                "\n\n<pre>var columnDefs = [{name:'field1'}, {name:'field2'}];</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7860,
            "ngdoc": "object",
            "name": "ui.grid.class:GridOptions.columnDef",
            "description": "Definition / configuration of an individual column, which would typically be\none of many column definitions within the gridOptions.columnDefs array",
            "example": [
                "\n<pre>{name:'field1', field: 'field1', filter: { term: 'xxx' }}</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7871,
            "ngdoc": "array",
            "name": "excludeProperties",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Array of property names in data to ignore when auto-generating column names.  Provides the\ninverse of columnDefs - columnDefs is a list of columns to include, excludeProperties is a list of columns\nto exclude.\n\nIf columnDefs is defined, this will be ignored.\n\nDefaults to ['$$hashKey']",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7886,
            "ngdoc": "boolean",
            "name": "enableRowHashing",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "True by default. When enabled, this setting allows uiGrid to add\n`$$hashKey`-type properties (similar to Angular) to elements in the `data` array. This allows\nthe grid to maintain state while vastly speeding up the process of altering `data` by adding/moving/removing rows.\n\nNote that this DOES add properties to your data that you may not want, but they are stripped out when using `angular.toJson()`. IF\nyou do not want this at all you can disable this setting but you will take a performance hit if you are using large numbers of rows\nand are altering the data set often.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7900,
            "ngdoc": "function",
            "name": "rowIdentity",
            "methodof": "ui.grid.class:GridOptions",
            "description": "This function is used to get and, if necessary, set the value uniquely identifying this row (i.e. if an identity is not present it will set one).\n\nBy default it returns the `$$hashKey` property if it exists. If it doesn't it uses gridUtil.nextUid() to generate one",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7912,
            "ngdoc": "function",
            "name": "getRowIdentity",
            "methodof": "ui.grid.class:GridOptions",
            "description": "This function returns the identity value uniquely identifying this row, if one is not present it does not set it.\n\nBy default it returns the `$$hashKey` property but can be overridden to use any property or set of properties you want.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7924,
            "ngdoc": "property",
            "name": "flatEntityAccess",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Set to true if your columns are all related directly to fields in a flat object structure - i.e.\neach of your columns associate directly with a property on each of the entities in your data array.\n\nIn that situation we can avoid all the logic associated with complex binding to functions or to properties of sub-objects,\nwhich can provide a significant speed improvement with large data sets when filtering or sorting.\n\nBy default false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7938,
            "ngdoc": "property",
            "name": "showHeader",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "True by default. When set to false, this setting will replace the\nstandard header template with '<div></div>', resulting in no header being shown.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7961,
            "ngdoc": "property",
            "name": "rowHeight",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "The height of the row in pixels,  Can be passed as integer or string. defaults to 30.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7977,
            "ngdoc": "integer",
            "name": "minRowsToShow",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Minimum number of rows to show when the grid doesn't have a defined height. Defaults to \"10\".",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7985,
            "ngdoc": "property",
            "name": "showGridFooter",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Whether or not to show the footer, defaults to false\nThe footer display Total Rows and Visible Rows (filtered rows)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 7994,
            "ngdoc": "property",
            "name": "showColumnFooter",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Whether or not to show the column footer, defaults to false\nThe column footer displays column aggregates",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8003,
            "ngdoc": "property",
            "name": "columnFooterHeight",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "The height of the footer rows (column footer and grid footer) in pixels",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8015,
            "ngdoc": "property",
            "name": "maxVisibleColumnCount",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Defaults to 200",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8024,
            "ngdoc": "property",
            "name": "virtualizationThreshold",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Turn virtualization on when number of data elements goes over this number, defaults to 20",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8032,
            "ngdoc": "property",
            "name": "columnVirtualizationThreshold",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Turn virtualization on when number of columns goes over this number, defaults to 10",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8040,
            "ngdoc": "property",
            "name": "excessRows",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Extra rows to to render outside of the viewport, which helps with smoothness of scrolling.\nDefaults to 4",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8048,
            "ngdoc": "property",
            "name": "scrollThreshold",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Defaults to 4",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8056,
            "ngdoc": "property",
            "name": "excessColumns",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Extra columns to to render outside of the viewport, which helps with smoothness of scrolling.\nDefaults to 4",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8064,
            "ngdoc": "property",
            "name": "horizontalScrollThreshold",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Defaults to 4",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8073,
            "ngdoc": "property",
            "name": "aggregationCalcThrottle",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Default time in milliseconds to throttle aggregation calcuations, defaults to 500ms",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8081,
            "ngdoc": "property",
            "name": "wheelScrollThrottle",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Default time in milliseconds to throttle scroll events to, defaults to 70ms",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8090,
            "ngdoc": "property",
            "name": "scrollDebounce",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Default time in milliseconds to debounce scroll events, defaults to 300ms",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8098,
            "ngdoc": "boolean",
            "name": "enableSorting",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "True by default. When enabled, this setting adds sort\nwidgets to the column headers, allowing sorting of the data for the entire grid.\nSorting can then be disabled / enabled on individual columns using the columnDefs,\nif it set, it will override GridOptions enableSorting setting.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8109,
            "ngdoc": "boolean",
            "name": "enableFiltering",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "False by default. When enabled, this setting adds filter\nboxes to each column header, allowing filtering within the column for the entire grid.\nFiltering can then be disabled on individual columns using the columnDefs.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8119,
            "ngdoc": "boolean",
            "name": "enableColumnMenus",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "True by default. When enabled, this setting displays a column\nmenu within each column.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8128,
            "ngdoc": "boolean",
            "name": "enableVerticalScrollbar",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "{@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.\nThis settings controls the vertical scrollbar for the grid.\nSupported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8138,
            "ngdoc": "boolean",
            "name": "enableHorizontalScrollbar",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "{@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.\nThis settings controls the horizontal scrollbar for the grid.\nSupported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8148,
            "ngdoc": "boolean",
            "name": "enableMinHeightCheck",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "True by default. When enabled, a newly initialized grid will check to see if it is tall enough to display\nat least one row of data.  If the grid is not tall enough, it will resize the DOM element to display minRowsToShow number\nof rows.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8158,
            "ngdoc": "boolean",
            "name": "minimumColumnSize",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Columns can't be smaller than this, defaults to 10 pixels",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8166,
            "ngdoc": "function",
            "name": "rowEquality",
            "methodof": "ui.grid.class:GridOptions",
            "description": "By default, rows are compared using object equality.  This option can be overridden\nto compare on any data item property or function",
            "params": [
                {
                    "name": "entityA",
                    "description": "First Data Item to compare",
                    "type": "Object"
                },
                {
                    "name": "entityB",
                    "description": "Second Data Item to compare",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8179,
            "ngdoc": "string",
            "name": "headerTemplate",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Null by default. When provided, this setting uses a custom header\ntemplate, rather than the default template. Can be set to either the name of a template file:\n<pre>  $scope.gridOptions.headerTemplate = 'header_template.html';</pre>\ninline html\n<pre>  $scope.gridOptions.headerTemplate = '<div class=\"ui-grid-top-panel\" style=\"text-align: center\">I am a Custom Grid Header</div>'</pre>\nor the id of a precompiled template (TBD how to use this).\n</br>Refer to the custom header tutorial for more information.\nIf you want no header at all, you can set to an empty div:\n<pre>  $scope.gridOptions.headerTemplate = '<div></div>';</pre>\n\nIf you want to only have a static header, then you can set to static content.  If\nyou want to tailor the existing column headers, then you should look at the\ncurrent 'ui-grid-header.html' template in github as your starting point.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8200,
            "ngdoc": "string",
            "name": "footerTemplate",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "(optional) ui-grid/ui-grid-footer by default.  This footer shows the per-column\naggregation totals.\nWhen provided, this setting uses a custom footer template. Can be set to either the name of a template file 'footer_template.html', inline html\n<pre>'<div class=\"ui-grid-bottom-panel\" style=\"text-align: center\">I am a Custom Grid Footer</div>'</pre>, or the id\nof a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8212,
            "ngdoc": "string",
            "name": "gridFooterTemplate",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "(optional) ui-grid/ui-grid-grid-footer by default. This template by default shows the\ntotal items at the bottom of the grid, and the selected items if selection is enabled.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8221,
            "ngdoc": "string",
            "name": "rowTemplate",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "'ui-grid/ui-grid-row' by default. When provided, this setting uses a\ncustom row template.  Can be set to either the name of a template file:\n<pre> $scope.gridOptions.rowTemplate = 'row_template.html';</pre>\ninline html\n<pre>  $scope.gridOptions.rowTemplate = '<div style=\"background-color: aquamarine\" ng-click=\"grid.appScope.fnOne(row)\" ng-repeat=\"col in colContainer.renderedColumns track by col.colDef.name\" class=\"ui-grid-cell\" ui-grid-cell></div>';</pre>\nor the id of a precompiled template (TBD how to use this) can be provided.\n</br>Refer to the custom row template tutorial for more information.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8235,
            "ngdoc": "string",
            "name": "gridMenuTemplate",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "'ui-grid/uiGridMenu' by default. When provided, this setting uses a\ncustom grid menu template.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8244,
            "ngdoc": "object",
            "name": "appScopeProvider",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "by default, the parent scope of the ui-grid element will be assigned to grid.appScope\nthis property allows you to assign any reference you want to grid.appScope",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8266,
            "ngdoc": "function",
            "name": "ui.grid.class:GridRenderContainer",
            "description": "The grid has render containers, allowing the ability to have pinned columns.  If the grid\nis right-to-left then there may be a right render container, if left-to-right then there may\nbe a left render container.  There is always a body render container.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the render container ('body', 'left', or 'right')",
                    "type": "String"
                },
                {
                    "name": "grid",
                    "description": "the grid the render container is in",
                    "type": "Grid"
                },
                {
                    "name": "options",
                    "description": "the render container options",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8309,
            "ngdoc": "boolean",
            "name": "hasHScrollbar",
            "propertyof": "ui.grid.class:GridRenderContainer",
            "description": "flag to signal that container has a horizontal scrollbar",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8317,
            "ngdoc": "boolean",
            "name": "hasVScrollbar",
            "propertyof": "ui.grid.class:GridRenderContainer",
            "description": "flag to signal that container has a vertical scrollbar",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8325,
            "ngdoc": "boolean",
            "name": "canvasHeightShouldUpdate",
            "propertyof": "ui.grid.class:GridRenderContainer",
            "description": "flag to signal that container should recalculate the canvas size",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8333,
            "ngdoc": "boolean",
            "name": "canvasHeight",
            "propertyof": "ui.grid.class:GridRenderContainer",
            "description": "last calculated canvas height value",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8417,
            "ngdoc": "function",
            "name": "registerViewportAdjuster",
            "methodof": "ui.grid.class:GridRenderContainer",
            "description": "Registers an adjuster to the render container's available width or height.  Adjusters are used\nto tell the render container that there is something else consuming space, and to adjust it's size\nappropriately.",
            "params": [
                {
                    "name": "func",
                    "description": "the adjuster function we want to register",
                    "type": "Function"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8431,
            "ngdoc": "function",
            "name": "removeViewportAdjuster",
            "methodof": "ui.grid.class:GridRenderContainer",
            "description": "Removes an adjuster, should be used when your element is destroyed",
            "params": [
                {
                    "name": "func",
                    "description": "the adjuster function we want to remove",
                    "type": "Function"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8446,
            "ngdoc": "function",
            "name": "getViewportAdjustment",
            "methodof": "ui.grid.class:GridRenderContainer",
            "description": "Gets the adjustment based on the viewportAdjusters.",
            "return": {
                "description": "a hash of { height: x, width: y }.  Usually the values will be negative",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8533,
            "ngdoc": "function",
            "name": "getCanvasHeight",
            "methodof": "ui.grid.class:GridRenderContainer",
            "description": "Returns the total canvas height.   Only recalculates if canvasHeightShouldUpdate = false",
            "return": {
                "description": "total height of all the visible rows in the container",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 8835,
            "ngdoc": "boolean",
            "name": "updateColumnWidths",
            "propertyof": "ui.grid.class:GridRenderContainer",
            "description": "Determine the appropriate column width of each column across all render containers.\n\nColumn width is easy when each column has a specified width.  When columns are variable width (i.e.\nhave an * or % of the viewport) then we try to calculate so that things fit in.  The problem is that\nwe have multiple render containers, and we don't want one render container to just take the whole viewport\nwhen it doesn't need to - we want things to balance out across the render containers.\n\nTo do this, we use this method to calculate all the renderContainers, recognising that in a given render\ncycle it'll get called once per render container, so it needs to return the same values each time.\n\nThe constraints on this method are therefore:\n- must return the same value when called multiple times, to do this it needs to rely on properties of the\n  columns, but not properties that change when this is called (so it shouldn't rely on drawnWidth)\n\nThe general logic of this method is:\n- calculate our total available width\n- look at all the columns across all render containers, and work out which have widths and which have\n  constraints such as % or * or something else\n- for those with *, count the total number of * we see and add it onto a running total, add this column to an * array\n- for those with a %, allocate the % as a percentage of the viewport, having consideration of min and max\n- for those with manual width (in pixels) we set the drawnWidth to the specified width\n- we end up with an asterisks array still to process\n- we look at our remaining width.  If it's greater than zero, we divide it up among the asterisk columns, then process\n  them for min and max width constraints\n- if it's zero or less, we set the asterisk columns to their minimum widths\n- we use parseInt quite a bit, as we try to make all our column widths integers",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9071,
            "ngdoc": "function",
            "name": "ui.grid.class:GridRow",
            "description": "GridRow is the viewModel for one logical row on the grid.  A grid Row is not necessarily a one-to-one\nrelation to gridOptions.data.",
            "params": [
                {
                    "name": "entity",
                    "description": "the array item from GridOptions.data",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "the current position of the row in the array",
                    "type": "Number"
                },
                {
                    "name": "reference",
                    "description": "to the parent grid",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9082,
            "ngdoc": "object",
            "name": "grid",
            "propertyof": "ui.grid.class:GridRow",
            "description": "A reference back to the grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9090,
            "ngdoc": "object",
            "name": "entity",
            "propertyof": "ui.grid.class:GridRow",
            "description": "A reference to an item in gridOptions.data[]",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9098,
            "ngdoc": "object",
            "name": "uid",
            "propertyof": "ui.grid.class:GridRow",
            "description": "UniqueId of row",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9106,
            "ngdoc": "object",
            "name": "visible",
            "propertyof": "ui.grid.class:GridRow",
            "description": "If true, the row will be rendered",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9120,
            "ngdoc": "object",
            "name": "height",
            "propertyof": "ui.grid.class:GridRow",
            "description": "height of each individual row. changing the height will flag all\nrow renderContainers to recalculate their canvas height",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9139,
            "ngdoc": "function",
            "name": "getQualifiedColField",
            "methodof": "ui.grid.class:GridRow",
            "description": "returns the qualified field name as it exists on scope\nie: row.entity.fieldA",
            "params": [
                {
                    "name": "col",
                    "description": "column instance",
                    "type": "GridCol"
                }
            ],
            "return": {
                "description": "resulting name that can be evaluated on scope",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9152,
            "ngdoc": "function",
            "name": "getEntityQualifiedColField",
            "methodof": "ui.grid.class:GridRow",
            "description": "returns the qualified field name minus the row path\nie: entity.fieldA",
            "params": [
                {
                    "name": "col",
                    "description": "column instance",
                    "type": "GridCol"
                }
            ],
            "return": {
                "description": "resulting name that can be evaluated against a row",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9170,
            "ngdoc": "function",
            "name": "setRowInvisible",
            "methodof": "ui.grid.class:GridRow",
            "description": "Sets an override on the row that forces it to always\nbe invisible. Emits the rowsVisibleChanged event if it changed the row visibility.\n\nThis method can be called from the api, passing in the gridRow we want\naltered.  It should really work by calling gridRow.setRowInvisible, but that's\nnot the way I coded it, and too late to change now.  Changed to just call\nthe internal function row.setThisRowInvisible().",
            "params": [
                {
                    "name": "row",
                    "description": "the row we want to set to invisible",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9192,
            "ngdoc": "function",
            "name": "clearRowInvisible",
            "methodof": "ui.grid.class:GridRow",
            "description": "Clears an override on the row that forces it to always\nbe invisible. Emits the rowsVisibleChanged event if it changed the row visibility.\n\nThis method can be called from the api, passing in the gridRow we want\naltered.  It should really work by calling gridRow.clearRowInvisible, but that's\nnot the way I coded it, and too late to change now.  Changed to just call\nthe internal function row.clearThisRowInvisible().",
            "params": [
                {
                    "name": "row",
                    "description": "the row we want to clear the invisible flag",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9214,
            "ngdoc": "function",
            "name": "setThisRowInvisible",
            "methodof": "ui.grid.class:GridRow",
            "description": "Sets an override on the row that forces it to always\nbe invisible. Emits the rowsVisibleChanged event if it changed the row visibility",
            "params": [
                {
                    "name": "reason",
                    "description": "the reason (usually the module) for the row to be invisible.\nE.g. grouping, user, filter",
                    "type": "String"
                },
                {
                    "name": "fromRowsProcessor",
                    "description": "whether we were called from a rowsProcessor, passed through to evaluateRowVisibility",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9234,
            "ngdoc": "function",
            "name": "clearRowInvisible",
            "methodof": "ui.grid.class:GridRow",
            "description": "Clears any override on the row visibility, returning it \nto normal visibility calculations.  Emits the rowsVisibleChanged\nevent",
            "params": [
                {
                    "name": "reason",
                    "description": "the reason (usually the module) for the row to be invisible.\nE.g. grouping, user, filter",
                    "type": "String"
                },
                {
                    "name": "fromRowsProcessor",
                    "description": "whether we were called from a rowsProcessor, passed through to evaluateRowVisibility",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9254,
            "ngdoc": "function",
            "name": "evaluateRowVisibility",
            "methodof": "ui.grid.class:GridRow",
            "description": "Determines whether the row should be visible based on invisibleReason, \nand if it changes the row visibility, then emits the rowsVisibleChanged event.\n\nQueues a grid refresh, but doesn't call it directly to avoid hitting lots of grid refreshes.",
            "params": [
                {
                    "name": "fromRowProcessor",
                    "description": "if true, then it won't raise events or queue the refresh, the\nrow processor does that already",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9292,
            "ngdoc": "object",
            "name": "ui.grid.class:GridRowColumn",
            "params": [
                {
                    "name": "row",
                    "description": "The row for this pair",
                    "type": "GridRow"
                },
                {
                    "name": "column",
                    "description": "The column for this pair",
                    "type": "GridColumn"
                }
            ],
            "description": "A row and column pair that represents the intersection of these two entities.\nMust be instantiated as a constructor using the `new` keyword.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9308,
            "ngdoc": "object",
            "name": "row",
            "propertyof": "ui.grid.class:GridRowColumn",
            "description": "{@link ui.grid.class:GridRow }",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9315,
            "ngdoc": "object",
            "name": "col",
            "propertyof": "ui.grid.class:GridRowColumn",
            "description": "{@link ui.grid.class:GridColumn }",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9324,
            "ngdoc": "function",
            "name": "getIntersectionValueRaw",
            "methodof": "ui.grid.class:GridRowColumn",
            "description": "Gets the intersection of where the row and column meet.",
            "return": {
                "description": "The value from the grid data that this GridRowColumn points too.\n         If the column has a cellFilter this will NOT return the filtered value.",
                "type": "String|Number|Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9346,
            "ngdoc": "function",
            "name": "ui.grid.class:ScrollEvent",
            "description": "Model for all scrollEvents",
            "params": [
                {
                    "name": "grid",
                    "description": "that owns the scroll event",
                    "type": "Grid"
                },
                {
                    "name": "sourceRowContainer",
                    "description": "that owns the scroll event. Can be null",
                    "type": "GridRenderContainer"
                },
                {
                    "name": "sourceColContainer",
                    "description": "that owns the scroll event. Can be null",
                    "type": "GridRenderContainer"
                },
                {
                    "name": "source",
                    "description": "the source of the event - from uiGridConstants.scrollEventSources or a string value of directive/service/factory.functionName",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9361,
            "ngdoc": "object",
            "name": "grid",
            "propertyof": "ui.grid.class:ScrollEvent",
            "description": "A reference back to the grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9371,
            "ngdoc": "object",
            "name": "source",
            "propertyof": "ui.grid.class:ScrollEvent",
            "description": "the source of the scroll event. limited to values from uiGridConstants.scrollEventSources",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9380,
            "ngdoc": "object",
            "name": "noDelay",
            "propertyof": "ui.grid.class:ScrollEvent",
            "description": "most scroll events from the mouse or trackpad require delay to operate properly\nset to false to eliminate delay.  Useful for scroll events that the grid causes, such as scrolling to make a row visible.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9401,
            "ngdoc": "function",
            "name": "fireThrottledScrollingEvent",
            "methodof": "ui.grid.class:ScrollEvent",
            "description": "fires a throttled event using grid.api.core.raise.scrollEvent",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9414,
            "ngdoc": "function",
            "name": "getNewScrollLeft",
            "methodof": "ui.grid.class:ScrollEvent",
            "description": "returns newScrollLeft property if available; calculates a new value if it isn't",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9446,
            "ngdoc": "function",
            "name": "getNewScrollTop",
            "methodof": "ui.grid.class:ScrollEvent",
            "description": "returns newScrollTop property if available; calculates a new value if it isn't",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9511,
            "ngdoc": "object",
            "name": "ui.grid.service:gridClassFactory",
            "description": "factory to return dom specific instances of a grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9522,
            "ngdoc": "method",
            "name": "createGrid",
            "methodof": "ui.grid.service:gridClassFactory",
            "description": "Creates a new grid instance. Each instance will have a unique id",
            "params": [
                {
                    "name": "options",
                    "description": "An object map of options to pass into the created grid instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "grid",
                "type": "Grid"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9587,
            "ngdoc": "function",
            "name": "defaultColumnBuilder",
            "methodof": "ui.grid.service:gridClassFactory",
            "description": "Processes designTime column definitions and applies them to col for the\n             core grid features",
            "params": [
                {
                    "name": "colDef",
                    "description": "reference to column definition",
                    "type": "Object"
                },
                {
                    "name": "col",
                    "description": "reference to gridCol",
                    "type": "GridColumn"
                },
                {
                    "name": "gridOptions",
                    "description": "reference to grid options",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9638,
            "ngdoc": "property",
            "name": "cellTemplate",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "a custom template for each cell in this column.  The default\nis ui-grid/uiGridCell.  If you are using the cellNav feature, this template\nmust contain a div that can receive focus.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9649,
            "ngdoc": "property",
            "name": "headerCellTemplate",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "a custom template for the header for this column.  The default\nis ui-grid/uiGridHeaderCell",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9659,
            "ngdoc": "property",
            "name": "footerCellTemplate",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "a custom template for the footer for this column.  The default\nis ui-grid/uiGridFooterCell",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9669,
            "ngdoc": "property",
            "name": "filterHeaderTemplate",
            "propertyof": "ui.grid.class:GridOptions.columnDef",
            "description": "a custom template for the filter input.  The default is ui-grid/ui-grid-filter",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9736,
            "ngdoc": "service",
            "name": "ui.grid.service:rowSearcher",
            "description": "Service for searching/filtering rows based on column value conditions.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9747,
            "ngdoc": "function",
            "name": "getTerm",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "Get the term from a filter\nTrims leading and trailing whitespace",
            "params": [
                {
                    "name": "filter",
                    "description": "object to use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Parsed term",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9769,
            "ngdoc": "function",
            "name": "stripTerm",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "Remove leading and trailing asterisk (*) from the filter's term",
            "params": [
                {
                    "name": "filter",
                    "description": "object to use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Value representing the condition constant value",
                "type": "uiGridConstants.filter<int>"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9789,
            "ngdoc": "function",
            "name": "guessCondition",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "Guess the condition for a filter based on its term\n<br>\nDefaults to STARTS_WITH. Uses CONTAINS for strings beginning and ending with *s (*bob*).\nUses STARTS_WITH for strings ending with * (bo*). Uses ENDS_WITH for strings starting with * (*ob).",
            "params": [
                {
                    "name": "filter",
                    "description": "object to use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Value representing the condition constant value",
                "type": "uiGridConstants.filter<int>"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9823,
            "ngdoc": "function",
            "name": "setupFilters",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "For a given columns filters (either col.filters, or [col.filter] can be passed in),\ndo all the parsing and pre-processing and store that data into a new filters object.  The object\nhas the condition, the flags, the stripped term, and a parsed reg exp if there was one.\n\nWe could use a forEach in here, since it's much less performance sensitive, but since we're using \nfor loops everywhere else in this module...",
            "params": [
                {
                    "name": "filters",
                    "description": "the filters from the column (col.filters or [col.filter])",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of parsed/preprocessed filters",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9893,
            "ngdoc": "function",
            "name": "runColumnFilter",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "Runs a single pre-parsed filter against a cell, returning true\nif the cell matches that one filter.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're working against",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we're matching against",
                    "type": "GridRow"
                },
                {
                    "name": "column",
                    "description": "the column that we're working against",
                    "type": "GridCol"
                },
                {
                    "name": "filter",
                    "description": "the specific, preparsed, filter that we want to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if we match (row stays visible)",
                "type": "Boolean"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9989,
            "ngdoc": "boolean",
            "name": "useExternalFiltering",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "False by default. When enabled, this setting suppresses the internal filtering.\nAll UI logic will still operate, allowing filter conditions to be set and modified.\n\nThe external filter logic can listen for the `filterChange` event, which fires whenever\na filter has been adjusted.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 9999,
            "ngdoc": "function",
            "name": "searchColumn",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "Process provided filters on provided column against a given row. If the row meets \nthe conditions on all the filters, return true.",
            "params": [
                {
                    "name": "grid",
                    "description": "Grid to search in",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "Row to search on",
                    "type": "GridRow"
                },
                {
                    "name": "column",
                    "description": "Column with the filters to use",
                    "type": "GridCol"
                },
                {
                    "name": "filters",
                    "description": "array of pre-parsed/preprocessed filters to apply",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Whether the column matches or not.",
                "type": "Boolean"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10032,
            "ngdoc": "function",
            "name": "search",
            "methodof": "ui.grid.service:rowSearcher",
            "description": "Run a search across the given rows and columns, marking any rows that don't \nmatch the stored col.filters or col.filter as invisible.",
            "params": [
                {
                    "name": "grid",
                    "description": "Grid instance to search inside",
                    "type": "Grid"
                },
                {
                    "name": "rows",
                    "description": "GridRows to filter",
                    "type": "Array[GridRow]"
                },
                {
                    "name": "columns",
                    "description": "GridColumns with filters to process",
                    "type": "Array[GridColumn]"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10127,
            "ngdoc": "object",
            "name": "ui.grid.class:rowSorter",
            "description": "rowSorter provides the default sorting mechanisms,\nincluding guessing column types and applying appropriate sort\nalgorithms",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10155,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "guessSortFn",
            "description": "Assigns a sort function to use based on the itemType in the column",
            "params": [
                {
                    "name": "itemType",
                    "description": "one of 'number', 'boolean', 'string', 'date', 'object'.  And\nerror will be thrown for any other type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a sort function that will sort that type",
                "type": "Function"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10184,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "handleNulls",
            "description": "Sorts nulls and undefined to the bottom (top when\ndescending).  Called by each of the internal sorters before\nattempting to sort.  Note that this method is available on the core api\nvia gridApi.core.sortHandleNulls",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "null if there were no nulls/undefineds, otherwise returns\na sort value that should be passed back from the sort function",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10215,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "basicSort",
            "description": "Sorts any values that provide the < method, including strings\nor numbers.  Handles nulls and undefined through calling handleNulls",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10241,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "sortNumber",
            "description": "Sorts numerical values.  Handles nulls and undefined through calling handleNulls",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10260,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "sortNumberStr",
            "description": "Sorts numerical values that are stored in a string (i.e. parses them to numbers first).\nHandles nulls and undefined through calling handleNulls",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10314,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "sortAlpha",
            "description": "Sorts string values. Handles nulls and undefined through calling handleNulls",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10336,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "sortDate",
            "description": "Sorts date values. Handles nulls and undefined through calling handleNulls.\nHandles date strings by converting to Date object if not already an instance of Date",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10365,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "sortBool",
            "description": "Sorts boolean values, true is considered larger than false.\nHandles nulls and undefined through calling handleNulls",
            "params": [
                {
                    "name": "a",
                    "description": "sort value a",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "sort value b",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10394,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "getSortFn",
            "description": "Get the sort function for the column.  Looks first in\nrowSorter.colSortFnCache using the column name, failing that it\nlooks at col.sortingAlgorithm (and puts it in the cache), failing that\nit guesses the sort algorithm based on the data type.\n\nThe cache currently seems a bit pointless, as none of the work we do is\nprocessor intensive enough to need caching.  Presumably in future we might\ninspect the row data itself to guess the sort function, and in that case\nit would make sense to have a cache, the infrastructure is in place to allow\nthat.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid to consider",
                    "type": "Grid"
                },
                {
                    "name": "col",
                    "description": "the column to find a function for",
                    "type": "GridCol"
                },
                {
                    "name": "rows",
                    "description": "an array of grid rows.  Currently unused, but presumably in future\nwe might inspect the rows themselves to decide what sort of data might be there",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the sort function chosen for the column",
                "type": "Function"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10454,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "prioritySort",
            "description": "Used where multiple columns are present in the sort criteria,\nwe determine which column should take precedence in the sort by sorting\nthe columns based on their sort.priority",
            "params": [
                {
                    "name": "a",
                    "description": "column a",
                    "type": "GridColumn"
                },
                {
                    "name": "b",
                    "description": "column b",
                    "type": "GridColumn"
                }
            ],
            "return": {
                "description": "normal sort function, returns -ve, 0, +ve",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10497,
            "ngdoc": "object",
            "name": "useExternalSorting",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Prevents the internal sorting from executing.  Events will\nstill be fired when the sort changes, and the sort information on\nthe columns will be updated, allowing an external sorter (for example,\nserver sorting) to be implemented.  Defaults to false.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10507,
            "ngdoc": "method",
            "methodof": "ui.grid.class:rowSorter",
            "name": "sort",
            "description": "sorts the grid",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid itself",
                    "type": "Object"
                },
                {
                    "name": "rows",
                    "description": "the rows to be sorted",
                    "type": "Array"
                },
                {
                    "name": "columns",
                    "description": "the columns in which to look\nfor sort criteria",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "sorted rows",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10793,
            "ngdoc": "service",
            "name": "ui.grid.service:GridUtil",
            "description": "Grid utility functions",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10807,
            "ngdoc": "method",
            "name": "createBoundedWrapper",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "Object",
                    "description": "to bind 'this' to",
                    "type": "Object"
                },
                {
                    "name": "Method",
                    "description": "to bind",
                    "type": "Method"
                }
            ],
            "return": {
                "description": "The wrapper that performs the binding",
                "type": "Function"
            },
            "description": "Binds given method to given object.\n\nBy means of a wrapper, ensures that ``method`` is always bound to\n``object`` regardless of its calling environment.\nIow, inside ``method``, ``this`` always points to ``object``.\n\nSee http://alistapart.com/article/getoutbindingsituations",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10833,
            "ngdoc": "method",
            "name": "readableColumnName",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "columnName",
                    "description": "Column name as a string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Column name appropriately capitalized and split apart",
                "type": "String"
            },
            "example": [
                "\n      <example module=\"app\">\n       <file name=\"app.js\">\n         var app = angular.module('app', ['ui.grid']);\n\n         app.controller('MainCtrl', ['$scope', 'gridUtil', function ($scope, gridUtil) {\n           $scope.name = 'firstName';\n           $scope.columnName = function(name) {\n             return gridUtil.readableColumnName(name);\n           };\n         }]);\n       </file>\n       <file name=\"index.html\">\n         <div ng-controller=\"MainCtrl\">\n           <strong>Column name:</strong> <input ng-model=\"name\" />\n           <br>\n           <strong>Output:</strong> <span ng-bind=\"columnName(name)\"></span>\n         </div>\n       </file>\n     </example>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10885,
            "ngdoc": "method",
            "name": "getColumnsFromData",
            "methodof": "ui.grid.service:GridUtil",
            "description": "Return a list of column names, given a data set",
            "params": [
                {
                    "name": "data",
                    "description": "Data array for grid",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Column definitions with field accessor and column name",
                "type": "Object"
            },
            "example": [
                "\n      <pre>\n        var data = [\n          { firstName: 'Bob', lastName: 'Jones' },\n          { firstName: 'Frank', lastName: 'Smith' }\n        ];\n\n        var columnDefs = GridUtil.getColumnsFromData(data, excludeProperties);\n\n        columnDefs == [\n         {\n           field: 'firstName',\n           name: 'First Name'\n         },\n         {\n           field: 'lastName',\n           name: 'Last Name'\n         }\n        ];\n      </pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10934,
            "ngdoc": "method",
            "name": "newId",
            "methodof": "ui.grid.service:GridUtil",
            "description": "Return a unique ID string",
            "return": {
                "description": "Unique string",
                "type": "String"
            },
            "example": [
                "\n      <pre>\n       var id = GridUtil.newId();\n\n       # 1387305700482;\n      </pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 10957,
            "ngdoc": "method",
            "name": "getTemplate",
            "methodof": "ui.grid.service:GridUtil",
            "description": "Get's template from cache / element / url",
            "params": [
                {
                    "name": "Either",
                    "description": "a string representing the template id, a string representing the template url,\n  an jQuery/Angualr element, or a promise that returns the template contents to use.",
                    "type": "String|element|promise"
                }
            ],
            "return": {
                "description": "a promise resolving to template contents",
                "type": "Object"
            },
            "example": [
                "\n    <pre>\n    GridUtil.getTemplate(url).then(function (contents) {\n         alert(contents);\n       })\n    </pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11027,
            "ngdoc": "method",
            "name": "guessType",
            "methodof": "ui.grid.service:GridUtil",
            "description": "guesses the type of an argument",
            "params": [
                {
                    "name": "item",
                    "description": "variable to examine",
                    "type": "String/number/bool/object"
                }
            ],
            "return": {
                "description": "one of the following\n- 'string'\n- 'boolean'\n- 'number'\n- 'date'\n- 'object'",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11059,
            "ngdoc": "method",
            "name": "elementWidth",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Element"
                },
                {
                    "name": "extra",
                    "description": "Optional modifier for calculation. Use 'margin' to account for margins on element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Element width in pixels, accounting for any borders, etc.",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11073,
            "ngdoc": "method",
            "name": "elementHeight",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Element"
                },
                {
                    "name": "extra",
                    "description": "Optional modifier for calculation. Use 'margin' to account for margins on element",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Element height in pixels, accounting for any borders, etc.",
                "type": "Number"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11150,
            "ngdoc": "method",
            "name": "normalizeWheelEvent",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "event",
                    "description": "A mouse wheel event",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "A normalized event",
                "type": "Event"
            },
            "description": "Given an event from this list:\n\n`wheel, mousewheel, DomMouseScroll, MozMousePixelScroll`\n\n\"normalize\" it\nso that it stays consistent no matter what browser it comes from (i.e. scale it correctly and make sure the direction is right.)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11365,
            "ngdoc": "method",
            "methodof": "ui.grid.service:GridUtil",
            "name": "logError",
            "description": "wraps the $log method, allowing us to choose different\ntreatment within ui-grid if we so desired.  At present we only log\nerror messages if uiGridConstants.LOG_ERROR_MESSAGES is set to true",
            "params": [
                {
                    "name": "logMessage",
                    "description": "message to be logged to the console",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11381,
            "ngdoc": "method",
            "methodof": "ui.grid.service:GridUtil",
            "name": "logWarn",
            "description": "wraps the $log method, allowing us to choose different\ntreatment within ui-grid if we so desired.  At present we only log\nwarning messages if uiGridConstants.LOG_WARN_MESSAGES is set to true",
            "params": [
                {
                    "name": "logMessage",
                    "description": "message to be logged to the console",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11397,
            "ngdoc": "method",
            "methodof": "ui.grid.service:GridUtil",
            "name": "logDebug",
            "description": "wraps the $log method, allowing us to choose different\ntreatment within ui-grid if we so desired.  At present we only log\ndebug messages if uiGridConstants.LOG_DEBUG_MESSAGES is set to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11414,
            "ngdoc": "object",
            "name": "focus",
            "propertyof": "ui.grid.service:GridUtil",
            "description": "Provies a set of methods to set the document focus inside the grid.\nSee {@link ui.grid.service:GridUtil.focus} for more information.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11422,
            "ngdoc": "object",
            "name": "ui.grid.service:GridUtil.focus",
            "description": "Provies a set of methods to set the document focus inside the grid.\nTimeouts are utilized to ensure that the focus is invoked after any other event has been triggered.\ne.g. click events that need to run before the focus or\ninputs elements that are in a disabled state but are enabled when those events\nare triggered.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11434,
            "ngdoc": "method",
            "methodof": "ui.grid.service:GridUtil.focus",
            "name": "byId",
            "description": "Sets the focus of the document to the given id value.\nIf provided with the grid object it will automatically append the grid id.\nThis is done to encourage unique dom id's as it allows for multiple grids on a\npage.",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the dom element to set the focus on",
                    "type": "String"
                },
                {
                    "name": "Grid",
                    "description": "the grid object for this grid instance. See: {@link ui.grid.class:Grid}",
                    "type": "Object=",
                    "props": [
                        {
                            "name": "id",
                            "description": "the unique id for this grid. Already set on an initialized grid object.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.\nthen the promise will fail with the `'canceled'` reason.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11463,
            "ngdoc": "method",
            "methodof": "ui.grid.service:GridUtil.focus",
            "name": "byElement",
            "description": "Sets the focus of the document to the given dom element.",
            "params": [
                {
                    "name": "element",
                    "description": "the DOM element to set the focus on",
                    "type": "(element|angular.element)"
                }
            ],
            "return": {
                "description": "The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.\nthen the promise will fail with the `'canceled'` reason.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11487,
            "ngdoc": "method",
            "methodof": "ui.grid.service:GridUtil.focus",
            "name": "bySelector",
            "description": "Sets the focus of the document to the given dom element.",
            "params": [
                {
                    "name": "parentElement",
                    "description": "the parent/ancestor of the dom element that you are selecting using the query selector",
                    "type": "(element|angular.element)"
                },
                {
                    "name": "querySelector",
                    "description": "finds the dom element using the {@link http://www.w3schools.com/jsref/met_document_queryselector.asp querySelector}",
                    "type": "String"
                },
                {
                    "name": "aSync",
                    "description": "If true then the selector will be querried inside of a timeout. Otherwise the selector will be querried imidately\nthen the focus will be called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.\nthen the promise will fail with the `'canceled'` reason.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11661,
            "ngdoc": "method",
            "name": "normalizeScrollLeft",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "element",
                    "description": "The element to get the `scrollLeft` from.",
                    "type": "Element"
                },
                {
                    "name": "grid",
                    "description": "-  grid used to normalize (uses the rtl property)",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "A normalized scrollLeft value for the current browser.",
                "type": "Number"
            },
            "description": "Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method normalizes them",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11695,
            "ngdoc": "method",
            "name": "denormalizeScrollLeft",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "element",
                    "description": "The element to normalize the `scrollLeft` value for",
                    "type": "Element"
                },
                {
                    "name": "scrollLeft",
                    "description": "The `scrollLeft` value to denormalize.",
                    "type": "Number"
                },
                {
                    "name": "grid",
                    "description": "The grid that owns the scroll event.",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "A normalized scrollLeft value for the current browser.",
                "type": "Number"
            },
            "description": "Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method denormalizes a value for the current browser.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11732,
            "ngdoc": "method",
            "name": "preEval",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "path",
                    "description": "Path to evaluate",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A path that is normalized.",
                "type": "String"
            },
            "description": "Takes a field path and converts it to bracket notation to allow for special characters in path",
            "example": [
                "\n<pre>\ngridUtil.preEval('property') == 'property'\ngridUtil.preEval('nested.deep.prop-erty') = \"nested['deep']['prop-erty']\"\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11764,
            "ngdoc": "method",
            "name": "debounce",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "func",
                    "description": "function to debounce",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "milliseconds to delay",
                    "type": "Number"
                },
                {
                    "name": "immediate",
                    "description": "execute before delay",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A function that can be executed as debounced function",
                "type": "Function"
            },
            "description": "Copied from https://github.com/shahata/angular-debounce\nTakes a function, decorates it to execute only 1 time after multiple calls, and returns the decorated function",
            "example": [
                "\n<pre>\nvar debouncedFunc =  gridUtil.debounce(function(){alert('debounced');}, 500);\ndebouncedFunc();\ndebouncedFunc();\ndebouncedFunc();\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 11815,
            "ngdoc": "method",
            "name": "throttle",
            "methodof": "ui.grid.service:GridUtil",
            "params": [
                {
                    "name": "func",
                    "description": "function to throttle",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "milliseconds to delay after first trigger",
                    "type": "Number"
                },
                {
                    "name": "params",
                    "description": "to use in throttle.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A function that can be executed as throttled function",
                "type": "Function"
            },
            "description": "Adapted from debounce function (above)\nPotential keys for Params Object are:\n   trailing (bool) - whether to trigger after throttle time ends if called multiple times\nUpdated to use $interval rather than $timeout, as protractor (e2e tests) is able to work with $interval,\nbut not with $timeout\n\nNote that when using throttle, you need to use throttle to create a new function upfront, then use the function\nreturn from that call each time you need to call throttle.  If you call throttle itself repeatedly, the lastCall\nvariable will get overwritten and the throttling won't work",
            "example": [
                "\n<pre>\nvar throttledFunc =  gridUtil.throttle(function(){console.log('throttled');}, 500, {trailing: true});\nthrottledFunc(); //=> logs throttled\nthrottledFunc(); //=> queues attempt to log throttled for ~500ms (since trailing param is truthy)\nthrottledFunc(); //=> updates arguments to keep most-recent request, but does not do anything else.\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 12672,
            "description": "Translated by: R. Salarmehr\n               M. Hosseynzade\n               Using Vajje.com online dictionary.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14654,
            "ngdoc": "overview",
            "name": "ui.grid.i18n",
            "description": "# ui.grid.i18n\nThis module provides i18n functions to ui.grid and any application that wants to use it\n\n\n<div doc-module-components=\"ui.grid.i18n\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14673,
            "ngdoc": "object",
            "name": "ui.grid.i18n.constant:i18nConstants",
            "description": "constants available in i18n module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14691,
            "ngdoc": "service",
            "name": "ui.grid.i18n.service:i18nService",
            "description": "Services for i18n",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14735,
            "ngdoc": "service",
            "name": "add",
            "methodof": "ui.grid.i18n.service:i18nService",
            "description": "Adds the languages and strings to the cache. Decorate this service to\nadd more translation strings",
            "params": [
                {
                    "name": "lang",
                    "description": "language to add",
                    "type": "String"
                },
                {
                    "name": "stringMaps",
                    "description": "of strings to add grouped by property names",
                    "type": "Object"
                }
            ],
            "example": [
                "\n<pre>\n     i18nService.add('en', {\n        aggregate: {\n                label1: 'items',\n                label2: 'some more items'\n                }\n        },\n        groupPanel: {\n             description: 'Drag a column header here and drop it to group by that column.'\n          }\n     }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14769,
            "ngdoc": "service",
            "name": "getAllLangs",
            "methodof": "ui.grid.i18n.service:i18nService",
            "description": "return all currently loaded languages",
            "return": {
                "description": "string",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14780,
            "ngdoc": "service",
            "name": "get",
            "methodof": "ui.grid.i18n.service:i18nService",
            "description": "return all currently loaded languages",
            "params": [
                {
                    "name": "lang",
                    "description": "to return.  If not specified, returns current language",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the translation string maps for the language",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14793,
            "ngdoc": "service",
            "name": "getSafeText",
            "methodof": "ui.grid.i18n.service:i18nService",
            "description": "returns the text specified in the path or a Missing text if text is not found",
            "params": [
                {
                    "name": "path",
                    "description": "property path to use for retrieving text from string map",
                    "type": "String"
                },
                {
                    "name": "lang",
                    "description": "to return.  If not specified, returns current language",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the translation for the path",
                "type": "Object"
            },
            "example": [
                "\n<pre>\ni18nService.getSafeText('sort.ascending')\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14829,
            "ngdoc": "service",
            "name": "setCurrentLang",
            "methodof": "ui.grid.i18n.service:i18nService",
            "description": "sets the current language to use in the application\n$broadcasts the i18nConstants.UPDATE_EVENT on the $rootScope",
            "params": [
                {
                    "name": "lang",
                    "description": "to set",
                    "type": "String"
                }
            ],
            "example": [
                "\n<pre>\ni18nService.setCurrentLang('fr');\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 14849,
            "ngdoc": "service",
            "name": "getCurrentLang",
            "methodof": "ui.grid.i18n.service:i18nService",
            "description": "returns the current language used in the application",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15133,
            "ngdoc": "overview",
            "name": "ui.grid.autoResize",
            "description": "#ui.grid.autoResize\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides auto-resizing functionality to UI-Grid.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15179,
            "ngdoc": "overview",
            "name": "ui.grid.cellNav",
            "description": "#ui.grid.cellNav\n\n    <div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\n    This module provides cell navigation functionality to UI-Grid.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15193,
            "ngdoc": "object",
            "name": "ui.grid.cellNav.constant:uiGridCellNavConstants",
            "description": "constants available in cellNav",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15213,
            "ngdoc": "object",
            "name": "ui.grid.cellNav.object:CellNav",
            "description": "returns a CellNav prototype function",
            "params": [
                {
                    "name": "rowContainer",
                    "description": "container for rows",
                    "type": "Object"
                },
                {
                    "name": "colContainer",
                    "description": "parent column container",
                    "type": "Object"
                },
                {
                    "name": "leftColContainer",
                    "description": "column container to the left of parent",
                    "type": "Object"
                },
                {
                    "name": "rightColContainer",
                    "description": "column container to the right of parent",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15230,
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15239,
            "ngdoc": "object",
            "name": "ui.grid.cellNav.api:GridRow",
            "description": "GridRow settings for cellNav feature, these are available to be\nset only internally (for example, by other features)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15247,
            "ngdoc": "object",
            "name": "allowCellFocus",
            "propertyof": "ui.grid.cellNav.api:GridRow",
            "description": "Enable focus on a cell within this row.  If set to false then no cells\nin this row can be focused - group header rows as an example would set this to false.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15255,
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15436,
            "ngdoc": "service",
            "name": "ui.grid.cellNav.service:uiGridCellNavService",
            "description": "Services for cell navigation features. If you don't like the key maps we use,\nor the direction cells navigation, override with a service decorator (see angular docs)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15452,
            "ngdoc": "object",
            "name": "ui.grid.cellNav:Grid.cellNav",
            "description": "cellNav properties added to grid class",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15463,
            "ngdoc": "object",
            "name": "ui.grid.cellNav.api:PublicApi",
            "description": "Public Api for cellNav feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15472,
            "ngdoc": "event",
            "name": "navigate",
            "eventof": "ui.grid.cellNav.api:PublicApi",
            "description": "raised when the active cell is changed\n<pre>\n     gridApi.cellNav.on.navigate(scope,function(newRowcol, oldRowCol){})\n</pre>",
            "params": [
                {
                    "name": "newRowCol",
                    "description": "new position",
                    "type": "Object"
                },
                {
                    "name": "oldRowCol",
                    "description": "old position",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15484,
            "ngdoc": "event",
            "name": "viewPortKeyDown",
            "eventof": "ui.grid.cellNav.api:PublicApi",
            "description": "is raised when the viewPort receives a keyDown event. Cells never get focus in uiGrid\ndue to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this\nevent whenever you need a keydown event on a cell\n<br/>",
            "params": [
                {
                    "name": "event",
                    "description": "keydown event",
                    "type": "Object"
                },
                {
                    "name": "rowCol",
                    "description": "current rowCol position",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15497,
            "ngdoc": "event",
            "name": "viewPortKeyPress",
            "eventof": "ui.grid.cellNav.api:PublicApi",
            "description": "is raised when the viewPort receives a keyPress event. Cells never get focus in uiGrid\ndue to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this\nevent whenever you need a keypress event on a cell\n<br/>",
            "params": [
                {
                    "name": "event",
                    "description": "keypress event",
                    "type": "Object"
                },
                {
                    "name": "rowCol",
                    "description": "current rowCol position",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15513,
            "ngdoc": "function",
            "name": "scrollToFocus",
            "methodof": "ui.grid.cellNav.api:PublicApi",
            "description": "brings the specified row and column into view, and sets focus\nto that cell",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance to make visible and set focus",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "to make visible and set focus",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that is resolved after any scrolling is finished",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15527,
            "ngdoc": "function",
            "name": "getFocusedCell",
            "methodof": "ui.grid.cellNav.api:PublicApi",
            "description": "returns the current (or last if Grid does not have focus) focused row and column\n<br> value is null if no selection has occurred",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15538,
            "ngdoc": "function",
            "name": "getCurrentSelection",
            "methodof": "ui.grid.cellNav.api:PublicApi",
            "description": "returns an array containing the current selection\n<br> array is empty if no selection has occurred",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15549,
            "ngdoc": "function",
            "name": "rowColSelectIndex",
            "methodof": "ui.grid.cellNav.api:PublicApi",
            "description": "returns the index in the order in which the GridRowColumn was selected, returns -1 if the GridRowColumn\nisn't selected",
            "params": [
                {
                    "name": "rowCol",
                    "description": "the rowCol to evaluate",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15580,
            "ngdoc": "object",
            "name": "ui.grid.cellNav.api:GridOptions",
            "description": "GridOptions for cellNav feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15588,
            "ngdoc": "object",
            "name": "modifierKeysToMultiSelectCells",
            "propertyof": "ui.grid.cellNav.api:GridOptions",
            "description": "Enable multiple cell selection only when using the ctrlKey or shiftKey.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15597,
            "ngdoc": "array",
            "name": "keyDownOverrides",
            "propertyof": "ui.grid.cellNav.api:GridOptions",
            "description": "An array of event objects to override on keydown. If an event is overridden, the viewPortKeyDown event will\n             be raised with the overridden events, allowing custom keydown behavior.\n<br/>Defaults to []",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15609,
            "ngdoc": "service",
            "name": "decorateRenderContainers",
            "methodof": "ui.grid.cellNav.service:uiGridCellNavService",
            "description": "decorates grid renderContainers with cellNav functions",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15630,
            "ngdoc": "service",
            "name": "getDirection",
            "methodof": "ui.grid.cellNav.service:uiGridCellNavService",
            "description": "determines which direction to for a given keyDown event",
            "return": {
                "description": "direction",
                "type": "uiGridCellNavConstants.direction"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15668,
            "ngdoc": "service",
            "name": "cellNavColumnBuilder",
            "methodof": "ui.grid.cellNav.service:uiGridCellNavService",
            "description": "columnBuilder function that adds cell navigation properties to grid column",
            "return": {
                "description": "promise that will load any needed templates when resolved",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15678,
            "ngdoc": "object",
            "name": "ui.grid.cellNav.api:ColumnDef",
            "description": "Column Definitions for cellNav feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15686,
            "ngdoc": "object",
            "name": "allowCellFocus",
            "propertyof": "ui.grid.cellNav.api:ColumnDef",
            "description": "Enable focus on a cell within this column.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15698,
            "ngdoc": "method",
            "methodof": "ui.grid.cellNav.service:uiGridCellNavService",
            "name": "scrollToFocus",
            "description": "Scroll the grid such that the specified\nrow and column is in view, and set focus to the cell in that row and column",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid you'd like to act upon, usually available\nfrom gridApi.grid",
                    "type": "Grid"
                },
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance to make visible and set focus to",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "to make visible and set focus to",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that is resolved after any scrolling is finished",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 15734,
            "ngdoc": "method",
            "methodof": "ui.grid.cellNav.service:uiGridCellNavService",
            "name": "getLeftWidth",
            "description": "Get the current drawn width of the columns in the\ngrid up to the numbered column, and add an apportionment for the\ncolumn that we're on.  So if we are on column 0, we want to scroll\n0% (i.e. exclude this column from calc).  If we're on the last column\nwe want to scroll to 100% (i.e. include this column in the calc). So\nwe include (thisColIndex / totalNumberCols) % of this column width",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid you'd like to act upon, usually available\nfrom gridApi.grid",
                    "type": "Grid"
                },
                {
                    "name": "upToCol",
                    "description": "the column to total up to and including",
                    "type": "GridCol"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16369,
            "ngdoc": "overview",
            "name": "ui.grid.edit",
            "description": "# ui.grid.edit\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides cell editing capability to ui.grid. The goal was to emulate keying data in a spreadsheet via\na keyboard.\n<br/>\n<br/>\nTo really get the full spreadsheet-like data entry, the ui.grid.cellNav module should be used. This will allow the\nuser to key data and then tab, arrow, or enter to the cells beside or below.\n\n<div doc-module-components=\"ui.grid.edit\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16390,
            "ngdoc": "object",
            "name": "ui.grid.edit.constant:uiGridEditConstants",
            "description": "constants available in edit module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16407,
            "ngdoc": "service",
            "name": "ui.grid.edit.service:uiGridEditService",
            "description": "Services for editing features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16425,
            "ngdoc": "object",
            "name": "ui.grid.edit.api:PublicApi",
            "description": "Public Api for edit feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16434,
            "ngdoc": "event",
            "name": "afterCellEdit",
            "eventof": "ui.grid.edit.api:PublicApi",
            "description": "raised when cell editing is complete\n<pre>\n     gridApi.edit.on.afterCellEdit(scope,function(rowEntity, colDef){})\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the options.data element that was edited",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column that was edited",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "new value",
                    "type": "Object"
                },
                {
                    "name": "oldValue",
                    "description": "old value",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16449,
            "ngdoc": "event",
            "name": "beginCellEdit",
            "eventof": "ui.grid.edit.api:PublicApi",
            "description": "raised when cell editing starts on a cell\n<pre>\n     gridApi.edit.on.beginCellEdit(scope,function(rowEntity, colDef){})\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the options.data element that was edited",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column that was edited",
                    "type": "Object"
                },
                {
                    "name": "triggerEvent",
                    "description": "the event that triggered the edit.  Useful to prevent losing keystrokes on some\n                complex editors",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16464,
            "ngdoc": "event",
            "name": "cancelCellEdit",
            "eventof": "ui.grid.edit.api:PublicApi",
            "description": "raised when cell editing is cancelled on a cell\n<pre>\n     gridApi.edit.on.cancelCellEdit(scope,function(rowEntity, colDef){})\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the options.data element that was edited",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column that was edited",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16491,
            "ngdoc": "object",
            "name": "ui.grid.edit.api:GridOptions",
            "description": "Options for configuring the edit feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16499,
            "ngdoc": "object",
            "name": "enableCellEdit",
            "propertyof": "ui.grid.edit.api:GridOptions",
            "description": "If defined, sets the default value for the editable flag on each individual colDefs\nif their individual enableCellEdit configuration is not defined. Defaults to undefined.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16507,
            "ngdoc": "object",
            "name": "cellEditableCondition",
            "propertyof": "ui.grid.edit.api:GridOptions",
            "description": "If specified, either a value or function to be used by all columns before editing.\nIf false, then editing of cell is not allowed.",
            "example": [
                "\n<pre>\nfunction($scope, triggerEvent){\n  //use $scope.row.entity, $scope.col.colDef and triggerEvent to determine if editing is allowed\n  return true;\n}\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16523,
            "ngdoc": "object",
            "name": "editableCellTemplate",
            "propertyof": "ui.grid.edit.api:GridOptions",
            "description": "If specified, cellTemplate to use as the editor for all columns.\n<br/> defaults to 'ui-grid/cellTextEditor'",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16531,
            "ngdoc": "object",
            "name": "enableCellEditOnFocus",
            "propertyof": "ui.grid.edit.api:GridOptions",
            "description": "If true, then editor is invoked as soon as cell receives focus. Default false.\n<br/>_requires cellNav feature and the edit feature to be enabled_",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16542,
            "ngdoc": "service",
            "name": "editColumnBuilder",
            "methodof": "ui.grid.edit.service:uiGridEditService",
            "description": "columnBuilder function that adds edit properties to grid column",
            "return": {
                "description": "promise that will load any needed templates when resolved",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16553,
            "ngdoc": "object",
            "name": "ui.grid.edit.api:ColumnDef",
            "description": "Column Definition for edit feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16561,
            "ngdoc": "object",
            "name": "enableCellEdit",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "enable editing on column",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16570,
            "ngdoc": "object",
            "name": "cellEditableCondition",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "If specified, either a value or function evaluated before editing cell.  If falsy, then editing of cell is not allowed.",
            "example": [
                "\n<pre>\nfunction($scope, triggerEvent){\n  //use $scope.row.entity, $scope.col.colDef and triggerEvent to determine if editing is allowed\n  return true;\n}\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16585,
            "ngdoc": "object",
            "name": "editableCellTemplate",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "cell template to be used when editing this column. Can be Url or text template\n<br/>Defaults to gridOptions.editableCellTemplate",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16606,
            "ngdoc": "object",
            "name": "enableCellEditOnFocus",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "requires": [
                "ui.grid.cellNav"
            ],
            "description": "If true, then editor is invoked as soon as cell receives focus. Default false.\n<br>_requires both the cellNav feature and the edit feature to be enabled_",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16618,
            "ngdoc": "string",
            "name": "editModelField",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "a bindable string value that is used when binding to edit controls instead of colDef.field\n<br/> example: You have a complex property on and object like state:{abbrev:'MS',name:'Mississippi'}.  The\ngrid should display state.name in the cell and sort/filter based on the state.name property but the editor\nrequires the full state object.\n<br/>colDef.field = 'state.name'\n<br/>colDef.editModelField = 'state'",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16634,
            "ngdoc": "service",
            "name": "isStartEditKey",
            "methodof": "ui.grid.edit.service:uiGridEditService",
            "description": "Determines if a keypress should start editing.  Decorate this service to override with your\nown key events.  See service decorator in angular docs.",
            "params": [
                {
                    "name": "evt",
                    "description": "keydown event",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "true if an edit should start",
                "type": "Boolean"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16809,
            "ngdoc": "object",
            "name": "ui.grid.edit.api:GridRow",
            "description": "GridRow options for edit feature, these are available to be\nset internally only, by other features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16817,
            "ngdoc": "object",
            "name": "enableCellEdit",
            "propertyof": "ui.grid.edit.api:GridRow",
            "description": "enable editing on row, grouping for example might disable editing on group header rows",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16974,
            "ngdoc": "property",
            "name": "editDropdownOptionsArray",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "an array of values in the format\n[ {id: xxx, value: xxx} ], which is populated\ninto the edit dropdown",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 16983,
            "ngdoc": "property",
            "name": "editDropdownIdLabel",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "the label for the \"id\" field\nin the editDropdownOptionsArray.  Defaults\nto 'id'",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    columnDefs: [\n      {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',\n        editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],\n        editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }\n    ],\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17001,
            "ngdoc": "property",
            "name": "editDropdownRowEntityOptionsArrayPath",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "a path to a property on row.entity containing an\narray of values in the format\n[ {id: xxx, value: xxx} ], which will be used to populate\nthe edit dropdown.  This can be used when the dropdown values are dependent on\nthe backing row entity.\nIf this property is set then editDropdownOptionsArray will be ignored.",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    columnDefs: [\n      {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',\n        editDropdownRowEntityOptionsArrayPath: 'foo.bars[0].baz',\n        editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }\n    ],\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17022,
            "ngdoc": "service",
            "name": "editDropdownOptionsFunction",
            "methodof": "ui.grid.edit.api:ColumnDef",
            "description": "a function returning an array of values in the format\n[ {id: xxx, value: xxx} ], which will be used to populate\nthe edit dropdown.  This can be used when the dropdown values are dependent on\nthe backing row entity with some kind of algorithm.\nIf this property is set then both editDropdownOptionsArray and\neditDropdownRowEntityOptionsArrayPath will be ignored.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the options.data element that the returned array refers to",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column that implements this dropdown",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an array of values in the format\n[ {id: xxx, value: xxx} ] used to populate the edit dropdown",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    columnDefs: [\n      {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',\n        editDropdownOptionsFunction: function(rowEntity, colDef) {\n          if (rowEntity.foo === 'bar') {\n            return [{id: 'bar1', value: 'BAR 1'},\n                    {id: 'bar2', value: 'BAR 2'},\n                    {id: 'bar3', value: 'BAR 3'}];\n          } else {\n            return [{id: 'foo1', value: 'FOO 1'},\n                    {id: 'foo2', value: 'FOO 2'}];\n          }\n        },\n        editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }\n    ],\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17056,
            "ngdoc": "property",
            "name": "editDropdownValueLabel",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "the label for the \"value\" field\nin the editDropdownOptionsArray.  Defaults\nto 'value'",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    columnDefs: [\n      {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',\n        editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],\n        editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }\n    ],\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17074,
            "ngdoc": "property",
            "name": "editDropdownFilter",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "A filter that you would like to apply to the values in the options list\nof the dropdown.  For example if you were using angular-translate you might set this\nto `'translate'`",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    columnDefs: [\n      {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',\n        editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],\n        editDropdownIdLabel: 'code', editDropdownValueLabel: 'status', editDropdownFilter: 'translate' }\n    ],\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17611,
            "ngdoc": "property",
            "name": "editFileChooserCallback",
            "propertyof": "ui.grid.edit.api:ColumnDef",
            "description": "A function that should be called when any files have been chosen\nby the user.  You should use this to process the files appropriately for your\napplication.\n\nIt passes the gridCol, the gridRow (from which you can get gridRow.entity),\nand the files.  The files are in the format as returned from the file chooser,\nan array of files, with each having useful information such as:\n- `files[0].lastModifiedDate`\n- `files[0].name`\n- `files[0].size`  (appears to be in bytes)\n- `files[0].type`  (MIME type by the looks)\n\nTypically you would do something with these files - most commonly you would\nuse the filename or read the file itself in.  The example function does both.",
            "example": [
                "\n<pre>\neditFileChooserCallBack: function(gridRow, gridCol, files ){\n  // ignore all but the first file, it can only choose one anyway\n  // set the filename into this column\n  gridRow.entity.filename = file[0].name;\n\n  // read the file and set it into a hidden column, which we may do stuff with later\n  var setFile = function(fileContent){\n    gridRow.entity.file = fileContent.currentTarget.result;\n  };\n  var reader = new FileReader();\n  reader.onload = setFile;\n  reader.readAsText( files[0] );\n}\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17686,
            "ngdoc": "overview",
            "name": "ui.grid.emptyBaseLayer",
            "description": "# ui.grid.emptyBaseLayer\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides the ability to have the background of the ui-grid be empty rows, this would be displayed in the case were\nthe grid height is greater then the amount of rows displayed.\n\n<div doc-module-components=\"ui.grid.emptyBaseLayer\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17703,
            "ngdoc": "service",
            "name": "ui.grid.emptyBaseLayer.service:uiGridBaseLayerService",
            "description": "Services for the empty base layer grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17713,
            "ngdoc": "object",
            "name": "ui.grid.emptyBaseLayer.api:GridOptions",
            "description": "GridOptions for emptyBaseLayer feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17724,
            "ngdoc": "object",
            "name": "enableEmptyGridBaseLayer",
            "propertyof": "ui.grid.emptyBaseLayer.api:GridOptions",
            "description": "Enable empty base layer, which shows empty rows as background on the entire grid\n<br/>Defaults to true, if the directive is used.\n<br/>Set to false either by setting this attribute or passing false to the directive.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17752,
            "ngdoc": "object",
            "name": "ui.grid.emptyBaseLayer.directive:uiGridEmptyBaseLayer",
            "description": "Shows empty rows in the background of the ui-grid, these span\nthe full height of the ui-grid, so that there won't be blank space below the shown rows.",
            "example": [
                "\n<pre>\n<div ui-grid=\"gridOptions\" class=\"grid\" ui-grid-empty-base-layer></div>\n</pre>\nOr you can enable/disable it dynamically by passing in true or false. It doesn't\nthe value, so it would only be set on initial render.\n<pre>\n<div ui-grid=\"gridOptions\" class=\"grid\" ui-grid-empty-base-layer=\"false\"></div>\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17819,
            "ngdoc": "directive",
            "name": "ui.grid.emptyBaseLayer.directive:uiGridViewport",
            "description": "stacks on the uiGridViewport directive to append the empty grid base layer html elements to the\ndefault gridRow template",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17849,
            "ngdoc": "overview",
            "name": "ui.grid.expandable",
            "description": "# ui.grid.expandable\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides the ability to create subgrids with the ability to expand a row\nto show the subgrid.\n\n<div doc-module-components=\"ui.grid.expandable\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17865,
            "ngdoc": "service",
            "name": "ui.grid.expandable.service:uiGridExpandableService",
            "description": "Services for the expandable grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17878,
            "ngdoc": "object",
            "name": "enableExpandable",
            "propertyof": "ui.grid.expandable.api:GridOptions",
            "description": "Whether or not to use expandable feature, allows you to turn off expandable on specific grids\nwithin your application, or in specific modes on _this_ grid. Defaults to true.",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    enableExpandable: false\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17893,
            "ngdoc": "object",
            "name": "expandableRowHeight",
            "propertyof": "ui.grid.expandable.api:GridOptions",
            "description": "Height in pixels of the expanded subgrid.  Defaults to\n150",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    expandableRowHeight: 150\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17908,
            "ngdoc": "object",
            "name": "",
            "propertyof": "ui.grid.expandable.api:GridOptions",
            "description": "Width in pixels of the expandable column. Defaults to 40",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    expandableRowHeaderWidth: 40\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17922,
            "ngdoc": "object",
            "name": "expandableRowTemplate",
            "propertyof": "ui.grid.expandable.api:GridOptions",
            "description": "Mandatory. The template for your expanded row",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    expandableRowTemplate: 'expandableRowTemplate.html'\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17939,
            "ngdoc": "object",
            "name": "ui.grid.expandable.api:PublicApi",
            "description": "Public Api for expandable feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17945,
            "ngdoc": "object",
            "name": "ui.grid.expandable.api:GridRow",
            "description": "Additional properties added to GridRow when using the expandable module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17951,
            "ngdoc": "object",
            "name": "ui.grid.expandable.api:GridOptions",
            "description": "Options for configuring the expandable feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17961,
            "ngdoc": "event",
            "name": "rowExpandedStateChanged",
            "eventof": "ui.grid.expandable.api:PublicApi",
            "description": "raised when row expanded or collapsed\n<pre>\n     gridApi.expandable.on.rowExpandedStateChanged(scope,function(row){})\n</pre>",
            "params": [
                {
                    "name": "row",
                    "description": "the row that was expanded",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17980,
            "ngdoc": "method",
            "name": "toggleRowExpansion",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "Toggle a specific row\n<pre>\n     gridApi.expandable.toggleRowExpansion(rowEntity);\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the data entity for the row you want to expand",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 17997,
            "ngdoc": "method",
            "name": "expandAllRows",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "Expand all subgrids.\n<pre>\n     gridApi.expandable.expandAllRows();\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18010,
            "ngdoc": "method",
            "name": "collapseAllRows",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "Collapse all subgrids.\n<pre>\n     gridApi.expandable.collapseAllRows();\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18023,
            "ngdoc": "method",
            "name": "toggleAllRows",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "Toggle all subgrids.\n<pre>\n     gridApi.expandable.toggleAllRows();\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18035,
            "ngdoc": "function",
            "name": "expandRow",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "Expand the data row",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18048,
            "ngdoc": "function",
            "name": "collapseRow",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "Collapse the data row",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18061,
            "ngdoc": "function",
            "name": "getExpandedRows",
            "methodof": "ui.grid.expandable.api:PublicApi",
            "description": "returns all expandedRow's entity references",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18082,
            "ngdoc": "object",
            "name": "isExpanded",
            "propertyof": "ui.grid.expandable.api:GridRow",
            "description": "Whether or not the row is currently expanded.",
            "example": [
                "\n<pre>\n  $scope.api.expandable.on.rowExpandedStateChanged($scope, function (row) {\n    if (row.isExpanded) {\n      //...\n    }\n  });\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18149,
            "ngdoc": "object",
            "name": "enableExpandableRowHeader",
            "propertyof": "ui.grid.expandable.api:GridOptions",
            "description": "Show a rowHeader to provide the expandable buttons.  If set to false then implies\nyou're going to use a custom method for expanding and collapsing the subgrids. Defaults to true.",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    enableExpandableRowHeader: false\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18200,
            "ngdoc": "directive",
            "name": "ui.grid.expandable.directive:uiGrid",
            "description": "stacks on the uiGrid directive to register child grid with parent row when child is created",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18220,
            "ngdoc": "directive",
            "name": "ui.grid.expandable.class:Grid",
            "description": "Additional Grid properties added by expandable module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18226,
            "ngdoc": "object",
            "name": "parentRow",
            "propertyof": "ui.grid.expandable.class:Grid",
            "description": "reference to the expanded parent row that owns this grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18250,
            "ngdoc": "directive",
            "name": "ui.grid.expandable.directive:uiGridExpandableRow",
            "description": "directive to render the expandable row template",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18270,
            "ngdoc": "object",
            "name": "expandableRowScope",
            "propertyof": "ui.grid.expandable.api:GridOptions",
            "description": "Variables of object expandableScope will be available in the scope of the expanded subgrid",
            "example": [
                "\n<pre>\n  $scope.gridOptions = {\n    expandableRowScope: expandableScope\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18306,
            "ngdoc": "directive",
            "name": "ui.grid.expandable.directive:uiGridRow",
            "description": "stacks on the uiGridRow directive to add support for expandable rows",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18370,
            "ngdoc": "directive",
            "name": "ui.grid.expandable.directive:uiGridViewport",
            "description": "stacks on the uiGridViewport directive to append the expandable row html elements to the\ndefault gridRow template",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18411,
            "ngdoc": "overview",
            "name": "ui.grid.exporter",
            "description": "# ui.grid.exporter\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides the ability to export data from the grid.\n\nData can be exported in a range of formats, and all data, visible\ndata, or selected rows can be exported, with all columns or visible\ncolumns.\n\nNo UI is provided, the caller should provide their own UI/buttons\nas appropriate, or enable the gridMenu\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.exporter\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18437,
            "ngdoc": "object",
            "name": "ui.grid.exporter.constant:uiGridExporterConstants",
            "description": "constants available in exporter module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18443,
            "ngdoc": "property",
            "propertyof": "ui.grid.exporter.constant:uiGridExporterConstants",
            "name": "ALL",
            "description": "export all data, including data not visible.  Can\nbe set for either rowTypes or colTypes",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18450,
            "ngdoc": "property",
            "propertyof": "ui.grid.exporter.constant:uiGridExporterConstants",
            "name": "VISIBLE",
            "description": "export only visible data, including data not visible.  Can\nbe set for either rowTypes or colTypes",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18457,
            "ngdoc": "property",
            "propertyof": "ui.grid.exporter.constant:uiGridExporterConstants",
            "name": "SELECTED",
            "description": "export all data, including data not visible.  Can\nbe set only for rowTypes, selection of only some columns is\nnot supported",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18475,
            "ngdoc": "service",
            "name": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Services for exporter feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18494,
            "ngdoc": "object",
            "name": "ui.grid.exporter.api:PublicApi",
            "description": "Public Api for exporter feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18507,
            "ngdoc": "function",
            "name": "csvExport",
            "methodof": "ui.grid.exporter.api:PublicApi",
            "description": "Exports rows from the grid in csv format,\nthe data exported is selected based on the provided options",
            "params": [
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18522,
            "ngdoc": "function",
            "name": "pdfExport",
            "methodof": "ui.grid.exporter.api:PublicApi",
            "description": "Exports rows from the grid in pdf format,\nthe data exported is selected based on the provided options\nNote that this function has a dependency on pdfMake, all\ngoing well this has been installed for you.\nThe resulting pdf opens in a new browser window.",
            "params": [
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18540,
            "ngdoc": "function",
            "name": "excelExport",
            "methodof": "ui.grid.exporter.api:PublicApi",
            "description": "Exports rows from the grid in excel format,\nthe data exported is selected based on the provided options",
            "params": [
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18578,
            "ngdoc": "object",
            "name": "ui.grid.exporter.api:GridOptions",
            "description": "GridOptions for exporter feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18585,
            "ngdoc": "object",
            "name": "ui.grid.exporter.api:ColumnDef",
            "description": "ColumnDef settings for exporter",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18590,
            "ngdoc": "object",
            "name": "exporterSuppressMenu",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Don't show the export menu button, implying the user\nwill roll their own UI for calling the exporter\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18599,
            "ngdoc": "object",
            "name": "exporterMenuLabel",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The text to show on the exporter menu button\nlink\n<br/>Defaults to 'Export'",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18608,
            "ngdoc": "object",
            "name": "exporterSuppressColumns",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Columns that should not be exported.  The selectionRowHeader is already automatically\nsuppressed, but if you had a button column or some other \"system\" column that shouldn't be shown in the\noutput then add it in this list.  You should provide an array of column names.\n<br/>Defaults to: []\n<pre>\n  gridOptions.exporterSuppressColumns = [ 'buttons' ];\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18621,
            "ngdoc": "object",
            "name": "exporterCsvColumnSeparator",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The character to use as column separator\nlink\n<br/>Defaults to ','",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18630,
            "ngdoc": "object",
            "name": "exporterCsvFilename",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The default filename to use when saving the downloaded csv.\nThis will only work in some browsers.\n<br/>Defaults to 'download.csv'",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18639,
            "ngdoc": "object",
            "name": "exporterPdfFilename",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The default filename to use when saving the downloaded pdf, only used in IE (other browsers open pdfs in a new window)\n<br/>Defaults to 'download.pdf'",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18647,
            "ngdoc": "object",
            "name": "exporterOlderExcelCompatibility",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Some versions of excel don't like the utf-16 BOM on the front, and it comes\nthrough as ï»¿ in the first column header.  Setting this option to false will suppress this, at the\nexpense of proper utf-16 handling in applications that do recognise the BOM\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18657,
            "ngdoc": "object",
            "name": "exporterIsExcelCompatible",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Separator header, used to set a custom column separator in a csv file, only works on MS Excel.\nUsed it on other programs will make csv content display unproperly. Setting this option to false won't add this header.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18666,
            "ngdoc": "object",
            "name": "exporterMenuItemOrder",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "An option to determine the starting point for the menu items created by the exporter\n<br/>Defaults to 200",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18674,
            "ngdoc": "object",
            "name": "exporterPdfDefaultStyle",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The default style in pdfMake format\n<br/>Defaults to:\n<pre>\n  {\n    fontSize: 11\n  }\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18687,
            "ngdoc": "object",
            "name": "exporterPdfTableStyle",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The table style in pdfMake format\n<br/>Defaults to:\n<pre>\n  {\n    margin: [0, 5, 0, 15]\n  }\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18700,
            "ngdoc": "object",
            "name": "exporterPdfTableHeaderStyle",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The tableHeader style in pdfMake format\n<br/>Defaults to:\n<pre>\n  {\n    bold: true,\n    fontSize: 12,\n    color: 'black'\n  }\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18715,
            "ngdoc": "object",
            "name": "exporterPdfHeader",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The header section for pdf exports.  Can be\nsimple text:\n<pre>\n  gridOptions.exporterPdfHeader = 'My Header';\n</pre>\nCan be a more complex object in pdfMake format:\n<pre>\n  gridOptions.exporterPdfHeader = {\n    columns: [\n      'Left part',\n      { text: 'Right part', alignment: 'right' }\n    ]\n  };\n</pre>\nOr can be a function, allowing page numbers and the like\n<pre>\n  gridOptions.exporterPdfHeader: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18739,
            "ngdoc": "object",
            "name": "exporterPdfFooter",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The header section for pdf exports.  Can be\nsimple text:\n<pre>\n  gridOptions.exporterPdfFooter = 'My Footer';\n</pre>\nCan be a more complex object in pdfMake format:\n<pre>\n  gridOptions.exporterPdfFooter = {\n    columns: [\n      'Left part',\n      { text: 'Right part', alignment: 'right' }\n    ]\n  };\n</pre>\nOr can be a function, allowing page numbers and the like\n<pre>\n  gridOptions.exporterPdfFooter: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };\n</pre>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18763,
            "ngdoc": "object",
            "name": "exporterPdfOrientation",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The orientation, should be a valid pdfMake value,\n'landscape' or 'portrait'\n<br/>Defaults to landscape",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18772,
            "ngdoc": "object",
            "name": "exporterPdfPageSize",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The orientation, should be a valid pdfMake\npaper size, usually 'A4' or 'LETTER'\n{@link https://github.com/bpampuch/pdfmake/blob/master/src/standardPageSizes.js pdfMake page sizes}\n<br/>Defaults to A4",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18782,
            "ngdoc": "object",
            "name": "exporterPdfMaxGridWidth",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "The maxium grid width - the current grid width\nwill be scaled to match this, with any fixed width columns\nbeing adjusted accordingly.\n<br/>Defaults to 720 (for A4 landscape), use 670 for LETTER",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18792,
            "ngdoc": "object",
            "name": "exporterPdfTableLayout",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "A tableLayout in pdfMake format,\ncontrols gridlines and the like.  We use the default\nlayout usually.\n<br/>Defaults to null, which means no layout",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18802,
            "ngdoc": "object",
            "name": "exporterMenuAllData",
            "porpertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Add export all data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18810,
            "ngdoc": "object",
            "name": "exporterMenuVisibleData",
            "porpertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Add export visible data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18818,
            "ngdoc": "object",
            "name": "exporterMenuSelectedData",
            "porpertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Add export selected data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18826,
            "ngdoc": "object",
            "name": "exporterMenuCsv",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Add csv export menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18834,
            "ngdoc": "object",
            "name": "exporterMenuPdf",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Add pdf export menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18842,
            "ngdoc": "object",
            "name": "exporterMenuExcel",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Add excel export menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18850,
            "ngdoc": "object",
            "name": "exporterPdfCustomFormatter",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "A custom callback routine that changes the pdf document, adding any\ncustom styling or content that is supported by pdfMake.  Takes in the complete docDefinition, and\nmust return an updated docDefinition ready for pdfMake.",
            "example": [
                "\nIn this example we add a style to the style array, so that we can use it in our\nfooter definition.\n<pre>\n  gridOptions.exporterPdfCustomFormatter = function ( docDefinition ) {\n    docDefinition.styles.footerStyle = { bold: true, fontSize: 10 };\n    return docDefinition;\n  }\n\n  gridOptions.exporterPdfFooter = { text: 'My footer', style: 'footerStyle' }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18871,
            "ngdoc": "object",
            "name": "exporterHeaderFilterUseName",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Defaults to false, which leads to `displayName` being passed into the headerFilter.\nIf set to true, then will pass `name` instead.",
            "example": [
                "\n<pre>\n  gridOptions.exporterHeaderFilterUseName = true;\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18886,
            "ngdoc": "object",
            "name": "exporterHeaderFilter",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "A function to apply to the header displayNames before exporting.  Useful for internationalisation,\nfor example if you were using angular-translate you'd set this to `$translate.instant`.  Note that this\ncall must be synchronous, it cannot be a call that returns a promise.\n\nBehaviour can be changed to pass in `name` instead of `displayName` through use of `exporterHeaderFilterUseName: true`.",
            "example": [
                "\n<pre>\n  gridOptions.exporterHeaderFilter = function( displayName ){ return 'col: ' + name; };\n</pre>\nOR\n<pre>\n  gridOptions.exporterHeaderFilter = $translate.instant;\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18906,
            "ngdoc": "function",
            "name": "exporterFieldCallback",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "A function to call for each field before exporting it.  Allows\nmassaging of raw data into a display format, for example if you have applied\nfilters to convert codes into decodes, or you require\na specific date format in the exported content.\n\nThe method is called once for each field exported, and provides the grid, the\ngridCol and the GridRow for you to use as context in massaging the data.",
            "params": [
                {
                    "name": "grid",
                    "description": "provides the grid in case you have need of it",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row from which the data comes",
                    "type": "GridRow"
                },
                {
                    "name": "col",
                    "description": "the column from which the data comes",
                    "type": "GridCol"
                },
                {
                    "name": "value",
                    "description": "the value for your massaging",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "you must return the massaged value ready for exporting",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n  gridOptions.exporterFieldCallback = function ( grid, row, col, value ){\n    if ( col.name === 'status' ){\n      value = decodeStatus( value );\n    }\n    return value;\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18936,
            "ngdoc": "function",
            "name": "exporterFieldFormatCallback",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "A function to call for each field before exporting it.  Allows\ngeneral object to be return to modify the format of a cell in the case of\nexcel exports\n\nThe method is called once for each field exported, and provides the grid, the\ngridCol and the GridRow for you to use as context in massaging the data.",
            "params": [
                {
                    "name": "grid",
                    "description": "provides the grid in case you have need of it",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row from which the data comes",
                    "type": "GridRow"
                },
                {
                    "name": "col",
                    "description": "the column from which the data comes",
                    "type": "GridCol"
                },
                {
                    "name": "value",
                    "description": "the value for your massaging",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "you must return the massaged value ready for exporting",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n  gridOptions.exporterFieldCallback = function ( grid, row, col, value ){\n    if ( col.name === 'status' ){\n      value = decodeStatus( value );\n    }\n    return value;\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18965,
            "ngdoc": "object",
            "name": "exporterFieldApplyFilters",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "Defaults to false, which leads to filters being evaluated on export           *",
            "example": [
                "\n<pre>\n  gridOptions.exporterFieldApplyFilters = true;\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18978,
            "ngdoc": "function",
            "name": "exporterAllDataFn",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "This promise is needed when exporting all rows,\nand the data need to be provided by server side. Default is null.",
            "return": {
                "description": "a promise to load all data from server",
                "type": "Promise"
            },
            "example": [
                "\n<pre>\n  gridOptions.exporterAllDataFn = function () {\n    return $http.get('/data/100.json')\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 18995,
            "ngdoc": "function",
            "name": "exporterAllDataPromise",
            "propertyof": "ui.grid.exporter.api:GridOptions",
            "description": "DEPRECATED - exporterAllDataFn used to be\ncalled this, but it wasn't a promise, it was a function that returned\na promise.  Deprecated, but supported for backward compatibility, use\nexporterAllDataFn instead.",
            "return": {
                "description": "a promise to load all data from server",
                "type": "Promise"
            },
            "example": [
                "\n<pre>\n  gridOptions.exporterAllDataFn = function () {\n    return $http.get('/data/100.json')\n  }\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19018,
            "ngdoc": "function",
            "name": "addToMenu",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Adds export items to the grid menu,\nallowing the user to select export options",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19125,
            "ngdoc": "function",
            "name": "csvExport",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Exports rows from the grid in csv format,\nthe data exported is selected based on the provided options",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19150,
            "ngdoc": "function",
            "name": "loadAllDataIfNeeded",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "When using server side pagination, use exporterAllDataFn to\nload all data before continuing processing.\nWhen using client side pagination, return a resolved promise so processing\ncontinues immediately",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19179,
            "ngdoc": "property",
            "propertyof": "ui.grid.exporter.api:ColumnDef",
            "name": "exporterSuppressExport",
            "description": "Suppresses export for this column.  Used by selection and expandable.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19186,
            "ngdoc": "function",
            "name": "getColumnHeaders",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Gets the column headers from the grid to use\nas a title row for the exported file, all headers have\nheaderCellFilters applied as appropriate.\n\nColumn headers are an array of objects, each object has\nname, displayName, width and align attributes.  Only name is\nused for csv, all attributes are used for pdf.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19235,
            "ngdoc": "property",
            "propertyof": "ui.grid.exporter.api:ColumnDef",
            "name": "exporterPdfAlign",
            "description": "the alignment you'd like for this specific column when\nexported into a pdf.  Can be 'left', 'right', 'center' or any other\nvalid pdfMake alignment option.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19245,
            "ngdoc": "object",
            "name": "ui.grid.exporter.api:GridRow",
            "description": "GridRow settings for exporter",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19250,
            "ngdoc": "object",
            "name": "exporterEnableExporting",
            "propertyof": "ui.grid.exporter.api:GridRow",
            "description": "If set to false, then don't export this row, notwithstanding visible or\nother settings\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19260,
            "ngdoc": "function",
            "name": "getRowsFromNode",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Gets rows from a node. If the node is grouped it will\nrecurse down into the children to get to the raw data element\nwhich is a row without children (a leaf).",
            "params": [
                {
                    "name": "aNode",
                    "description": "the tree node on the grid",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "an array of leaf nodes",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19283,
            "ngdoc": "function",
            "name": "getDataSorted",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Gets rows from a node. If the node is grouped it will\nrecurse down into the children to get to the raw data element\nwhich is a row without children (a leaf). If the grid is not\ngrouped this will return just the raw rows",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "applyCellFilters",
                    "description": "whether or not to get the display value or the raw value of the data",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "an array of leaf nodes",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19316,
            "ngdoc": "function",
            "name": "getData",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Gets data from the grid based on the provided options,\nall cells have cellFilters applied as appropriate.  Any rows marked\n`exporterEnableExporting: false` will not be exported",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "applyCellFilters",
                    "description": "whether or not to get the display value or the raw value of the data",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19395,
            "ngdoc": "function",
            "name": "formatAsCsv",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Formats the column headers and data as a CSV,\nand sends that data to the user",
            "params": [
                {
                    "name": "exportColumnHeaders",
                    "description": "an array of column headers,\nwhere each header is an object with name, width and maybe alignment",
                    "type": "Array"
                },
                {
                    "name": "exportData",
                    "description": "an array of rows, where each row is\nan array of column data",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "a string that represents the separator to be used in the csv file",
                    "type": "String"
                }
            ],
            "return": {
                "description": "csv the formatted csv as a string",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19420,
            "ngdoc": "function",
            "name": "formatRowAsCsv",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders a single field as a csv field, including\nquotes around the value",
            "params": [
                {
                    "name": "exporter",
                    "description": "pass in exporter",
                    "type": "ExporterService"
                },
                {
                    "name": "row",
                    "description": "the row to be turned into a csv string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a csv-ified version of the row",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19436,
            "ngdoc": "function",
            "name": "formatFieldAsCsv",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders a single field as a csv field, including\nquotes around the value",
            "params": [
                {
                    "name": "field",
                    "description": "the field to be turned into a csv string,\nmay be of any type",
                    "type": "Field"
                }
            ],
            "return": {
                "description": "a csv-ified version of the field",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19464,
            "ngdoc": "function",
            "name": "isIE",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Checks whether current browser is IE and returns it's version if it is",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19482,
            "ngdoc": "function",
            "name": "downloadFile",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Triggers download of a csv file.  Logic provided\nby @cssensei (from his colleagues at https://github.com/ifeelgoods) in issue #2391",
            "params": [
                {
                    "name": "fileName",
                    "description": "the filename we'd like our file to be\ngiven",
                    "type": "String"
                },
                {
                    "name": "csvContent",
                    "description": "the csv content that we'd like to\ndownload as a file",
                    "type": "String"
                },
                {
                    "name": "exporterOlderExcelCompatibility",
                    "description": "whether or not we put a utf-16 BOM on the from (\\uFEFF)",
                    "type": "Boolean"
                },
                {
                    "name": "exporterIsExcelCompatible",
                    "description": "whether or not we add separator header ('sep=X')",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19560,
            "ngdoc": "function",
            "name": "pdfExport",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Exports rows from the grid in pdf format,\nthe data exported is selected based on the provided options.\nNote that this function has a dependency on pdfMake, which must\nbe installed.  The resulting pdf opens in a new\nbrowser window.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "rowTypes",
                    "description": "which rows to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                },
                {
                    "name": "colTypes",
                    "description": "which columns to export, valid values are\nuiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,\nuiGridExporterConstants.SELECTED",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19593,
            "ngdoc": "function",
            "name": "downloadPdf",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Generates and retrieves the pdf as a blob, then downloads\nit as a file.  Only used in IE, in all other browsers we use the native\npdfMake.open function to just open the PDF",
            "params": [
                {
                    "name": "fileName",
                    "description": "the filename to give to the pdf, can be set\nthrough exporterPdfFilename",
                    "type": "String"
                },
                {
                    "name": "docDefinition",
                    "description": "a pdf docDefinition that we can generate\nand get a blob from",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19646,
            "ngdoc": "function",
            "name": "renderAsPdf",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders the data into a pdf, and opens that pdf.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "exportColumnHeaders",
                    "description": "an array of column headers,\nwhere each header is an object with name, width and maybe alignment",
                    "type": "Array"
                },
                {
                    "name": "exportData",
                    "description": "an array of rows, where each row is\nan array of column data",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a pdfMake format document definition, ready\nfor generation",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19709,
            "ngdoc": "function",
            "name": "calculatePdfHeaderWidths",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Determines the column widths base on the\nwidths we got from the grid.  If the column is drawn\nthen we have a drawnWidth.  If the column is not visible\nthen we have '*', 'x%' or a width.  When columns are\nnot visible they don't contribute to the overall gridWidth,\nso we need to adjust to allow for extra columns\n\nOur basic heuristic is to take the current gridWidth, plus\nnumeric columns and call this the base gridwidth.\n\nTo that we add 100 for any '*' column, and x% of the base gridWidth\nfor any column that is a %",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid from which data should be exported",
                    "type": "Grid"
                },
                {
                    "name": "exportHeaders",
                    "description": "array of header information",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of header widths",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19759,
            "ngdoc": "function",
            "name": "formatRowAsPdf",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders a row in a format consumable by PDF,\nmainly meaning casting everything to a string",
            "params": [
                {
                    "name": "exporter",
                    "description": "pass in exporter",
                    "type": "ExporterService"
                },
                {
                    "name": "row",
                    "description": "the row to be turned into a csv string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a csv-ified version of the row",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19776,
            "ngdoc": "function",
            "name": "formatFieldAsCsv",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders a single field as a pdf-able field, which\nis different from a csv field only in that strings don't have quotes\naround them",
            "params": [
                {
                    "name": "field",
                    "description": "the field to be turned into a pdf string,\nmay be of any type",
                    "type": "Field"
                }
            ],
            "return": {
                "description": "a string-ified version of the field",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19812,
            "ngdoc": "function",
            "name": "formatAsExcel",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Formats the column headers and data as a excel,\nand sends that data to the user",
            "params": [
                {
                    "name": "exportColumnHeaders",
                    "description": "an array of column headers,\nwhere each header is an object with name, width and maybe alignment",
                    "type": "Array"
                },
                {
                    "name": "exportData",
                    "description": "an array of rows, where each row is\nan array of column data",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "a string that represents the separator to be used in the csv file",
                    "type": "String"
                }
            ],
            "return": {
                "description": "csv the formatted excel as a string",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19855,
            "ngdoc": "function",
            "name": "formatRowAsExcel",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders a single field as a csv field, including\nquotes around the value",
            "params": [
                {
                    "name": "exporter",
                    "description": "pass in exporter",
                    "type": "ExporterService"
                },
                {
                    "name": "row",
                    "description": "the row to be turned into a excel string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of cell objects (i.e. {value: x, metadata: y})",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 19876,
            "ngdoc": "function",
            "name": "formatFieldAsExcel",
            "methodof": "ui.grid.exporter.service:uiGridExporterService",
            "description": "Renders a single field as a csv field, including\nquotes around the value",
            "params": [
                {
                    "name": "field",
                    "description": "the field to be turned into a csv string,\nmay be of any type",
                    "type": "Field"
                }
            ],
            "return": {
                "description": "a excel-ified version of the field",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20028,
            "ngdoc": "overview",
            "name": "ui.grid.grouping",
            "description": "# ui.grid.grouping\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides grouping of rows based on the data in them, similar\nin concept to excel grouping.  You can group multiple columns, resulting in\nnested grouping.\n\nIn concept this feature is similar to sorting + grid footer/aggregation, it\nsorts the data based on the grouped columns, then creates group rows that\nreflect a break in the data.  Each of those group rows can have aggregations for\nthe data within that group.\n\nThis feature leverages treeBase to provide the tree functionality itself,\nthe key thing this feature does therefore is to set treeLevels on the rows\nand insert the group headers.\n\nDesign information:\n-------------------\n\nEach column will get new menu items - group by, and aggregate by.  Group by\nwill cause this column to be sorted (if not already), and will move this column\nto the front of the sorted columns (i.e. grouped columns take precedence over\nsorted columns).  It will respect the sort order already set if there is one,\nand it will allow the sorting logic to change that sort order, it just forces\nthe column to the front of the sorting.  You can group by multiple columns, the\nlogic will add this column to the sorting after any already grouped columns.\n\nOnce a grouping is defined, grouping logic is added to the rowsProcessors.  This\nwill process the rows, identifying a break in the data value, and inserting a grouping row.\nGrouping rows have specific attributes on them:\n\n - internalRow = true: tells us that this isn't a real row, so we can ignore it\n   from any processing that it looking at core data rows.  This is used by the core\n   logic (or will be one day), as it's not grouping specific\n - groupHeader = true: tells us this is a groupHeader.  This is used by the grouping logic\n   to know if this is a groupHeader row or not\n\nSince the logic is baked into the rowsProcessors, it should get triggered whenever\nrow order or filtering or anything like that is changed.  In order to avoid the row instantiation\ntime, and to preserve state across invocations, we hold a cache of the rows that we created\nlast time, and we use them again this time if we can.\n\nBy default rows are collapsed, which means all data rows have their visible property\nset to false, and only level 0 group rows are set to visible.\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.grouping\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20087,
            "ngdoc": "object",
            "name": "ui.grid.grouping.constant:uiGridGroupingConstants",
            "description": "constants available in grouping module, this includes\nall the constants declared in the treeBase module (these are manually copied\nas there isn't an easy way to include constants in another constants file, and\nwe don't want to make users include treeBase)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20111,
            "ngdoc": "service",
            "name": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Services for grouping features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20126,
            "ngdoc": "object",
            "name": "ui.grid.grouping.grid:grouping",
            "description": "Grid properties and functions added for grouping",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20134,
            "ngdoc": "property",
            "propertyof": "ui.grid.grouping.grid:grouping",
            "name": "groupHeaderCache",
            "description": "Cache that holds the group header rows we created last time, we'll\nreuse these next time, not least because they hold our expanded states.\n\nWe need to take care with these that they don't become a memory leak, we\ncreate a new cache each time using the values from the old cache.  This works\nso long as we're creating group rows for invisible rows as well.\n\nThe cache is a nested hash, indexed on the value we grouped by.  So if we\ngrouped by gender then age, we'd maybe have something like:\n```\n  {\n    male: {\n      row: <pointer to the old row>,\n      children: {\n        22: { row: <pointer to the old row> },\n        31: { row: <pointer to the old row> }\n    },\n    female: {\n      row: <pointer to the old row>,\n      children: {\n        28: { row: <pointer to the old row> },\n        55: { row: <pointer to the old row> }\n    }\n  }\n```\n\nWe create new rows for any missing rows, this means that they come in as collapsed.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20178,
            "ngdoc": "object",
            "name": "ui.grid.grouping.api:PublicApi",
            "description": "Public Api for grouping feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20187,
            "ngdoc": "event",
            "eventof": "ui.grid.grouping.api:PublicApi",
            "name": "aggregationChanged",
            "description": "raised whenever aggregation is changed, added or removed from a column\n\n<pre>\n     gridApi.grouping.on.aggregationChanged(scope,function(col){})\n</pre>",
            "params": [
                {
                    "name": "col",
                    "description": "the column which on which aggregation changed. The aggregation\ntype is available as `col.treeAggregation.type`",
                    "type": "GridCol"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20200,
            "ngdoc": "event",
            "eventof": "ui.grid.grouping.api:PublicApi",
            "name": "groupingChanged",
            "description": "raised whenever the grouped columns changes\n\n<pre>\n     gridApi.grouping.on.groupingChanged(scope,function(col){})\n</pre>",
            "params": [
                {
                    "name": "col",
                    "description": "the column which on which grouping changed. The new grouping is\navailable as `col.grouping`",
                    "type": "GridCol"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20217,
            "ngdoc": "function",
            "name": "getGrouping",
            "methodof": "ui.grid.grouping.api:PublicApi",
            "description": "Get the grouping configuration for this grid,\nused by the saveState feature.  Adds expandedState to the information\nprovided by the internal getGrouping, and removes any aggregations that have a source\nof grouping (i.e. will be automatically reapplied when we regroup the column)\nReturned grouping is an object\n  `{ grouping: groupArray, treeAggregations: aggregateArray, expandedState: hash }`\nwhere grouping contains an array of objects:\n  `{ field: column.field, colName: column.name, groupPriority: column.grouping.groupPriority }`\nand aggregations contains an array of objects:\n  `{ field: column.field, colName: column.name, aggregation: column.grouping.aggregation }`\nand expandedState is a hash of the currently expanded nodes\n\nThe groupArray will be sorted by groupPriority.",
            "params": [
                {
                    "name": "getExpanded",
                    "description": "whether or not to return the expanded state",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "grouping configuration",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20262,
            "ngdoc": "function",
            "name": "setGrouping",
            "methodof": "ui.grid.grouping.api:PublicApi",
            "description": "Set the grouping configuration for this grid,\nused by the saveState feature, but can also be used by any\nuser to specify a combined grouping and aggregation configuration",
            "params": [
                {
                    "name": "config",
                    "description": "the config you want to apply, in the format\nprovided out by getGrouping",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20276,
            "ngdoc": "function",
            "name": "groupColumn",
            "methodof": "ui.grid.grouping.api:PublicApi",
            "description": "Adds this column to the existing grouping, at the end of the priority order.\nIf the column doesn't have a sort, adds one, by default ASC\n\nThis column will move to the left of any non-group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "params": [
                {
                    "name": "columnName",
                    "description": "the name of the column we want to group",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20293,
            "ngdoc": "function",
            "name": "ungroupColumn",
            "methodof": "ui.grid.grouping.api:PublicApi",
            "description": "Removes the groupPriority from this column.  If the\ncolumn was previously aggregated the aggregation will come back.\nThe sort will remain.\n\nThis column will move to the right of any other group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "params": [
                {
                    "name": "columnName",
                    "description": "the name of the column we want to ungroup",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20311,
            "ngdoc": "function",
            "name": "clearGrouping",
            "methodof": "ui.grid.grouping.api:PublicApi",
            "description": "Clear any grouped columns and any aggregations.  Doesn't remove sorting,\nas we don't know whether that sorting was added by grouping or was there beforehand",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20323,
            "ngdoc": "function",
            "name": "aggregateColumn",
            "methodof": "ui.grid.grouping.api:PublicApi",
            "description": "Sets the aggregation type on a column, if the\ncolumn is currently grouped then it removes the grouping first.\nIf the aggregationDef is null then will result in the aggregation\nbeing removed",
            "params": [
                {
                    "name": "columnName",
                    "description": "the column we want to aggregate",
                    "type": "String"
                },
                {
                    "name": "or",
                    "description": "{function} aggregationDef one of the recognised types\nfrom uiGridGroupingConstants or a custom aggregation function.",
                    "type": "String"
                },
                {
                    "name": "aggregationLabel",
                    "description": "(optional) The label to use for this aggregation.",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20356,
            "ngdoc": "object",
            "name": "ui.grid.grouping.api:GridOptions",
            "description": "GridOptions for grouping feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20364,
            "ngdoc": "object",
            "name": "enableGrouping",
            "propertyof": "ui.grid.grouping.api:GridOptions",
            "description": "Enable row grouping for entire grid.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20373,
            "ngdoc": "object",
            "name": "groupingShowCounts",
            "propertyof": "ui.grid.grouping.api:GridOptions",
            "description": "shows counts on the groupHeader rows. Not that if you are using a cellFilter or a\nsortingAlgorithm which relies on a specific format or data type, showing counts may cause that\nto break, since the group header rows will always be a string with groupingShowCounts enabled.\n<br/>Defaults to true except on columns of types 'date' and 'object'",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20384,
            "ngdoc": "object",
            "name": "groupingNullLabel",
            "propertyof": "ui.grid.grouping.api:GridOptions",
            "description": "The string to use for the grouping header row label on rows which contain a null or undefined value in the grouped column.\n<br/>Defaults to \"Null\"",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20393,
            "ngdoc": "object",
            "name": "enableGroupHeaderSelection",
            "propertyof": "ui.grid.grouping.api:GridOptions",
            "description": "Allows group header rows to be selected.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20404,
            "ngdoc": "function",
            "name": "groupingColumnBuilder",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Sets the grouping defaults based on the columnDefs",
            "params": [
                {
                    "name": "colDef",
                    "description": "columnDef we're basing on",
                    "type": "Object"
                },
                {
                    "name": "col",
                    "description": "the column we're to update",
                    "type": "GridCol"
                },
                {
                    "name": "gridOptions",
                    "description": "the options we should use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise for the builder - actually we do it all inline so it's immediately resolved",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20416,
            "ngdoc": "object",
            "name": "ui.grid.grouping.api:ColumnDef",
            "description": "ColumnDef for grouping feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20424,
            "ngdoc": "object",
            "name": "enableGrouping",
            "propertyof": "ui.grid.grouping.api:ColumnDef",
            "description": "Enable grouping on this column\n<br/>Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20435,
            "ngdoc": "object",
            "name": "grouping",
            "propertyof": "ui.grid.grouping.api:ColumnDef",
            "description": "Set the grouping for a column.  Format is:\n```\n  {\n    groupPriority: <number, starts at 0, if less than 0 or undefined then we're aggregating in this column>\n  }\n```\n\n**Note that aggregation used to be included in grouping, but is now separately set on the column via treeAggregation\nsetting in treeBase**\n\nWe group in the priority order given, this will also put these columns to the high order of the sort irrespective\nof the sort priority given them.  If there is no sort defined then we sort ascending, if there is a sort defined then\nwe use that sort.\n\nIf the groupPriority is undefined or less than 0, then we expect to be aggregating, and we look at the\naggregation types to determine what sort of aggregation we can do.  Values are in the constants file, but\ninclude SUM, COUNT, MAX, MIN\n\ngroupPriorities should generally be sequential, if they're not then the next time getGrouping is called\nwe'll renumber them to be sequential.\n<br/>Defaults to undefined.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20536,
            "ngdoc": "object",
            "name": "groupingShowGroupingMenu",
            "propertyof": "ui.grid.grouping.api:ColumnDef",
            "description": "Show the grouping (group and ungroup items) menu on this column\n<br/>Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20554,
            "ngdoc": "object",
            "name": "groupingShowAggregationMenu",
            "propertyof": "ui.grid.grouping.api:ColumnDef",
            "description": "Show the aggregation menu on this column\n<br/>Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20578,
            "ngdoc": "function",
            "name": "groupingColumnProcessor",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Moves the columns around based on which are grouped",
            "params": [
                {
                    "name": "columns",
                    "description": "the columns to consider rendering",
                    "type": "Array"
                },
                {
                    "name": "rows",
                    "description": "the grid rows, which we don't use but are passed to us",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "updated columns array",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20595,
            "ngdoc": "function",
            "name": "groupedFinalizerFn",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Used on group columns to display the rendered value and optionally\ndisplay the count of rows.",
            "params": [
                {
                    "name": "the",
                    "description": "aggregation entity for a grouped column",
                    "type": "Aggregation"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20617,
            "ngdoc": "function",
            "name": "moveGroupColumns",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Moves the column order so that the grouped columns are lined up\nto the left (well, unless you're RTL, then it's the right).  By doing this in\nthe columnsProcessor, we make it transient - when the column is ungrouped it'll\ngo back to where it was.\n\nDoes nothing if the option `moveGroupColumns` is set to false.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "columns",
                    "description": "the columns that we should process/move",
                    "type": "Array"
                },
                {
                    "name": "rows",
                    "description": "the grid rows",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "updated columns",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20679,
            "ngdoc": "function",
            "name": "groupColumn",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Adds this column to the existing grouping, at the end of the priority order.\nIf the column doesn't have a sort, adds one, by default ASC\n\nThis column will move to the left of any non-group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "column",
                    "description": "the column we want to group",
                    "type": "GridCol"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20723,
            "ngdoc": "function",
            "name": "ungroupColumn",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Removes the groupPriority from this column.  If the\ncolumn was previously aggregated the aggregation will come back.\nThe sort will remain.\n\nThis column will move to the right of any other group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "column",
                    "description": "the column we want to ungroup",
                    "type": "GridCol"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20759,
            "ngdoc": "function",
            "name": "aggregateColumn",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Sets the aggregation type on a column, if the\ncolumn is currently grouped then it removes the grouping first.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "column",
                    "description": "the column we want to aggregate",
                    "type": "GridCol"
                },
                {
                    "name": "one",
                    "description": "of the recognised types from uiGridGroupingConstants or one of the custom aggregations from gridOptions",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20793,
            "ngdoc": "function",
            "name": "setGrouping",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Set the grouping based on a config object, used by the save state feature\n(more specifically, by the restore function in that feature )",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "config",
                    "description": "the config we want to set, same format as that returned by getGrouping",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20837,
            "ngdoc": "function",
            "name": "clearGrouping",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Clear any grouped columns and any aggregations.  Doesn't remove sorting,\nas we don't know whether that sorting was added by grouping or was there beforehand",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20871,
            "ngdoc": "function",
            "name": "tidyPriorities",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Renumbers groupPriority and sortPriority such that\ngroupPriority is contiguous, and sortPriority either matches\ngroupPriority (for group columns), and otherwise is contiguous and\nhigher than groupPriority.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20919,
            "ngdoc": "function",
            "name": "groupRows",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "The rowProcessor that creates the groupHeaders (i.e. does\nthe actual grouping).\n\nAssumes it is always called after the sorting processor, guaranteed by the priority setting\n\nProcesses all the rows in order, inserting a groupHeader row whenever there is a change\nin value of a grouped row, based on the sortAlgorithm used for the column.  The group header row\nis looked up in the groupHeaderCache, and used from there if there is one. The entity is reset\nto {} if one is found.\n\nAs it processes it maintains a `processingState` array. This records, for each level of grouping we're\nworking with, the following information:\n```\n  {\n    fieldName: name,\n    col: col,\n    initialised: boolean,\n    currentValue: value,\n    currentRow: gridRow,\n  }\n```\nWe look for changes in the currentValue at any of the levels.  Where we find a change we:\n\n- create a new groupHeader row in the array",
            "params": [
                {
                    "name": "renderableRows",
                    "description": "the rows we want to process, usually the output from the previous rowProcessor",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the updated rows, including our new group rows",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 20989,
            "ngdoc": "function",
            "name": "initialiseProcessingState",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Creates the processing state array that is used\nfor groupRows.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "an array in the format described in the groupRows method,\ninitialised with blank values",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21018,
            "ngdoc": "function",
            "name": "getGrouping",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Get the grouping settings from the columns.  As a side effect\nthis always renumbers the grouping starting at 0",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "an array of the group fields, in order of priority",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21059,
            "ngdoc": "function",
            "name": "insertGroupHeader",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Create a group header row, and link it to the various configuration\nitems that we use.\n\nLook for the row in the oldGroupingHeaderCache, write the row into the new groupingHeaderCache.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "renderableRows",
                    "description": "the rows that we are processing",
                    "type": "Array"
                },
                {
                    "name": "rowIndex",
                    "description": "the row we were up to processing",
                    "type": "Number"
                },
                {
                    "name": "processingState",
                    "description": "the current processing state",
                    "type": "Array"
                },
                {
                    "name": "stateIndex",
                    "description": "the processing state item that we were on when we triggered a new group header -\ni.e. the column that we want to create a header for",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21136,
            "ngdoc": "function",
            "name": "finaliseProcessingState",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Set all processing states lower than the one that had a break in value to\nno longer be initialised.  Render the counts into the entity ready for display.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "processingState",
                    "description": "the current processing state",
                    "type": "Array"
                },
                {
                    "name": "stateIndex",
                    "description": "the processing state item that we were on when we triggered a new group header, all\nprocessing states after this need to be finalised",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21157,
            "ngdoc": "function",
            "name": "getRowExpandedStates",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Extract the groupHeaderCache hash, pulling out only the states.\n\nThe example below shows a grid that is grouped by gender then age\n\n<pre>\n  {\n    male: {\n      state: 'expanded',\n      children: {\n        22: { state: 'expanded' },\n        30: { state: 'collapsed' }\n      }\n    },\n    female: {\n      state: 'expanded',\n      children: {\n        28: { state: 'expanded' },\n        55: { state: 'collapsed' }\n      }\n    }\n  }\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the expanded states as a hash",
                "type": "Hash"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21207,
            "ngdoc": "function",
            "name": "applyRowExpandedStates",
            "methodof": "ui.grid.grouping.service:uiGridGroupingService",
            "description": "Take a hash in the format as created by getRowExpandedStates,\nand apply it to the grid.grouping.groupHeaderCache.\n\nTakes a treeSubset, and applies to a treeSubset - so can be called\nrecursively.",
            "params": [
                {
                    "name": "currentNode",
                    "description": "can be grid.grouping.groupHeaderCache, or any of\nthe children of that hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "expandedStates can be the full expanded states, or children\nof that expanded states (which hopefully matches the subset of the groupHeaderCache)",
                "type": "Hash"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21306,
            "ngdoc": "overview",
            "name": "ui.grid.importer",
            "description": "# ui.grid.importer\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides the ability to import data into the grid. It\nuses the column defs to work out which data belongs in which column,\nand creates entities from a configured class (typically a $resource).\n\nIf the rowEdit feature is enabled, it also calls save on those newly\ncreated objects, and then displays any errors in the imported data.\n\nCurrently the importer imports only CSV and json files, although provision has been\nmade to process other file formats, and these can be added over time.\n\nFor json files, the properties within each object in the json must match the column names\n(to put it another way, the importer doesn't process the json, it just copies the objects\nwithin the json into a new instance of the specified object type)\n\nFor CSV import, the default column identification relies on each column in the\nheader row matching a column.name or column.displayName. Optionally, a column identification\ncallback can be used.  This allows matching using other attributes, which is particularly\nuseful if your application has internationalised column headings (i.e. the headings that\nthe user sees don't match the column names).\n\nThe importer makes use of the grid menu as the UI for requesting an\nimport.\n\n<div ui-grid-importer></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21343,
            "ngdoc": "object",
            "name": "ui.grid.importer.constant:uiGridImporterConstants",
            "description": "constants available in importer module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21354,
            "ngdoc": "service",
            "name": "ui.grid.importer.service:uiGridImporterService",
            "description": "Services for importer feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21374,
            "ngdoc": "object",
            "name": "ui.grid.importer.api:PublicApi",
            "description": "Public Api for importer feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21387,
            "ngdoc": "function",
            "name": "importFile",
            "methodof": "ui.grid.importer.api:PublicApi",
            "description": "Imports a file into the grid using the file object\nprovided.  Bypasses the grid menu",
            "params": [
                {
                    "name": "fileObject",
                    "description": "the file we want to import, as a javascript\nFile object",
                    "type": "File"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21424,
            "ngdoc": "object",
            "name": "ui.grid.importer.api:GridOptions",
            "description": "GridOptions for importer feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21432,
            "ngdoc": "property",
            "propertyof": "ui.grid.importer.api:GridOptions",
            "name": "enableImporter",
            "description": "Whether or not importer is enabled.  Automatically set\nto false if the user's browser does not support the required fileApi.\nOtherwise defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21452,
            "ngdoc": "method",
            "name": "importerProcessHeaders",
            "methodof": "ui.grid.importer.api:GridOptions",
            "description": "A callback function that will process headers using custom\nlogic.  Set this callback function if the headers that your user will provide in their\nimport file don't necessarily match the grid header or field names.  This might commonly\noccur where your application is internationalised, and therefore the field names\nthat the user recognises are in a different language than the field names that\nui-grid knows about.\n\nDefaults to the internal `processHeaders` method, which seeks to match using both\ndisplayName and column.name.  Any non-matching columns are discarded.\n\nYour callback routine should respond by processing the header array, and returning an array\nof matching column names.  A null value in any given position means \"don't import this column\"\n\n<pre>\n     gridOptions.importerProcessHeaders: function( headerArray ) {\n       var myHeaderColumns = [];\n       var thisCol;\n       headerArray.forEach( function( value, index ) {\n         thisCol = mySpecialLookupFunction( value );\n         myHeaderColumns.push( thisCol.name );\n       });\n\n       return myHeaderCols;\n     })\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                },
                {
                    "name": "headerArray",
                    "description": "an array of the text from the first row of the csv file,\nwhich you need to match to column.names",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of matching column names, in the same order as the headerArray",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21489,
            "ngdoc": "method",
            "name": "importerHeaderFilter",
            "methodof": "ui.grid.importer.api:GridOptions",
            "description": "A callback function that will filter (usually translate) a single\nheader.  Used when you want to match the passed in column names to the column\ndisplayName after the header filter.\n\nYour callback routine needs to return the filtered header value.\n<pre>\n     gridOptions.importerHeaderFilter: function( displayName ) {\n       return $translate.instant( displayName );\n     })\n</pre>\n\nor:\n<pre>\n     gridOptions.importerHeaderFilter: $translate.instant\n</pre>",
            "params": [
                {
                    "name": "displayName",
                    "description": "the displayName that we'd like to translate",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the translated name",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21514,
            "ngdoc": "method",
            "name": "importerErrorCallback",
            "methodof": "ui.grid.importer.api:GridOptions",
            "description": "A callback function that provides custom error handling, rather\nthan the standard grid behaviour of an alert box and a console message.  You\nmight use this to internationalise the console log messages, or to write to a\ncustom logging routine that returned errors to the server.\n\n<pre>\n     gridOptions.importerErrorCallback: function( grid, errorKey, consoleMessage, context ) {\n       myUserDisplayRoutine( errorKey );\n       myLoggingRoutine( consoleMessage, context );\n     })\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into, may be useful if you're positioning messages\nin some way",
                    "type": "Grid"
                },
                {
                    "name": "errorKey",
                    "description": "one of the i18n keys the importer can return - importer.noHeaders,\nimporter.noObjects, importer.invalidCsv, importer.invalidJson, importer.jsonNotArray",
                    "type": "String"
                },
                {
                    "name": "consoleMessage",
                    "description": "the English console message that importer would have written",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "the context data that importer would have appended to that console message,\noften the file content itself or the element that is in error",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21542,
            "ngdoc": "method",
            "name": "importerDataAddCallback",
            "methodof": "ui.grid.importer.api:GridOptions",
            "description": "A mandatory callback function that adds data to the source data array.  The grid\ngenerally doesn't add rows to the source data array, it is tidier to handle this through a user\ncallback.\n\n<pre>\n     gridOptions.importerDataAddCallback: function( grid, newObjects ) {\n       $scope.myData = $scope.myData.concat( newObjects );\n     })\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into, may be useful in some way",
                    "type": "Grid"
                },
                {
                    "name": "newObjects",
                    "description": "an array of new objects that you should add to your data",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21564,
            "ngdoc": "object",
            "name": "importerNewObject",
            "propertyof": "ui.grid.importer.api:GridOptions",
            "description": "An object on which we call `new` to create each new row before inserting it into\nthe data array.  Typically this would be a $resource entity, which means that if you're using\nthe rowEdit feature, you can directly call save on this entity when the save event is triggered.\n\nDefaults to a vanilla javascript object",
            "example": [
                "\n<pre>\n  gridOptions.importerNewObject = MyRes;\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21581,
            "ngdoc": "property",
            "propertyof": "ui.grid.importer.api:GridOptions",
            "name": "importerShowMenu",
            "description": "Whether or not to show an item in the grid menu.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21590,
            "ngdoc": "method",
            "methodof": "ui.grid.importer.api:GridOptions",
            "name": "importerObjectCallback",
            "description": "A callback that massages the data for each object.  For example,\nyou might have data stored as a code value, but display the decode.  This callback\ncan be used to change the decoded value back into a code.  Defaults to doing nothing.",
            "params": [
                {
                    "name": "grid",
                    "description": "in case you need it",
                    "type": "Grid"
                },
                {
                    "name": "newObject",
                    "description": "the new object as importer has created it, modify it\nthen return the modified version",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the modified object",
                "type": "Object"
            },
            "example": [
                "\n<pre>\n  gridOptions.importerObjectCallback = function ( grid, newObject ) {\n    switch newObject.status {\n      case 'Active':\n        newObject.status = 1;\n        break;\n      case 'Inactive':\n        newObject.status = 2;\n        break;\n    }\n    return newObject;\n  };\n</pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21620,
            "ngdoc": "function",
            "name": "addToMenu",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Adds import menu item to the grid menu,\nallowing the user to request import of a file",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid into which data should be imported",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21645,
            "ngdoc": "function",
            "name": "importThisFile",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Imports the provided file into the grid using the file object\nprovided.  Bypasses the grid menu",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                },
                {
                    "name": "fileObject",
                    "description": "the file we want to import, as returned from the File\njavascript object",
                    "type": "File"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21676,
            "ngdoc": "function",
            "name": "importJson",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Creates a function that imports a json file into the grid.\nThe json data is imported into new objects of type `gridOptions.importerNewObject`,\nand if the rowEdit feature is enabled the rows are marked as dirty",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we want to import into",
                    "type": "Grid"
                },
                {
                    "name": "importFile",
                    "description": "the file that we want to import, as\na FileObject",
                    "type": "FileObject"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21709,
            "ngdoc": "function",
            "name": "parseJson",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Parses a json file, returns the parsed data.\nDisplays an error if file doesn't parse",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid that we want to import into",
                    "type": "Grid"
                },
                {
                    "name": "importFile",
                    "description": "the file that we want to import, as\na FileObject",
                    "type": "FileObject"
                }
            ],
            "return": {
                "description": "array of objects from the imported json",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21739,
            "ngdoc": "function",
            "name": "importCsvClosure",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Creates a function that imports a csv file into the grid\n(allowing it to be used in the reader.onload event)",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid that we want to import into",
                    "type": "Grid"
                },
                {
                    "name": "importFile",
                    "description": "the file that we want to import, as\na file object",
                    "type": "FileObject"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21768,
            "ngdoc": "function",
            "name": "parseCsv",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Parses a csv file into an array of arrays, with the first\narray being the headers, and the remaining arrays being the data.\nThe logic for this comes from https://github.com/thetalecrafter/excel.js/blob/master/src/csv.js,\nwhich is noted as being under the MIT license.  The code is modified to pass the jscs yoda condition\nchecker",
            "params": [
                {
                    "name": "importFile",
                    "description": "the file that we want to import, as a\nfile object",
                    "type": "FileObject"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21788,
            "ngdoc": "function",
            "name": "createCsvObjects",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Converts an array of arrays (representing the csv file)\ninto a set of objects.  Uses the provided `gridOptions.importerNewObject`\nto create the objects, and maps the header row into the individual columns\nusing either `gridOptions.importerProcessHeaders`, or by using a native method\nof matching to either the displayName, column name or column field of\nthe columns in the column defs.  The resulting objects will have attributes\nthat are named based on the column.field or column.name, in that order.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid that we want to import into",
                    "type": "Grid"
                },
                {
                    "name": "importArray",
                    "description": "the data that we want to import, as an array",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21829,
            "ngdoc": "function",
            "name": "processHeaders",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Determines the columns that the header row from\na csv (or other) file represents.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                },
                {
                    "name": "headerRow",
                    "description": "the header row that we wish to match against\nthe column definitions",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of the attribute names that should be used\nfor that column, based on matching the headers or creating the headers",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21867,
            "name": "flattenColumnDefs",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Runs through the column defs and creates a hash of\nthe displayName, name and field, and of each of those values forced to lower case,\nwith each pointing to the field or name\n(whichever is present).  Used to lookup column headers and decide what\nattribute name to give to the resulting field.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                },
                {
                    "name": "columnDefs",
                    "description": "the columnDefs that we should flatten",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the flattened version of the column def information, allowing\nus to look up a value by `flattenedHash[ headerValue ]`",
                "type": "Hash"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21908,
            "ngdoc": "function",
            "name": "addObjects",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Inserts our new objects into the grid data, and\nsets the rows to dirty if the rowEdit feature is being used\n\nDoes this by registering a watch on dataChanges, which essentially\nis waiting on the result of the grid data watch, and downstream processing.\n\nWhen the callback is called, it deregisters itself - we don't want to run\nagain next time data is added.\n\nIf we never get called, we deregister on destroy.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                },
                {
                    "name": "newObjects",
                    "description": "the objects we want to insert into the grid data",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the new object",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21942,
            "ngdoc": "function",
            "name": "newObject",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Makes a new object based on `gridOptions.importerNewObject`,\nor based on an empty object if not present",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the new object",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 21960,
            "ngdoc": "function",
            "name": "alertError",
            "methodof": "ui.grid.importer.service:uiGridImporterService",
            "description": "Provides an internationalised user alert for the failure,\nand logs a console message including diagnostic content.\nOptionally, if the the `gridOptions.importerErrorCallback` routine\nis defined, then calls that instead, allowing user specified error routines",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're importing into",
                    "type": "Grid"
                },
                {
                    "name": "headerRow",
                    "description": "the header row that we wish to match against\nthe column definitions",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22055,
            "ngdoc": "overview",
            "name": "ui.grid.infiniteScroll",
            "description": "#ui.grid.infiniteScroll\n\n <div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\n This module provides infinite scroll functionality to ui-grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22069,
            "ngdoc": "service",
            "name": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "Service for infinite scroll features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22079,
            "ngdoc": "function",
            "name": "initializeGrid",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "This method register events and methods into grid public API",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22097,
            "ngdoc": "object",
            "name": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Public API for infinite scroll feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22107,
            "ngdoc": "event",
            "name": "needLoadMoreData",
            "eventof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "This event fires when scroll reaches bottom percentage of grid\nand needs to load data",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22118,
            "ngdoc": "event",
            "name": "needLoadMoreDataTop",
            "eventof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "This event fires when scroll reaches top percentage of grid\nand needs to load data",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22133,
            "ngdoc": "function",
            "name": "dataLoaded",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Call this function when you have loaded the additional data\nrequested.  You should set scrollUp and scrollDown to indicate\nwhether there are still more pages in each direction.\n\nIf you call dataLoaded without first calling `saveScrollPercentage` then we will\nscroll the user to the start of the newly loaded data, which usually gives a smooth scroll\nexperience, but can give a jumpy experience with large `infiniteScrollRowsFromEnd` values, and\non variable speed internet connections.  Using `saveScrollPercentage` as demonstrated in the tutorial\nshould give a smoother scrolling experience for users.\n\nSee infinite_scroll tutorial for example of usage",
            "params": [
                {
                    "name": "scrollUp",
                    "description": "if set to false flags that there are no more pages upwards, so don't fire\nany more infinite scroll events upward",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "if set to false flags that there are no more pages downwards, so don't\nfire any more infinite scroll events downward",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "a promise that is resolved when the grid scrolling is fully adjusted.  If you're\nplanning to remove pages, you should wait on this promise first, or you'll break the scroll positioning",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22165,
            "ngdoc": "function",
            "name": "resetScroll",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Call this function when you have taken some action that makes the current\nscroll position invalid.  For example, if you're using external sorting and you've resorted\nthen you might reset the scroll, or if you've otherwise substantially changed the data, perhaps\nyou've reused an existing grid for a new data set\n\nYou must tell us whether there is data upwards or downwards after the reset",
            "params": [
                {
                    "name": "scrollUp",
                    "description": "flag that there are pages upwards, fire\ninfinite scroll events upward",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "flag that there are pages downwards, so\nfire infinite scroll events downward",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22188,
            "ngdoc": "function",
            "name": "saveScrollPercentage",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Saves the scroll percentage and number of visible rows before you adjust the data,\nused if you're subsequently going to call `dataRemovedTop` or `dataRemovedBottom`",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22201,
            "ngdoc": "function",
            "name": "dataRemovedTop",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Adjusts the scroll position after you've removed data at the top",
            "params": [
                {
                    "name": "scrollUp",
                    "description": "flag that there are pages upwards, fire\ninfinite scroll events upward",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "flag that there are pages downwards, so\nfire infinite scroll events downward",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22215,
            "ngdoc": "function",
            "name": "dataRemovedBottom",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Adjusts the scroll position after you've removed data at the bottom",
            "params": [
                {
                    "name": "scrollUp",
                    "description": "flag that there are pages upwards, fire\ninfinite scroll events upward",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "flag that there are pages downwards, so\nfire infinite scroll events downward",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22229,
            "ngdoc": "function",
            "name": "setScrollDirections",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "Sets the scrollUp and scrollDown flags, handling nulls and undefined,\nand also sets the grid.suppressParentScroll",
            "params": [
                {
                    "name": "scrollUp",
                    "description": "whether there are pages available up - defaults to false",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "whether there are pages available down - defaults to true",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22252,
            "ngdoc": "object",
            "name": "ui.grid.infiniteScroll.api:GridOptions",
            "description": "GridOptions for infinite scroll feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22260,
            "ngdoc": "object",
            "name": "enableInfiniteScroll",
            "propertyof": "ui.grid.infiniteScroll.api:GridOptions",
            "description": "Enable infinite scrolling for this grid\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22269,
            "ngdoc": "property",
            "name": "infiniteScrollRowsFromEnd",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "This setting controls how close to the end of the dataset a user gets before\nmore data is requested by the infinite scroll, whether scrolling up or down.  This allows you to\n'prefetch' rows before the user actually runs out of scrolling.\n\nNote that if you set this value too high it may give jumpy scrolling behaviour, if you're getting\nthis behaviour you could use the `saveScrollPercentageMethod` right before loading your data, and we'll\npreserve that scroll position\n\n<br> Defaults to 20",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22285,
            "ngdoc": "property",
            "name": "infiniteScrollUp",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Whether you allow infinite scroll up, implying that the first page of data\nyou have displayed is in the middle of your data set.  If set to true then we trigger the\nneedMoreDataTop event when the user hits the top of the scrollbar.\n<br> Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22296,
            "ngdoc": "property",
            "name": "infiniteScrollDown",
            "propertyof": "ui.grid.class:GridOptions",
            "description": "Whether you allow infinite scroll down, implying that the first page of data\nyou have displayed is in the middle of your data set.  If set to true then we trigger the\nneedMoreData event when the user hits the bottom of the scrollbar.\n<br> Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22309,
            "ngdoc": "function",
            "name": "setScrollDirections",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "Sets the scrollUp and scrollDown flags, handling nulls and undefined,\nand also sets the grid.suppressParentScroll",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're operating on",
                    "type": "Grid"
                },
                {
                    "name": "scrollUp",
                    "description": "whether there are pages available up - defaults to false",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "whether there are pages available down - defaults to true",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22328,
            "ngdoc": "function",
            "name": "handleScroll",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "Called whenever the grid scrolls, determines whether the scroll should\ntrigger an infinite scroll request for more data",
            "params": [
                {
                    "name": "args",
                    "description": "the args from the event",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22371,
            "ngdoc": "function",
            "name": "loadData",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection\nand whether there are more pages upwards or downwards.  It also stores the number of rows that we had previously,\nand clears out any saved scroll position so that we know whether or not the user calls `saveScrollPercentage`",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're working on",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22397,
            "ngdoc": "function",
            "name": "adjustScroll",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "Once we are informed that data has been loaded, adjust the scroll position to account for that\naddition and to make things look clean.\n\nIf we're scrolling up we scroll to the first row of the old data set -\nso we're assuming that you would have gotten to the top of the grid (from the 20% need more data trigger) by\nthe time the data comes back.  If we're scrolling down we scoll to the last row of the old data set - so we're\nassuming that you would have gotten to the bottom of the grid (from the 80% need more data trigger) by the time\nthe data comes back.\n\nNeither of these are good assumptions, but making this a smoother experience really requires\nthat trigger to not be a percentage, and to be much closer to the end of the data (say, 5 rows off the end).  Even then\nit'd be better still to actually run into the end.  But if the data takes a while to come back, they may have scrolled\nsomewhere else in the mean-time, in which case they'll get a jump back to the new data.  Anyway, this will do for\nnow, until someone wants to do better.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're working on",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "a promise that is resolved when scrolling has finished",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22461,
            "ngdoc": "function",
            "name": "adjustInfiniteScrollPosition",
            "methodof": "ui.grid.infiniteScroll.service:uiGridInfiniteScrollService",
            "description": "This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're working on",
                    "type": "Grid"
                },
                {
                    "name": "scrollTop",
                    "description": "the position through the grid that we want to scroll to",
                    "type": "Number"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22488,
            "ngdoc": "function",
            "name": "dataRemovedTop",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Adjusts the scroll position after you've removed data at the top. You should\nhave called `saveScrollPercentage` before you remove the data, and if you're doing this in\nresponse to a `needMoreData` you should wait until the promise from `loadData` has resolved\nbefore you start removing data",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're working on",
                    "type": "Grid"
                },
                {
                    "name": "scrollUp",
                    "description": "flag that there are pages upwards, fire\ninfinite scroll events upward",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "flag that there are pages downwards, so\nfire infinite scroll events downward",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22517,
            "ngdoc": "function",
            "name": "dataRemovedBottom",
            "methodof": "ui.grid.infiniteScroll.api:PublicAPI",
            "description": "Adjusts the scroll position after you've removed data at the bottom.  You should\nhave called `saveScrollPercentage` before you remove the data, and if you're doing this in\nresponse to a `needMoreData` you should wait until the promise from `loadData` has resolved\nbefore you start removing data",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're working on",
                    "type": "Grid"
                },
                {
                    "name": "scrollUp",
                    "description": "flag that there are pages upwards, fire\ninfinite scroll events upward",
                    "type": "Boolean"
                },
                {
                    "name": "scrollDown",
                    "description": "flag that there are pages downwards, so\nfire infinite scroll events downward",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22598,
            "ngdoc": "overview",
            "name": "ui.grid.moveColumns",
            "description": "# ui.grid.moveColumns\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides column moving capability to ui.grid. It enables to change the position of columns.\n<div doc-module-components=\"ui.grid.moveColumns\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22612,
            "ngdoc": "service",
            "name": "ui.grid.moveColumns.service:uiGridMoveColumnService",
            "description": "Service for column moving feature.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22630,
            "ngdoc": "object",
            "name": "ui.grid.moveColumns.api:PublicApi",
            "description": "Public Api for column moving feature.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22637,
            "ngdoc": "event",
            "name": "columnPositionChanged",
            "eventof": "ui.grid.moveColumns.api:PublicApi",
            "description": "raised when column is moved\n<pre>\n     gridApi.colMovable.on.columnPositionChanged(scope,function(colDef, originalPosition, newPosition){})\n</pre>",
            "params": [
                {
                    "name": "colDef",
                    "description": "the column that was moved",
                    "type": "Object"
                },
                {
                    "name": "originalPosition",
                    "description": "of the column",
                    "type": "Integer"
                },
                {
                    "name": "finalPosition",
                    "description": "of the column",
                    "type": "Integer"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22655,
            "ngdoc": "method",
            "name": "moveColumn",
            "methodof": "ui.grid.moveColumns.api:PublicApi",
            "description": "Method can be used to change column position.\n<pre>\n     gridApi.colMovable.moveColumn(oldPosition, newPosition)\n</pre>",
            "params": [
                {
                    "name": "originalPosition",
                    "description": "of the column",
                    "type": "Integer"
                },
                {
                    "name": "finalPosition",
                    "description": "of the column",
                    "type": "Integer"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22701,
            "ngdoc": "object",
            "name": "ui.grid.moveColumns.api:GridOptions",
            "description": "Options for configuring the move column feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22708,
            "ngdoc": "object",
            "name": "enableColumnMoving",
            "propertyof": "ui.grid.moveColumns.api:GridOptions",
            "description": "If defined, sets the default value for the colMovable flag on each individual colDefs\nif their individual enableColumnMoving configuration is not defined. Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22719,
            "ngdoc": "object",
            "name": "ui.grid.moveColumns.api:ColumnDef",
            "description": "Column Definition for move column feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22726,
            "ngdoc": "object",
            "name": "enableColumnMoving",
            "propertyof": "ui.grid.moveColumns.api:ColumnDef",
            "description": "Enable column moving for the column.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22736,
            "ngdoc": "method",
            "name": "updateColumnCache",
            "methodof": "ui.grid.moveColumns",
            "description": "Cache the current order of columns, so we can restore them after new columnDefs are defined",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 22745,
            "ngdoc": "method",
            "name": "verifyColumnOrder",
            "methodof": "ui.grid.moveColumns",
            "description": "dataChangeCallback which uses the cached column order to restore the column order\nwhen it is reset by altering the columnDefs array.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23175,
            "ngdoc": "overview",
            "name": "ui.grid.pagination",
            "description": "# ui.grid.pagination\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides pagination support to ui-grid",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23189,
            "ngdoc": "service",
            "name": "ui.grid.pagination.service:uiGridPaginationService",
            "description": "Service for the pagination feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23198,
            "ngdoc": "method",
            "name": "initializeGrid",
            "methodof": "ui.grid.pagination.service:uiGridPaginationService",
            "description": "Attaches the service to a certain grid",
            "params": [
                {
                    "name": "grid",
                    "description": "The grid we want to work with",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23208,
            "ngdoc": "object",
            "name": "ui.grid.pagination.api:PublicAPI",
            "description": "Public API for the pagination feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23217,
            "ngdoc": "event",
            "name": "paginationChanged",
            "eventof": "ui.grid.pagination.api:PublicAPI",
            "description": "This event fires when the pageSize or currentPage changes",
            "params": [
                {
                    "name": "currentPage",
                    "description": "requested page number",
                    "type": "Int"
                },
                {
                    "name": "pageSize",
                    "description": "requested page size",
                    "type": "Int"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23230,
            "ngdoc": "method",
            "name": "getPage",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Returns the number of the current page",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23239,
            "ngdoc": "method",
            "name": "getFirstRowIndex",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Returns the index of the first row of the current page.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23253,
            "ngdoc": "method",
            "name": "getLastRowIndex",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Returns the index of the last row of the current page.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23265,
            "ngdoc": "method",
            "name": "getTotalPages",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Returns the total number of pages",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23282,
            "ngdoc": "method",
            "name": "nextPage",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Moves to the next page, if possible",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23302,
            "ngdoc": "method",
            "name": "previousPage",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Moves to the previous page, if we're not on the first page",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23315,
            "ngdoc": "method",
            "name": "seek",
            "methodof": "ui.grid.pagination.api:PublicAPI",
            "description": "Moves to the requested page",
            "params": [
                {
                    "name": "page",
                    "description": "The number of the page that should be displayed",
                    "type": "Int"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23364,
            "ngdoc": "object",
            "name": "ui.grid.pagination.api:GridOptions",
            "description": "GridOptions for the pagination feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23372,
            "ngdoc": "property",
            "name": "enablePagination",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Enables pagination.  Defaults to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23379,
            "ngdoc": "property",
            "name": "enablePaginationControls",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Enables the paginator at the bottom of the grid. Turn this off if you want to implement your\n             own controls outside the grid.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23387,
            "ngdoc": "property",
            "name": "useExternalPagination",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Disables client side pagination. When true, handle the paginationChanged event and set data\n             and totalItems.  Defaults to `false`",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23396,
            "ngdoc": "property",
            "name": "useCustomPagination",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Disables client-side pagination. When true, handle the `paginationChanged` event and set `data`,\n             `firstRowIndex`, `lastRowIndex`, and `totalItems`.  Defaults to `false`.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23405,
            "ngdoc": "property",
            "name": "totalItems",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Total number of items, set automatically when using client side pagination, but needs set by user\n             for server side pagination",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23415,
            "ngdoc": "property",
            "name": "paginationPageSizes",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Array of page sizes, defaults to `[250, 500, 1000]`",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23424,
            "ngdoc": "property",
            "name": "paginationPageSize",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Page size, defaults to the first item in paginationPageSizes, or 0 if paginationPageSizes is empty",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23437,
            "ngdoc": "property",
            "name": "paginationCurrentPage",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "Current page number, defaults to 1",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23447,
            "ngdoc": "property",
            "name": "paginationTemplate",
            "propertyof": "ui.grid.pagination.api:GridOptions",
            "description": "A custom template for the pager, defaults to `ui-grid/pagination`",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23457,
            "ngdoc": "method",
            "methodof": "ui.grid.pagination.service:uiGridPaginationService",
            "name": "uiGridPaginationService",
            "description": "Raises paginationChanged and calls refresh for client side pagination",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which the pagination changed",
                    "type": "Grid"
                },
                {
                    "name": "currentPage",
                    "description": "requested page number",
                    "type": "Int"
                },
                {
                    "name": "pageSize",
                    "description": "requested page size",
                    "type": "Int"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23669,
            "ngdoc": "overview",
            "name": "ui.grid.pinning",
            "description": "# ui.grid.pinning\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides column pinning to the end user via menu options in the column header\n\n<div doc-module-components=\"ui.grid.pinning\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23702,
            "ngdoc": "object",
            "name": "ui.grid.pinning.api:PublicApi",
            "description": "Public Api for pinning feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23711,
            "ngdoc": "event",
            "name": "columnPin",
            "eventof": "ui.grid.pinning.api:PublicApi",
            "description": "raised when column pin state has changed\n<pre>\n  gridApi.pinning.on.columnPinned(scope, function(colDef){})\n</pre>",
            "params": [
                {
                    "name": "colDef",
                    "description": "the column that was changed",
                    "type": "Object"
                },
                {
                    "name": "container",
                    "description": "the render container the column is in ('left', 'right', '')",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23728,
            "ngdoc": "function",
            "name": "pinColumn",
            "methodof": "ui.grid.pinning.api:PublicApi",
            "description": "pin column left, right, or none\n<pre>\n  gridApi.pinning.pinColumn(col, uiGridPinningConstants.container.LEFT)\n</pre>",
            "params": [
                {
                    "name": "col",
                    "description": "the column being pinned",
                    "type": "GridColumn"
                },
                {
                    "name": "container",
                    "description": "one of the recognised types\nfrom uiGridPinningConstants",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23753,
            "ngdoc": "object",
            "name": "ui.grid.pinning.api:GridOptions",
            "description": "GridOptions for pinning feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23761,
            "ngdoc": "object",
            "name": "enablePinning",
            "propertyof": "ui.grid.pinning.api:GridOptions",
            "description": "Enable pinning for the entire grid.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23769,
            "ngdoc": "object",
            "name": "hidePinLeft",
            "propertyof": "ui.grid.pinning.api:GridOptions",
            "description": "Hide Pin Left for the entire grid.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23777,
            "ngdoc": "object",
            "name": "hidePinRight",
            "propertyof": "ui.grid.pinning.api:GridOptions",
            "description": "Hide Pin Right pinning for the entire grid.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23790,
            "ngdoc": "object",
            "name": "ui.grid.pinning.api:ColumnDef",
            "description": "ColumnDef for pinning feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23798,
            "ngdoc": "object",
            "name": "enablePinning",
            "propertyof": "ui.grid.pinning.api:ColumnDef",
            "description": "Enable pinning for the individual column.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23806,
            "ngdoc": "object",
            "name": "hidePinLeft",
            "propertyof": "ui.grid.pinning.api:ColumnDef",
            "description": "Hide Pin Left for the individual column.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23814,
            "ngdoc": "object",
            "name": "hidePinRight",
            "propertyof": "ui.grid.pinning.api:ColumnDef",
            "description": "Hide Pin Right for the individual column.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23823,
            "ngdoc": "object",
            "name": "pinnedLeft",
            "propertyof": "ui.grid.pinning.api:ColumnDef",
            "description": "Column is pinned left when grid is rendered\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23831,
            "ngdoc": "object",
            "name": "pinnedRight",
            "propertyof": "ui.grid.pinning.api:ColumnDef",
            "description": "Column is pinned right when grid is rendered\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23947,
            "ngdoc": "overview",
            "name": "ui.grid.resizeColumns",
            "description": "# ui.grid.resizeColumns\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module allows columns to be resized.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23966,
            "ngdoc": "object",
            "name": "ui.grid.resizeColumns.api:GridOptions",
            "description": "GridOptions for resizeColumns feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23974,
            "ngdoc": "object",
            "name": "enableColumnResizing",
            "propertyof": "ui.grid.resizeColumns.api:GridOptions",
            "description": "Enable column resizing on the entire grid\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 23993,
            "ngdoc": "object",
            "name": "ui.grid.resizeColumns.api:ColumnDef",
            "description": "ColumnDef for resizeColumns feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24001,
            "ngdoc": "object",
            "name": "enableColumnResizing",
            "propertyof": "ui.grid.resizeColumns.api:ColumnDef",
            "description": "Enable column resizing on an individual column\n<br/>Defaults to GridOptions.enableColumnResizing",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24021,
            "ngdoc": "object",
            "name": "ui.grid.resizeColumns.api:PublicApi",
            "description": "Public Api for column resize feature.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24028,
            "ngdoc": "event",
            "name": "columnSizeChanged",
            "eventof": "ui.grid.resizeColumns.api:PublicApi",
            "description": "raised when column is resized\n<pre>\n     gridApi.colResizable.on.columnSizeChanged(scope,function(colDef, deltaChange){})\n</pre>",
            "params": [
                {
                    "name": "colDef",
                    "description": "the column that was resized",
                    "type": "Object"
                },
                {
                    "name": "delta",
                    "description": "of the column size change",
                    "type": "Integer"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24512,
            "ngdoc": "overview",
            "name": "ui.grid.rowEdit",
            "description": "# ui.grid.rowEdit\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module extends the edit feature to provide tracking and saving of rows\nof data.  The tutorial provides more information on how this feature is best\nused {@link tutorial/205_row_editable here}.\n<br/>\nThis feature depends on usage of the ui-grid-edit feature, and also benefits\nfrom use of ui-grid-cellNav to provide the full spreadsheet-like editing\nexperience",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24533,
            "ngdoc": "object",
            "name": "ui.grid.rowEdit.constant:uiGridRowEditConstants",
            "description": "constants available in row edit module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24542,
            "ngdoc": "service",
            "name": "ui.grid.rowEdit.service:uiGridRowEditService",
            "description": "Services for row editing features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24554,
            "ngdoc": "object",
            "name": "ui.grid.rowEdit.api:PublicApi",
            "description": "Public Api for rowEdit feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24566,
            "ngdoc": "event",
            "eventof": "ui.grid.rowEdit.api:PublicApi",
            "name": "saveRow",
            "description": "raised when a row is ready for saving.  Once your\nrow has saved you may need to use angular.extend to update the\ndata entity with any changed data from your save (for example,\nlock version information if you're using optimistic locking,\nor last update time/user information).\n\nYour method should call setSavePromise somewhere in the body before\nreturning control.  The feature will then wait, with the gridRow greyed out\nwhilst this promise is being resolved.\n\n<pre>\n     gridApi.rowEdit.on.saveRow(scope,function(rowEntity){})\n</pre>\nand somewhere within the event handler:\n<pre>\n     gridApi.rowEdit.setSavePromise( rowEntity, savePromise)\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the options.data element that was edited",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Your saveRow method should return a promise, the\npromise should either be resolved (implying successful save), or\nrejected (implying an error).",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24598,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.api:PublicApi",
            "name": "setSavePromise",
            "description": "Sets the promise associated with the row save, mandatory that\nthe saveRow event handler calls this method somewhere before returning.\n<pre>\n     gridApi.rowEdit.setSavePromise(rowEntity, savePromise)\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "a data row from the grid for which a save has\nbeen initiated",
                    "type": "Object"
                },
                {
                    "name": "savePromise",
                    "description": "the promise that will be resolved when the\nsave is successful, or rejected if the save fails",
                    "type": "Promise"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24616,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.api:PublicApi",
            "name": "getDirtyRows",
            "description": "Returns all currently dirty rows\n<pre>\n     gridApi.rowEdit.getDirtyRows(grid)\n</pre>",
            "return": {
                "description": "An array of gridRows that are currently dirty",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24630,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.api:PublicApi",
            "name": "getErrorRows",
            "description": "Returns all currently errored rows\n<pre>\n     gridApi.rowEdit.getErrorRows(grid)\n</pre>",
            "return": {
                "description": "An array of gridRows that are currently in error",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24644,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.api:PublicApi",
            "name": "flushDirtyRows",
            "description": "Triggers a save event for all currently dirty rows, could\nbe used where user presses a save button or navigates away from the page\n<pre>\n     gridApi.rowEdit.flushDirtyRows(grid)\n</pre>",
            "return": {
                "description": "a promise that represents the aggregate of all\nof the individual save promises - i.e. it will be resolved when all\nthe individual save promises have been resolved.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24662,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.api:PublicApi",
            "name": "setRowsDirty",
            "description": "Sets each of the rows passed in dataRows\nto be dirty.  note that if you have only just inserted the\nrows into your data you will need to wait for a $digest cycle\nbefore the gridRows are present - so often you would wrap this\ncall in a $interval or $timeout\n<pre>\n     $interval( function() {\n       gridApi.rowEdit.setRowsDirty(myDataRows);\n     }, 0, 1);\n</pre>",
            "params": [
                {
                    "name": "dataRows",
                    "description": "the data entities for which the gridRows\nshould be set dirty.",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24684,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.api:PublicApi",
            "name": "setRowsClean",
            "description": "Sets each of the rows passed in dataRows\nto be clean, removing them from the dirty cache and the error cache,\nand clearing the error flag and the dirty flag\n<pre>\n     var gridRows = $scope.gridApi.rowEdit.getDirtyRows();\n     var dataRows = gridRows.map( function( gridRow ) { return gridRow.entity; });\n     $scope.gridApi.rowEdit.setRowsClean( dataRows );\n</pre>",
            "params": [
                {
                    "name": "dataRows",
                    "description": "the data entities for which the gridRows\nshould be set clean.",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24724,
            "ngdoc": "object",
            "name": "ui.grid.rowEdit.api:GridOptions",
            "description": "Options for configuring the rowEdit feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24735,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "saveRow",
            "description": "Returns a function that saves the specified row from the grid,\nand returns a promise",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which dirty rows should be flushed",
                    "type": "Object"
                },
                {
                    "name": "gridRow",
                    "description": "the row that should be saved",
                    "type": "GridRow"
                }
            ],
            "return": {
                "description": "the saveRow function returns a function.  That function\nin turn, when called, returns a promise relating to the save callback",
                "type": "Function"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24769,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "setSavePromise",
            "description": "Sets the promise associated with the row save, mandatory that\nthe saveRow event handler calls this method somewhere before returning.\n<pre>\n     gridApi.rowEdit.setSavePromise(grid, rowEntity)\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which dirty rows should be returned",
                    "type": "Object"
                },
                {
                    "name": "rowEntity",
                    "description": "a data row from the grid for which a save has\nbeen initiated",
                    "type": "Object"
                },
                {
                    "name": "savePromise",
                    "description": "the promise that will be resolved when the\nsave is successful, or rejected if the save fails",
                    "type": "Promise"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24791,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "processSuccessPromise",
            "description": "Returns a function that processes the successful\nresolution of a save promise",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which the promise should be processed",
                    "type": "Object"
                },
                {
                    "name": "gridRow",
                    "description": "the row that has been saved",
                    "type": "GridRow"
                }
            ],
            "return": {
                "description": "the success handling function",
                "type": "Function"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24816,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "processErrorPromise",
            "description": "Returns a function that processes the failed\nresolution of a save promise",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which the promise should be processed",
                    "type": "Object"
                },
                {
                    "name": "gridRow",
                    "description": "the row that is now in error",
                    "type": "GridRow"
                }
            ],
            "return": {
                "description": "the error handling function",
                "type": "Function"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24844,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "removeRow",
            "description": "Removes a row from a cache of rows - either\ngrid.rowEdit.errorRows or grid.rowEdit.dirtyRows.  If the row\nis not present silently does nothing.",
            "params": [
                {
                    "name": "rowArray",
                    "description": "the array from which to remove the row",
                    "type": "Array"
                },
                {
                    "name": "gridRow",
                    "description": "the row that should be removed",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24867,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "isRowPresent",
            "description": "Checks whether a row is already present\nin the given array",
            "params": [
                {
                    "name": "rowArray",
                    "description": "the array in which to look for the row",
                    "type": "Array"
                },
                {
                    "name": "gridRow",
                    "description": "the row that should be looked for",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24887,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "flushDirtyRows",
            "description": "Triggers a save event for all currently dirty rows, could\nbe used where user presses a save button or navigates away from the page\n<pre>\n     gridApi.rowEdit.flushDirtyRows(grid)\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which dirty rows should be flushed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a promise that represents the aggregate of all\nof the individual save promises - i.e. it will be resolved when all\nthe individual save promises have been resolved.",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24914,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "endEditCell",
            "description": "Receives an afterCellEdit event from the edit function,\nand sets flags as appropriate.  Only the rowEntity parameter\nis processed, although other params are available.  Grid\nis automatically provided by the gridApi.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the data entity for which the cell\nwas edited",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24947,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "beginEditCell",
            "description": "Receives a beginCellEdit event from the edit function,\nand cancels any rowEditSaveTimers if present, as the user is still editing\nthis row.  Only the rowEntity parameter\nis processed, although other params are available.  Grid\nis automatically provided by the gridApi.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the data entity for which the cell\nediting has commenced",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24968,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "cancelEditCell",
            "description": "Receives a cancelCellEdit event from the edit function,\nand if the row was already dirty, restarts the save timer.  If the row\nwas not already dirty, then it's not dirty now either and does nothing.\n\nOnly the rowEntity parameter\nis processed, although other params are available.  Grid\nis automatically provided by the gridApi.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the data entity for which the cell\nediting was cancelled",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 24992,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "navigate",
            "description": "cellNav tells us that the selected cell has changed.  If\nthe new row had a timer running, then stop it similar to in a beginCellEdit\ncall.  If the old row is dirty and not the same as the new row, then\nstart a timer on it.",
            "params": [
                {
                    "name": "newRowCol",
                    "description": "the row and column that were selected",
                    "type": "Object"
                },
                {
                    "name": "oldRowCol",
                    "description": "the row and column that was left",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25016,
            "ngdoc": "property",
            "propertyof": "ui.grid.rowEdit.api:GridOptions",
            "name": "rowEditWaitInterval",
            "description": "How long the grid should wait for another change on this row\nbefore triggering a save (in milliseconds).  If set to -1, then saves are\nnever triggered by timer (implying that the user will call flushDirtyRows()\nmanually)",
            "example": [
                "\nSetting the wait interval to 4 seconds\n<pre>\n  $scope.gridOptions = { rowEditWaitInterval: 4000 }\n</pre>\n"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25032,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "considerSetTimer",
            "description": "Consider setting a timer on this row (if it is dirty).  if there is a timer running\non the row and the row isn't currently saving, cancel it, using cancelTimer, then if the row is\ndirty and not currently saving then set a new timer",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which we are processing",
                    "type": "Object"
                },
                {
                    "name": "gridRow",
                    "description": "the row for which the timer should be adjusted",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25055,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "cancelTimer",
            "description": "cancel the $interval for any timer running on this row\nthen delete the timer itself",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which we are processing",
                    "type": "Object"
                },
                {
                    "name": "gridRow",
                    "description": "the row for which the timer should be adjusted",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25073,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "setRowsDirty",
            "description": "Sets each of the rows passed in dataRows\nto be dirty.  note that if you have only just inserted the\nrows into your data you will need to wait for a $digest cycle\nbefore the gridRows are present - so often you would wrap this\ncall in a $interval or $timeout\n<pre>\n     $interval( function() {\n       gridApi.rowEdit.setRowsDirty( myDataRows);\n     }, 0, 1);\n</pre>",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which rows should be set dirty",
                    "type": "Object"
                },
                {
                    "name": "dataRows",
                    "description": "the data entities for which the gridRows\nshould be set dirty.",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25116,
            "ngdoc": "method",
            "methodof": "ui.grid.rowEdit.service:uiGridRowEditService",
            "name": "setRowsClean",
            "description": "Sets each of the rows passed in dataRows\nto be clean, clearing the dirty flag and the error flag, and removing\nthe rows from the dirty and error caches.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid for which rows should be set clean",
                    "type": "Object"
                },
                {
                    "name": "dataRows",
                    "description": "the data entities for which the gridRows\nshould be set clean.",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25223,
            "ngdoc": "overview",
            "name": "ui.grid.saveState",
            "description": "# ui.grid.saveState\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides the ability to save the grid state, and restore\nit when the user returns to the page.\n\nNo UI is provided, the caller should provide their own UI/buttons\nas appropriate. Usually the navigate events would be used to save\nthe grid state and restore it.\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.save-state\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25247,
            "ngdoc": "object",
            "name": "ui.grid.saveState.constant:uiGridSaveStateConstants",
            "description": "constants available in save state module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25258,
            "ngdoc": "service",
            "name": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Services for saveState feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25275,
            "ngdoc": "object",
            "name": "ui.grid.saveState.api:PublicApi",
            "description": "Public Api for saveState feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25288,
            "ngdoc": "function",
            "name": "save",
            "methodof": "ui.grid.saveState.api:PublicApi",
            "description": "Packages the current state of the grid into\nan object, and provides it to the user for saving",
            "return": {
                "description": "the state as a javascript object that can be saved",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25299,
            "ngdoc": "function",
            "name": "restore",
            "methodof": "ui.grid.saveState.api:PublicApi",
            "description": "Restores the provided state into the grid",
            "params": [
                {
                    "name": "$scope",
                    "description": "a scope that we can broadcast on",
                    "type": "Scope"
                },
                {
                    "name": "state",
                    "description": "the state that should be restored into the grid",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise created by refresh",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25323,
            "ngdoc": "object",
            "name": "ui.grid.saveState.api:GridOptions",
            "description": "GridOptions for saveState feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25330,
            "ngdoc": "object",
            "name": "saveWidths",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the current column widths.  Note that unless\nyou've provided the user with some way to resize their columns (say\nthe resize columns feature), then this makes little sense.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25340,
            "ngdoc": "object",
            "name": "saveOrder",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Restore the current column order.  Note that unless\nyou've provided the user with some way to reorder their columns (for\nexample the move columns feature), this makes little sense.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25350,
            "ngdoc": "object",
            "name": "saveScroll",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the current scroll position.  Note that this\nis saved as the percentage of the grid scrolled - so if your\nuser returns to a grid with a significantly different number of\nrows (perhaps some data has been deleted) then the scroll won't\nactually show the same rows as before.  If you want to scroll to\na specific row then you should instead use the saveFocus option, which\nis the default.\n\nNote that this element will only be saved if the cellNav feature is\nenabled\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25367,
            "ngdoc": "object",
            "name": "saveFocus",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the current focused cell.  On returning\nto this focused cell we'll also scroll.  This option is\npreferred to the saveScroll option, so is set to true by\ndefault.  If saveScroll is set to true then this option will\nbe disabled.\n\nBy default this option saves the current row number and column\nnumber, and returns to that row and column.  However, if you define\na saveRowIdentity function, then it will return you to the currently\nselected column within that row (in a business sense - so if some\nrows have been deleted, it will still find the same data, presuming it\nstill exists in the list.  If it isn't in the list then it will instead\nreturn to the same row number - i.e. scroll percentage)\n\nNote that this option will do nothing if the cellNav\nfeature is not enabled.\n\n<br/>Defaults to true (unless saveScroll is true)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25391,
            "ngdoc": "object",
            "name": "saveRowIdentity",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "A function that can be called, passing in a rowEntity,\nand that will return a unique id for that row.  This might simply\nreturn the `id` field from that row (if you have one), or it might\nconcatenate some fields within the row to make a unique value.\n\nThis value will be used to find the same row again and set the focus\nto it, if it exists when we return.\n\n<br/>Defaults to undefined",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25405,
            "ngdoc": "object",
            "name": "saveVisible",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save whether or not columns are visible.\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25414,
            "ngdoc": "object",
            "name": "saveSort",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the current sort state for each column\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25423,
            "ngdoc": "object",
            "name": "saveFilter",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the current filter state for each column\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25432,
            "ngdoc": "object",
            "name": "saveSelection",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the currently selected rows.  If the `saveRowIdentity` callback\nis defined, then it will save the id of the row and select that.  If not, then\nit will attempt to select the rows by row number, which will give the wrong results\nif the data set has changed in the mean-time.\n\nNote that this option only does anything\nif the selection feature is enabled.\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25447,
            "ngdoc": "object",
            "name": "saveGrouping",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the grouping configuration.  If set to true and the\ngrouping feature is not enabled then does nothing.\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25457,
            "ngdoc": "object",
            "name": "saveGroupingExpandedStates",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the grouping row expanded states.  If set to true and the\ngrouping feature is not enabled then does nothing.\n\nThis can be quite a bit of data, in many cases you wouldn't want to save this\ninformation.\n\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25470,
            "ngdoc": "object",
            "name": "savePinning",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save pinning state for columns.\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25479,
            "ngdoc": "object",
            "name": "saveTreeView",
            "propertyof": "ui.grid.saveState.api:GridOptions",
            "description": "Save the treeView configuration.  If set to true and the\ntreeView feature is not enabled then does nothing.\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25493,
            "ngdoc": "function",
            "name": "save",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the current grid state into an object, and\npasses that object back to the caller",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the state ready to be saved",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25516,
            "ngdoc": "function",
            "name": "restore",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Applies the provided state to the grid",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "$scope",
                    "description": "a scope that we can broadcast on",
                    "type": "Scope"
                },
                {
                    "name": "state",
                    "description": "the state we'd like to restore",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the promise created by refresh",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25556,
            "ngdoc": "function",
            "name": "saveColumns",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the column setup, including sort, filters, ordering,\npinning and column widths.\n\nWorks through the current columns, storing them in order.  Stores the\ncolumn name, then the visible flag, width, sort and filters for each column.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the columns state ready to be saved",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25612,
            "ngdoc": "function",
            "name": "saveScrollFocus",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the currently scroll or focus.\n\nIf cellNav isn't present then does nothing - we can't return\nto the scroll position without cellNav anyway.\n\nIf the cellNav module is present, and saveFocus is true, then\nit saves the currently focused cell.  If rowIdentity is present\nthen saves using rowIdentity, otherwise saves visibleRowNum.\n\nIf the cellNav module is not present, and saveScroll is true, then\nit approximates the current scroll row and column, and saves that.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the selection state ready to be saved",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25665,
            "ngdoc": "function",
            "name": "saveSelection",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the currently selected rows, if the selection feature is enabled",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the selection state ready to be saved",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25686,
            "ngdoc": "function",
            "name": "saveGrouping",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the grouping state, if the grouping feature is enabled",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the grouping state ready to be saved",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25703,
            "ngdoc": "function",
            "name": "savePagination",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the pagination state, if the pagination feature is enabled",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the pagination state ready to be saved",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25723,
            "ngdoc": "function",
            "name": "saveTreeView",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Saves the tree view state, if the tree feature is enabled",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to save",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the tree view state ready to be saved",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25740,
            "ngdoc": "function",
            "name": "getRowVal",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Helper function that gets either the rowNum or\nthe saveRowIdentity, given a gridRow",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid the row is in",
                    "type": "Grid"
                },
                {
                    "name": "gridRow",
                    "description": "the row we want the rowNum for",
                    "type": "GridRow"
                }
            ],
            "return": {
                "description": "an object containing { identity: true/false, row: rowNumber/rowIdentity }",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25768,
            "ngdoc": "function",
            "name": "restoreColumns",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Restores the columns, including order, visible, width,\npinning, sort and filters.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "columnsState",
                    "description": "the list of columns we had before, with their state",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25836,
            "ngdoc": "function",
            "name": "restoreScrollFocus",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Scrolls to the position that was saved.  If focus is true, then\nsets focus to the specified row/col.  If focus is false, then scrolls to the\nspecified row/col.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "$scope",
                    "description": "a scope that we can broadcast on",
                    "type": "Scope"
                },
                {
                    "name": "scrollFocusState",
                    "description": "the scroll/focus state ready to be restored",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25881,
            "ngdoc": "function",
            "name": "restoreSelection",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Selects the rows that are provided in the selection\nstate.  If you are using `saveRowIdentity` and more than one row matches the identity\nfunction then only the first is selected.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "selectionState",
                    "description": "the selection state ready to be restored",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25913,
            "ngdoc": "function",
            "name": "restoreGrouping",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Restores the grouping configuration, if the grouping feature\nis enabled.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "groupingState",
                    "description": "the grouping state ready to be restored",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25930,
            "ngdoc": "function",
            "name": "restoreTreeView",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Restores the tree view configuration, if the tree view feature\nis enabled.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "treeViewState",
                    "description": "the tree view state ready to be restored",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25947,
            "ngdoc": "function",
            "name": "restorePagination",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Restores the pagination information, if pagination is enabled.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "pagination",
                    "description": "the pagination object to be restored",
                    "type": "Object",
                    "props": [
                        {
                            "name": "paginationCurrentPage",
                            "description": "the page number to restore",
                            "type": "Number"
                        },
                        {
                            "name": "paginationPageSize",
                            "description": "the number of items displayed per page",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 25966,
            "ngdoc": "function",
            "name": "findRowByIdentity",
            "methodof": "ui.grid.saveState.service:uiGridSaveStateService",
            "description": "Finds a row given it's identity value, returns the first found row\nif any are found, otherwise returns null if no rows are found.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid whose state we'd like to restore",
                    "type": "Grid"
                },
                {
                    "name": "rowVal",
                    "description": "the row we'd like to find",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the found row, or null if none found",
                "type": "GridRow"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26055,
            "ngdoc": "overview",
            "name": "ui.grid.selection",
            "description": "# ui.grid.selection\nThis module provides row selection\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\n<div doc-module-components=\"ui.grid.selection\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26070,
            "ngdoc": "object",
            "name": "ui.grid.selection.constant:uiGridSelectionConstants",
            "description": "constants available in selection module",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26085,
            "ngdoc": "object",
            "name": "ui.grid.selection.api:GridRow",
            "description": "GridRow prototype functions added for selection",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26092,
            "ngdoc": "object",
            "name": "enableSelection",
            "propertyof": "ui.grid.selection.api:GridRow",
            "description": "Enable row selection for this row, only settable by internal code.\n\nThe grouping feature, for example, might set group header rows to not be selectable.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26102,
            "ngdoc": "object",
            "name": "isSelected",
            "propertyof": "ui.grid.selection.api:GridRow",
            "description": "Selected state of row.  Should be readonly. Make any changes to selected state using setSelected().\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26111,
            "ngdoc": "function",
            "name": "setSelected",
            "methodof": "ui.grid.selection.api:GridRow",
            "description": "Sets the isSelected property and updates the selectedCount\nChanges to isSelected state should only be made via this function",
            "params": [
                {
                    "name": "selected",
                    "description": "value to set",
                    "type": "Bool"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26130,
            "ngdoc": "service",
            "name": "ui.grid.selection.service:uiGridSelectionService",
            "description": "Services for selection features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26144,
            "ngdoc": "object",
            "name": "ui.grid.selection.grid:selection",
            "description": "Grid properties and functions added for selection",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26155,
            "ngdoc": "object",
            "name": "selectedCount",
            "propertyof": "ui.grid.selection.grid:selection",
            "description": "Current count of selected rows",
            "example": [
                "\nvar count = grid.selection.selectedCount"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26167,
            "ngdoc": "object",
            "name": "ui.grid.selection.api:PublicApi",
            "description": "Public Api for selection feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26176,
            "ngdoc": "event",
            "name": "rowSelectionChanged",
            "eventof": "ui.grid.selection.api:PublicApi",
            "description": "is raised after the row.isSelected state is changed",
            "params": [
                {
                    "name": "row",
                    "description": "the row that was selected/deselected",
                    "type": "GridRow"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26186,
            "ngdoc": "event",
            "name": "rowSelectionChangedBatch",
            "eventof": "ui.grid.selection.api:PublicApi",
            "description": "is raised after the row.isSelected state is changed\nin bulk, if the `enableSelectionBatchEvent` option is set to true\n(which it is by default).  This allows more efficient processing\nof bulk events.",
            "params": [
                {
                    "name": "rows",
                    "description": "the rows that were selected/deselected",
                    "type": "Array"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26203,
            "ngdoc": "function",
            "name": "toggleRowSelection",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Toggles data row as selected or unselected",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26217,
            "ngdoc": "function",
            "name": "selectRow",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Select the data row",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26231,
            "ngdoc": "function",
            "name": "selectRowByVisibleIndex",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Select the specified row by visible index (i.e. if you\nspecify row 0 you'll get the first visible row selected).  In this context\nvisible means of those rows that are theoretically visible (i.e. not filtered),\nrather than rows currently rendered on the screen.",
            "params": [
                {
                    "name": "index",
                    "description": "index within the rowsVisible array",
                    "type": "Number"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26248,
            "ngdoc": "function",
            "name": "unSelectRow",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "UnSelect the data row",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26262,
            "ngdoc": "function",
            "name": "selectAllRows",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Selects all rows.  Does nothing if multiSelect = false",
            "params": [
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26284,
            "ngdoc": "function",
            "name": "selectAllVisibleRows",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Selects all visible rows.  Does nothing if multiSelect = false",
            "params": [
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26313,
            "ngdoc": "function",
            "name": "clearSelectedRows",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Unselects all rows",
            "params": [
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26323,
            "ngdoc": "function",
            "name": "getSelectedRows",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "returns all selectedRow's entity references",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26334,
            "ngdoc": "function",
            "name": "getSelectedGridRows",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "returns all selectedRow's as gridRows",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26343,
            "ngdoc": "function",
            "name": "getSelectedCount",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "returns the number of rows selected",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26352,
            "ngdoc": "function",
            "name": "setMultiSelect",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Sets the current gridOption.multiSelect to true or false",
            "params": [
                {
                    "name": "multiSelect",
                    "description": "true to allow multiple rows",
                    "type": "Bool"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26362,
            "ngdoc": "function",
            "name": "setModifierKeysToMultiSelect",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Sets the current gridOption.modifierKeysToMultiSelect to true or false",
            "params": [
                {
                    "name": "modifierKeysToMultiSelect",
                    "description": "true to only allow multiple rows when using ctrlKey or shiftKey is used",
                    "type": "Bool"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26372,
            "ngdoc": "function",
            "name": "getSelectAllState",
            "methodof": "ui.grid.selection.api:PublicApi",
            "description": "Returns whether or not the selectAll checkbox is currently ticked.  The\ngrid doesn't automatically select rows when you add extra data - so when you add data\nyou need to explicitly check whether the selectAll is set, and then call setVisible rows\nif it is",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26397,
            "ngdoc": "object",
            "name": "ui.grid.selection.api:GridOptions",
            "description": "GridOptions for selection feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26405,
            "ngdoc": "object",
            "name": "enableRowSelection",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Enable row selection for entire grid.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26413,
            "ngdoc": "object",
            "name": "multiSelect",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Enable multiple row selection for entire grid\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26421,
            "ngdoc": "object",
            "name": "noUnselect",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Prevent a row from being unselected.  Works in conjunction\nwith `multiselect = false` and `gridApi.selection.selectRow()` to allow\nyou to create a single selection only grid - a row is always selected, you\ncan only select different rows, you can't unselect the row.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26432,
            "ngdoc": "object",
            "name": "modifierKeysToMultiSelect",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Enable multiple row selection only when using the ctrlKey or shiftKey. Requires multiSelect to be true.\n<br/>Defaults to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26440,
            "ngdoc": "object",
            "name": "enableRowHeaderSelection",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Enable a row header to be used for selection\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26448,
            "ngdoc": "object",
            "name": "enableFullRowSelection",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Enable selection by clicking anywhere on the row.  Defaults to\nfalse if `enableRowHeaderSelection` is true, otherwise defaults to false.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26458,
            "ngdoc": "object",
            "name": "enableSelectAll",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Enable the select all checkbox at the top of the selectionRowHeader\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26466,
            "ngdoc": "object",
            "name": "enableSelectionBatchEvent",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "If selected rows are changed in bulk, either via the API or\nvia the selectAll checkbox, then a separate event is fired.  Setting this\noption to false will cause the rowSelectionChanged event to be called multiple times\ninstead\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26477,
            "ngdoc": "object",
            "name": "selectionRowHeaderWidth",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "can be used to set a custom width for the row header selection column\n<br/>Defaults to 30px",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26486,
            "ngdoc": "object",
            "name": "enableFooterTotalSelected",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Shows the total number of selected items in footer if true.\n<br/>Defaults to true.\n<br/>GridOptions.showGridFooter must also be set to true.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26496,
            "ngdoc": "object",
            "name": "isRowSelectable",
            "propertyof": "ui.grid.selection.api:GridOptions",
            "description": "Makes it possible to specify a method that evaluates for each row and sets its \"enableSelection\" property.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26506,
            "ngdoc": "function",
            "name": "toggleRowSelection",
            "methodof": "ui.grid.selection.service:uiGridSelectionService",
            "description": "Toggles row as selected or unselected",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "row to select or deselect",
                    "type": "GridRow"
                },
                {
                    "name": "event",
                    "description": "object if resulting from event",
                    "type": "Event"
                },
                {
                    "name": "multiSelect",
                    "description": "if false, only one row at time can be selected",
                    "type": "Bool"
                },
                {
                    "name": "noUnselect",
                    "description": "if true then rows cannot be unselected",
                    "type": "Bool"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26549,
            "ngdoc": "function",
            "name": "shiftSelect",
            "methodof": "ui.grid.selection.service:uiGridSelectionService",
            "description": "selects a group of rows from the last selected row using the shift key",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "clicked",
                    "description": "row",
                    "type": "GridRow"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                },
                {
                    "name": "multiSelect",
                    "description": "if false, does nothing this is for multiSelect only",
                    "type": "Bool"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26586,
            "ngdoc": "function",
            "name": "getSelectedRows",
            "methodof": "ui.grid.selection.service:uiGridSelectionService",
            "description": "Returns all the selected rows",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26599,
            "ngdoc": "function",
            "name": "clearSelectedRows",
            "methodof": "ui.grid.selection.service:uiGridSelectionService",
            "description": "Clears all selected rows",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26620,
            "ngdoc": "function",
            "name": "decideRaiseSelectionEvent",
            "methodof": "ui.grid.selection.service:uiGridSelectionService",
            "description": "Decides whether to raise a single event or a batch event",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "row that has changed",
                    "type": "GridRow"
                },
                {
                    "name": "changedRows",
                    "description": "an array to which we can append the changed",
                    "type": "Array"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event\nrow if we're doing batch events",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 26639,
            "ngdoc": "function",
            "name": "raiseSelectionEvent",
            "methodof": "ui.grid.selection.service:uiGridSelectionService",
            "description": "Decides whether we need to raise a batch event, and\nraises it if we do.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "changedRows",
                    "description": "an array of changed rows, only populated",
                    "type": "Array"
                },
                {
                    "name": "event",
                    "description": "object if raised from an event\nif we're doing batch events",
                    "type": "Event"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27060,
            "ngdoc": "overview",
            "name": "ui.grid.treeBase",
            "description": "# ui.grid.treeBase\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides base tree handling functions that are shared by other features, notably grouping\nand treeView.  It provides a tree view of the data, with nodes in that\ntree and leaves.\n\nDesign information:\n-------------------\n\nThe raw data that is provided must come with a $$treeLevel on any non-leaf node.  Grouping will create\nthese on all the group header rows, treeView will expect these to be set in the raw data by the user.\nTreeBase will run a rowsProcessor that:\n - builds `treeBase.tree` out of the provided rows\n - permits a recursive sort of the tree\n - maintains the expand/collapse state of each node\n - provides the expand/collapse all button and the expand/collapse buttons\n - maintains the count of children for each node\n\nEach row is updated with a link to the tree node that represents it.  Refer {@link ui.grid.treeBase.grid:treeBase.tree tree documentation}\nfor information.\n\n TreeBase adds information to the rows\n - treeLevel: if present and > -1 tells us the level (level 0 is the top level)\n - treeNode: pointer to the node in the grid.treeBase.tree that refers\n   to this row, allowing us to manipulate the state\n\nSince the logic is baked into the rowsProcessors, it should get triggered whenever\nrow order or filtering or anything like that is changed.  We recall the expanded state\nacross invocations of the rowsProcessors by the reference to the treeNode on the individual\nrows.  We rebuild the tree itself quite frequently, when we do this we use the saved treeNodes to\nget the state, but we overwrite the other data in that treeNode.\n\nBy default rows are collapsed, which means all data rows have their visible property\nset to false, and only level 0 group rows are set to visible.\n\nWe rely on the rowsProcessors to do the actual expanding and collapsing, so we set the flags we want into\ngrid.treeBase.tree, then call refresh.  This is because we can't easily change the visible\nrow cache without calling the processors, and once we've built the logic into the rowProcessors we may as\nwell use it all the time.\n\nTree base provides sorting (on non-grouped columns).\n\nSorting works in two passes.  The standard sorting is performed for any columns that are important to building\nthe tree (for example, any grouped columns).  Then after the tree is built, a recursive tree sort is performed\nfor the remaining sort columns (including the original sort) - these columns are sorted within each tree level\n(so all the level 1 nodes are sorted, then all the level 2 nodes within each level 1 node etc).\n\nTo achieve this we make use of the `ignoreSort` property on the sort configuration.  The parent feature (treeView or grouping)\nmust provide a rowsProcessor that runs with very low priority (typically in the 60-65 range), and that sets\nthe `ignoreSort`on any sort that it wants to run on the tree.  TreeBase will clear the ignoreSort on all sorts - so it\nwill turn on any sorts that haven't run.  It will then call a recursive sort on the tree.\n\nTree base provides treeAggregation.  It checks the treeAggregation configuration on each column, and aggregates based on\nthe logic provided as it builds the tree. Footer aggregation from the uiGrid core should not be used with treeBase aggregation,\nsince it operates on all visible rows, as opposed to to leaf nodes only. Setting `showColumnFooter: true` will show the\ntreeAggregations in the column footer.  Aggregation information will be collected in the format:\n\n```\n  {\n    type: 'count',\n    value: 4,\n    label: 'count: ',\n    rendered: 'count: 4'\n  }\n```\n\nA callback is provided to format the value once it is finalised (aka a valueFilter).\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.treeBase\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27143,
            "ngdoc": "object",
            "name": "ui.grid.treeBase.constant:uiGridTreeBaseConstants",
            "description": "constants available in treeBase module.\n\nThese constants are manually copied into grouping and treeView,\nas I haven't found a way to simply include them, and it's not worth\ninvesting time in for something that changes very infrequently.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27168,
            "ngdoc": "service",
            "name": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Services for treeBase feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27174,
            "ngdoc": "object",
            "name": "ui.grid.treeBase.api:ColumnDef",
            "description": "ColumnDef for tree feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27190,
            "ngdoc": "object",
            "name": "ui.grid.treeBase.grid:treeBase",
            "description": "Grid properties and functions added for treeBase",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27198,
            "ngdoc": "property",
            "propertyof": "ui.grid.treeBase.grid:treeBase",
            "name": "numberLevels",
            "description": "Total number of tree levels currently used, calculated by the rowsProcessor by\nretaining the highest tree level it sees",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27208,
            "ngdoc": "property",
            "propertyof": "ui.grid.treeBase.grid:treeBase",
            "name": "expandAll",
            "description": "Whether or not the expandAll box is selected",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27217,
            "ngdoc": "property",
            "propertyof": "ui.grid.treeBase.grid:treeBase",
            "name": "tree",
            "description": "Tree represented as a nested array that holds the state of each node, along with a\npointer to the row.  The array order is material - we will display the children in the order\nthey are stored in the array\n\nEach node stores:\n\n  - the state of this node\n  - an array of children of this node\n  - a pointer to the parent of this node (reverse pointer, allowing us to walk up the tree)\n  - the number of children of this node\n  - aggregation information calculated from the nodes\n\n```\n  [{\n    state: 'expanded',\n    row: <reference to row>,\n    parentRow: null,\n    aggregations: [{\n      type: 'count',\n      col: <gridCol>,\n      value: 2,\n      label: 'count: ',\n      rendered: 'count: 2'\n    }],\n    children: [\n      {\n        state: 'expanded',\n        row: <reference to row>,\n        parentRow: <reference to row>,\n        aggregations: [{\n          type: 'count',\n          col: '<gridCol>,\n          value: 4,\n          label: 'count: ',\n          rendered: 'count: 4'\n        }],\n        children: [\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> }\n        ]\n      },\n      {\n        state: 'collapsed',\n        row: <reference to row>,\n        parentRow: <reference to row>,\n        aggregations: [{\n          type: 'count',\n          col: <gridCol>,\n          value: 3,\n          label: 'count: ',\n          rendered: 'count: 3'\n        }],\n        children: [\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> }\n        ]\n      }\n    ]\n  }, {<another level 0 node maybe>} ]\n```\nMissing state values are false - meaning they aren't expanded.\n\nThis is used because the rowProcessors run every time the grid is refreshed, so\nwe'd lose the expanded state every time the grid was refreshed.  This instead gives\nus a reliable lookup that persists across rowProcessors.\n\nThis tree is rebuilt every time we run the rowsProcessors.  Since each row holds a pointer\nto it's tree node we can persist expand/collapse state across calls to rowsProcessor, we discard\nall transient information on the tree (children, childCount) and recalculate it",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27306,
            "ngdoc": "object",
            "name": "ui.grid.treeBase.api:PublicApi",
            "description": "Public Api for treeBase feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27315,
            "ngdoc": "event",
            "eventof": "ui.grid.treeBase.api:PublicApi",
            "name": "rowExpanded",
            "description": "raised whenever a row is expanded.  If you are dynamically\nrendering your tree you can listen to this event, and then retrieve\nthe children of this row and load them into the grid data.\n\nWhen the data is loaded the grid will automatically refresh to show these new rows\n\n<pre>\n     gridApi.treeBase.on.rowExpanded(scope,function(row){})\n</pre>",
            "params": [
                {
                    "name": "row",
                    "description": "the row that was expanded.  You can also\nretrieve the grid from this row with row.grid",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27333,
            "ngdoc": "event",
            "eventof": "ui.grid.treeBase.api:PublicApi",
            "name": "rowCollapsed",
            "description": "raised whenever a row is collapsed.  Doesn't really have\na purpose at the moment, included for symmetry\n\n<pre>\n     gridApi.treeBase.on.rowCollapsed(scope,function(row){})\n</pre>",
            "params": [
                {
                    "name": "row",
                    "description": "the row that was collapsed.  You can also\nretrieve the grid from this row with row.grid",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27352,
            "ngdoc": "function",
            "name": "expandAllRows",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "Expands all tree rows",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27362,
            "ngdoc": "function",
            "name": "collapseAllRows",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "collapse all tree rows",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27372,
            "ngdoc": "function",
            "name": "toggleRowTreeState",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "call expand if the row is collapsed, collapse if it is expanded",
            "params": [
                {
                    "name": "row",
                    "description": "the row you wish to toggle",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27383,
            "ngdoc": "function",
            "name": "expandRow",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "expand the immediate children of the specified row",
            "params": [
                {
                    "name": "row",
                    "description": "the row you wish to expand",
                    "type": "GridRow"
                },
                {
                    "name": "recursive",
                    "description": "true if you wish to expand the row's ancients",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27395,
            "ngdoc": "function",
            "name": "expandRowChildren",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "expand all children of the specified row",
            "params": [
                {
                    "name": "row",
                    "description": "the row you wish to expand",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27406,
            "ngdoc": "function",
            "name": "collapseRow",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "collapse  the specified row.  When\nyou expand the row again, all grandchildren will retain their state",
            "params": [
                {
                    "name": "row",
                    "description": "the row you wish to collapse",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27418,
            "ngdoc": "function",
            "name": "collapseRowChildren",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "collapse all children of the specified row.  When\nyou expand the row again, all grandchildren will be collapsed",
            "params": [
                {
                    "name": "row",
                    "description": "the row you wish to collapse children for",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27430,
            "ngdoc": "function",
            "name": "getTreeState",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "Get the tree state for this grid,\nused by the saveState feature\nReturned treeState as an object\n  `{ expandedState: { uid: 'expanded', uid: 'collapsed' } }`\nwhere expandedState is a hash of row uid and the current expanded state",
            "return": {
                "description": "tree state\n\nTODO - this needs work - we need an identifier that persists across instantiations,\nnot uid.  This really means we need a row identity defined, but that won't work for\ngrouping.  Perhaps this needs to be moved up to treeView and grouping, rather than\nbeing in base.",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27451,
            "ngdoc": "function",
            "name": "setTreeState",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "Set the expanded states of the tree",
            "params": [
                {
                    "name": "config",
                    "description": "the config you want to apply, in the format\nprovided by getTreeState",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27463,
            "ngdoc": "function",
            "name": "getRowChildren",
            "methodof": "ui.grid.treeBase.api:PublicApi",
            "description": "Get the children of the specified row",
            "params": [
                {
                    "name": "row",
                    "description": "the row you want the children of",
                    "type": "GridRow"
                }
            ],
            "return": {
                "description": "array of children of this row, the children\nare all gridRows",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27489,
            "ngdoc": "object",
            "name": "ui.grid.treeBase.api:GridOptions",
            "description": "GridOptions for treeBase feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27497,
            "ngdoc": "object",
            "name": "treeRowHeaderBaseWidth",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "Base width of the tree header, provides for a single level of tree.  This\nis incremented by `treeIndent` for each extra level\n<br/>Defaults to 30",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27507,
            "ngdoc": "object",
            "name": "treeIndent",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "Number of pixels of indent for the icon at each tree level, wider indents are visually more pleasing,\nbut will make the tree row header wider\n<br/>Defaults to 10",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27517,
            "ngdoc": "object",
            "name": "showTreeRowHeader",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "If set to false, don't create the row header.  You'll need to programmatically control the expand\nstates\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27527,
            "ngdoc": "object",
            "name": "showTreeExpandNoChildren",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "If set to true, show the expand/collapse button even if there are no\nchildren of a node.  You'd use this if you're planning to dynamically load the children\n\n<br/>Defaults to true, grouping overrides to false",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27538,
            "ngdoc": "object",
            "name": "treeRowHeaderAlwaysVisible",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "If set to true, row header even if there are no tree nodes\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27548,
            "ngdoc": "object",
            "name": "treeCustomAggregations",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "Define custom aggregation functions. The properties of this object will be\naggregation types available for use on columnDef with {@link ui.grid.treeBase.api:ColumnDef treeAggregationType} or through the column menu.\nIf a function defined here uses the same name as one of the native aggregations, this one will take precedence.\nThe object format is:\n\n<pre>\n  {\n    aggregationName: {\n      label: (optional) string,\n      aggregationFn: function( aggregation, fieldValue, numValue, row ){...},\n      finalizerFn: (optional) function( aggregation ){...}\n      },\n    mean: {\n      label: 'mean',\n      aggregationFn: function( aggregation, fieldValue, numValue ){\n          aggregation.count = (aggregation.count || 1) + 1;\n        aggregation.sum = (aggregation.sum || 0) + numValue;\n      },\n      finalizerFn: function( aggregation ){\n        aggregation.value = aggregation.sum / aggregation.count\n      }\n    }\n  }\n</pre>\n\n<br/>The `finalizerFn` may be used to manipulate the value before rendering, or to\napply a custom rendered value. If `aggregation.rendered` is left undefined, the value will be\nrendered. Note that the native aggregation functions use an `finalizerFn` to concatenate\nthe label and the value.\n\n<br/>Defaults to {}",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27586,
            "ngdoc": "object",
            "name": "enableExpandAll",
            "propertyof": "ui.grid.treeBase.api:GridOptions",
            "description": "Enable the expand all button at the top of the row header\n\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27598,
            "ngdoc": "function",
            "name": "treeBaseColumnBuilder",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Sets the tree defaults based on the columnDefs",
            "params": [
                {
                    "name": "colDef",
                    "description": "columnDef we're basing on",
                    "type": "Object"
                },
                {
                    "name": "col",
                    "description": "the column we're to update",
                    "type": "GridCol"
                },
                {
                    "name": "gridOptions",
                    "description": "the options we should use",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise for the builder - actually we do it all inline so it's immediately resolved",
                "type": "Promise"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27612,
            "ngdoc": "object",
            "name": "customTreeAggregationFn",
            "propertyof": "ui.grid.treeBase.api:ColumnDef",
            "description": "A custom function that aggregates rows into some form of\ntotal.  Aggregations run row-by-row, the function needs to be capable of\ncreating a running total.\n\nThe function will be provided the aggregation item (in which you can store running\ntotals), the row value that is to be aggregated, and that same row value converted to\na number (most aggregations work on numbers)",
            "example": [
                "\n<pre>\n  customTreeAggregationFn = function ( aggregation, fieldValue, numValue, row ){\n    // calculates the average of the squares of the values\n    if ( typeof(aggregation.count) === 'undefined' ){\n      aggregation.count = 0;\n    }\n    aggregation.count++;\n\n    if ( !isNaN(numValue) ){\n      if ( typeof(aggregation.total) === 'undefined' ){\n        aggregation.total = 0;\n      }\n      aggregation.total = aggregation.total + numValue * numValue;\n    }\n\n    aggregation.value = aggregation.total / aggregation.count;\n  }\n</pre>\n<br/>Defaults to undefined. May be overwritten by treeAggregationType, the two options should not be used together."
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27648,
            "ngdoc": "object",
            "name": "treeAggregationType",
            "propertyof": "ui.grid.treeBase.api:ColumnDef",
            "description": "Use one of the native or grid-level aggregation methods for calculating aggregations on this column.\nNative method are in the constants file and include: SUM, COUNT, MIN, MAX, AVG. This may also be the property the\nname of an aggregation function defined with {@link ui.grid.treeBase.api:GridOptions treeCustomAggregations}.\n\n<pre>\n    treeAggregationType = uiGridTreeBaseConstants.aggregation.SUM,\n  }\n</pre>\n\nIf you are using aggregations you should either:\n\n - also use grouping, in which case the aggregations are displayed in the group header, OR\n - use treeView, in which case you can set `treeAggregationUpdateEntity: true` in the colDef, and\n   treeBase will store the aggregation information in the entity, or you can set `treeAggregationUpdateEntity: false`\n   in the colDef, and you need to manual retrieve the calculated aggregations from the row.treeNode.aggregations\n\n<br/>Takes precendence over a treeAggregationFn, the two options should not be used together.\n<br/>Defaults to undefined.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27683,
            "ngdoc": "object",
            "name": "treeAggregationLabel",
            "propertyof": "ui.grid.treeBase.api:ColumnDef",
            "description": "A custom label to use for this aggregation. If provided we don't use native i18n.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27696,
            "ngdoc": "object",
            "name": "treeAggregationUpdateEntity",
            "propertyof": "ui.grid.treeBase.api:ColumnDef",
            "description": "Store calculated aggregations into the entity, allowing them\nto be displayed in the grid using a standard cellTemplate.  This defaults to true,\nif you are using grouping then you shouldn't set it to false, as then the aggregations won't\ndisplay.\n\nIf you are using treeView in most cases you'll want to set this to true.  This will result in\ngetCellValue returning the aggregation rather than whatever was stored in the cell attribute on\nthe entity.  If you want to render the underlying entity value (and do something else with the aggregation)\nthen you could use a custom cellTemplate to display `row.entity.myAttribute`, rather than using getCellValue.\n\n<br/>Defaults to true",
            "example": [
                "\n<pre>\n  gridOptions.columns = [{\n    name: 'myCol',\n    treeAggregation: { type: uiGridTreeBaseConstants.aggregation.SUM },\n    treeAggregationUpdateEntity: true\n    cellTemplate: '<div>{{row.entity.myCol + \" \" + row.treeNode.aggregations[0].rendered}}</div>'\n  }];\n </pre>"
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27724,
            "ngdoc": "object",
            "name": "customTreeAggregationFinalizerFn",
            "propertyof": "ui.grid.treeBase.api:ColumnDef",
            "description": "A custom function that populates aggregation.rendered, this is called when\na particular aggregation has been fully calculated, and we want to render the value.\n\nWith the native aggregation options we just concatenate `aggregation.label` and\n`aggregation.value`, but if you wanted to apply a filter or otherwise manipulate the label\nor the value, you can do so with this function. This function will be called after the\nthe default `finalizerFn`.",
            "example": [
                "\n<pre>\n  customTreeAggregationFinalizerFn = function ( aggregation ){\n    aggregation.rendered = aggregation.label + aggregation.value / 100 + '%';\n  }\n</pre>\n<br/>Defaults to undefined."
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27751,
            "ngdoc": "function",
            "name": "createRowHeader",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Create the rowHeader.  If treeRowHeaderAlwaysVisible then\nset it to visible, otherwise set it to invisible",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27779,
            "ngdoc": "function",
            "name": "expandAllRows",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Expands all nodes in the tree",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27796,
            "ngdoc": "function",
            "name": "collapseAllRows",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Collapses all nodes in the tree",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27813,
            "ngdoc": "function",
            "name": "setAllNodes",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Works through a subset of grid.treeBase.rowExpandedStates, setting\nall child nodes (and their descendents) of the provided node to the given state.\n\nCalls itself recursively on all nodes so as to achieve this.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're operating on (so we can raise events)",
                    "type": "Grid"
                },
                {
                    "name": "treeNode",
                    "description": "a node in the tree that we want to update",
                    "type": "Object"
                },
                {
                    "name": "targetState",
                    "description": "the state we want to set it to",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27846,
            "ngdoc": "function",
            "name": "toggleRowTreeState",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Toggles the expand or collapse state of this grouped row, if\nit's a parent row",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to toggle",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27871,
            "ngdoc": "function",
            "name": "expandRow",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Expands this specific row, showing only immediate children.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to expand",
                    "type": "GridRow"
                },
                {
                    "name": "recursive",
                    "description": "true if you wish to expand the row's ancients",
                    "type": "Boolean"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27915,
            "ngdoc": "function",
            "name": "expandRowChildren",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Expands this specific row, showing all children.",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to expand",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27935,
            "ngdoc": "function",
            "name": "collapseRow",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Collapses this specific row",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to collapse",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27958,
            "ngdoc": "function",
            "name": "collapseRowChildren",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Collapses this specific row and all children",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to collapse",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 27978,
            "ngdoc": "function",
            "name": "allExpanded",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Returns true if all rows are expanded, false\nif they're not.  Walks the tree to determine this.  Used\nto set the expandAll state.\n\nIf the node has no children, then return true (it's immaterial\nwhether it is expanded).  If the node has children, then return\nfalse if this node is collapsed, or if any child node is not all expanded",
            "params": [
                {
                    "name": "tree",
                    "description": "the grid to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "whether or not the tree is all expanded",
                "type": "Boolean"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28021,
            "ngdoc": "function",
            "name": "treeRows",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "The rowProcessor that adds the nodes to the tree, and sets the visible\nstate of each row based on it's parent state\n\nAssumes it is always called after the sorting processor, and the grouping processor if there is one.\nPerforms any tree sorts itself after having built the tree\n\nProcesses all the rows in order, setting the group level based on the $$treeLevel in the associated\nentity, and setting the visible state based on the parent's state.\n\nCalculates the deepest level of tree whilst it goes, and updates that so that the header column can be correctly\nsized.\n\nAggregates if necessary along the way.",
            "params": [
                {
                    "name": "renderableRows",
                    "description": "the rows we want to process, usually the output from the previous rowProcessor",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the updated rows",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28062,
            "ngdoc": "function",
            "name": "createOrUpdateRowHeaderWidth",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Calculates the rowHeader width.\n\nIf rowHeader is always present, updates the width.\n\nIf rowHeader is only sometimes present (`treeRowHeaderAlwaysVisible: false`), determines whether there\nshould be one, then creates or removes it as appropriate, with the created rowHeader having the\nright width.\n\nIf there's never a rowHeader then never creates one: `showTreeRowHeader: false`",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we want to set the row header on",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28102,
            "ngdoc": "function",
            "name": "renderTree",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Creates an array of rows based on the tree, exporting only\nthe visible nodes and leaves",
            "params": [
                {
                    "name": "nodeList",
                    "description": "the list of nodes - can be grid.treeBase.tree, or can be node.children when\nwe're calling recursively",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "renderable rows",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28128,
            "ngdoc": "function",
            "name": "createTree",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Creates a tree from the renderableRows",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid",
                    "type": "Grid"
                },
                {
                    "name": "renderableRows",
                    "description": "the rows we want to create a tree from",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the tree we've build",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28199,
            "ngdoc": "function",
            "name": "addOrUseNode",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Creates a tree node for this row.  If this row already has a treeNode\nrecorded against it, preserves the state, but otherwise overwrites the data.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid we're operating on",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to set",
                    "type": "GridRow"
                },
                {
                    "name": "parents",
                    "description": "an array of the parents this row should have",
                    "type": "Array"
                },
                {
                    "name": "aggregationBase",
                    "description": "empty aggregation information",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "updates the parents array, updates the row to have a treeNode, and updates the\ngrid.treeBase.tree",
                "type": "Undefined"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28236,
            "ngdoc": "function",
            "name": "setCurrentState",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Looks at the parents array to determine our current state.\nIf any node in the hierarchy is collapsed, then return collapsed, otherwise return\nexpanded.",
            "params": [
                {
                    "name": "parents",
                    "description": "an array of the parents this row should have",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the state we should be setting to any nodes we see",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28258,
            "ngdoc": "function",
            "name": "sortTree",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Performs a recursive sort on the tree nodes, sorting the\nchildren of each node and putting them back into the children array.\n\nBefore doing this it turns back on all the sortIgnore - things that were previously\nignored we process now.  Since we're sorting within the nodes, presumably anything\nthat was already sorted is how we derived the nodes, we can keep those sorts too.\n\nWe only sort tree nodes that are expanded - no point in wasting effort sorting collapsed\nnodes",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid to get the aggregation information from",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the aggregation information",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28305,
            "ngdoc": "function",
            "name": "fixFilter",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "After filtering has run, we need to go back through the tree\nand make sure the parent rows are always visible if any of the child rows\nare visible (filtering may make a child visible, but the parent may not\nmatch the filter criteria)\n\nThis has a risk of being computationally expensive, we do it by walking\nthe tree and remembering whether there are any invisible nodes on the\nway down.",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid to fix filters on",
                    "type": "Grid"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28355,
            "ngdoc": "function",
            "name": "buildAggregationObject",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Build the object which is stored on the column for holding meta-data about the aggregation.\nThis method should only be called with columns which have an aggregation.",
            "params": [
                {
                    "name": "the",
                    "description": "column which this object relates to",
                    "type": "Column"
                }
            ],
            "return": {
                "description": "{col: Column object, label: string, type: string (optional)}",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28379,
            "ngdoc": "function",
            "name": "getAggregations",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Looks through the grid columns to find those with aggregations,\nand collates the aggregation information into an array, returns that array",
            "params": [
                {
                    "name": "grid",
                    "description": "the grid to get the aggregation information from",
                    "type": "Grid"
                }
            ],
            "return": {
                "description": "the aggregation information",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28407,
            "ngdoc": "function",
            "name": "aggregate",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Accumulate the data from this row onto the aggregations for each parent\n\nIterate over the parents, then iterate over the aggregations for each of those parents,\nand perform the aggregation for each individual aggregation",
            "params": [
                {
                    "name": "grid",
                    "description": "grid object",
                    "type": "Grid"
                },
                {
                    "name": "row",
                    "description": "the row we want to set grouping visibility on",
                    "type": "GridRow"
                },
                {
                    "name": "parents",
                    "description": "the parents that we would want to aggregate onto",
                    "type": "Array"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28532,
            "ngdoc": "function",
            "name": "finaliseAggregation",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Helper function used to finalize aggregation nodes and footer cells",
            "params": [
                {
                    "name": "row",
                    "description": "the parent we're finalising",
                    "type": "GridRow"
                },
                {
                    "name": "the",
                    "description": "aggregation object manipulated by the aggregationFn",
                    "type": "Aggregation"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28557,
            "ngdoc": "function",
            "name": "finaliseAggregations",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Format the data from the aggregation into the rendered text\ne.g. if we had label: 'sum: ' and value: 25, we'd create 'sum: 25'.\n\nAs part of this we call any formatting callback routines we've been provided.\n\nWe write our aggregation out to the row.entity if treeAggregationUpdateEntity is\nset on the column - we don't overwrite any information that's already there, we append\nto it so that grouping can have set the groupVal beforehand without us overwriting it.\n\nWe need to copy the data from the row.entity first before we finalise the aggregation,\nwe need that information for the finaliserFn",
            "params": [
                {
                    "name": "row",
                    "description": "the parent we're finalising",
                    "type": "GridRow"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28596,
            "ngdoc": "function",
            "name": "treeFooterAggregationType",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Uses the tree aggregation functions and finalizers to set the\ncolumn footer aggregations.",
            "params": [
                {
                    "name": "visible",
                    "description": "rows. not used, but accepted to match signature of GridColumn.aggregationType",
                    "type": "Rows"
                },
                {
                    "name": "the",
                    "description": "column we are finalizing",
                    "type": "GridColumn"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28715,
            "ngdoc": "overview",
            "name": "ui.grid.treeView",
            "description": "# ui.grid.treeView\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides a tree view of the data that it is provided, with nodes in that\ntree and leaves.  Unlike grouping, the tree is an inherent property of the data and must\nbe provided with your data array.\n\nDesign information:\n-------------------\n\nTreeView uses treeBase for the underlying functionality, and is a very thin wrapper around\nthat logic.  Most of the design information has now moved to treebase.\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.treeView\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28741,
            "ngdoc": "object",
            "name": "ui.grid.treeView.constant:uiGridTreeViewConstants",
            "description": "constants available in treeView module, this includes\nall the constants declared in the treeBase module (these are manually copied\nas there isn't an easy way to include constants in another constants file, and\nwe don't want to make users include treeBase)",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28765,
            "ngdoc": "service",
            "name": "ui.grid.treeView.service:uiGridTreeViewService",
            "description": "Services for treeView features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28779,
            "ngdoc": "object",
            "name": "ui.grid.treeView.grid:treeView",
            "description": "Grid properties and functions added for treeView",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28789,
            "ngdoc": "object",
            "name": "ui.grid.treeView.api:PublicApi",
            "description": "Public Api for treeView feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28814,
            "ngdoc": "object",
            "name": "ui.grid.treeView.api:GridOptions",
            "description": "GridOptions for treeView feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}\n\nMany tree options are set on treeBase, make sure to look at that feature in\nconjunction with these options.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28825,
            "ngdoc": "object",
            "name": "enableTreeView",
            "propertyof": "ui.grid.treeView.api:GridOptions",
            "description": "Enable row tree view for entire grid.\n<br/>Defaults to true",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28837,
            "ngdoc": "function",
            "name": "adjustSorting",
            "methodof": "ui.grid.treeBase.service:uiGridTreeBaseService",
            "description": "Trees cannot be sorted the same as flat lists of rows -\ntrees are sorted recursively within each level - so the children of each\nnode are sorted, but not the full set of rows.\n\nTo achieve this, we suppress the normal sorting by setting ignoreSort on\neach of the sort columns.  When the treeBase rowsProcessor runs it will then\nunignore these, and will perform a recursive sort against the tree that it builds.",
            "params": [
                {
                    "name": "renderableRows",
                    "description": "the rows that we need to pass on through",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "renderableRows that we passed on through",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28930,
            "ngdoc": "overview",
            "name": "ui.grid.validate",
            "description": "# ui.grid.validate\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides the ability to validate cells upon change.\n\nDesign information:\n-------------------\n\nValidation is not based on angularjs validation, since it would work only when editing the field.\n\nInstead it adds custom properties to any field considered as invalid.\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.expandable\"></div>",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28957,
            "ngdoc": "service",
            "name": "ui.grid.validate.service:uiGridValidateService",
            "description": "Services for validation features",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28967,
            "ngdoc": "object",
            "name": "validatorFactories",
            "propertyof": "ui.grid.validate.service:uiGridValidateService",
            "description": "object containing all the factories used to validate data.<br/>\nThese factories will be in the form <br/>\n```\n{\n  validatorFactory: function(argument) {\n                      return function(newValue, oldValue, rowEntity, colDef) {\n                        return true || false || promise\n                      }\n                    },\n  messageFunction: function(argument) {\n                     return string\n                   }\n}\n```\n\n Promises should return true or false as result according to the result of validation.",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 28991,
            "ngdoc": "service",
            "name": "setExternalFactoryFunction",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Adds a way to retrieve validators from an external service\n<p>Validators from this external service have a higher priority than default\nones",
            "params": [
                {
                    "name": "externalFactoryFunction",
                    "description": "a function that accepts name and argument to pass to a\nvalidator factory and that returns an object with the same properties as \nyou can see in {@link ui.grid.validate.service:uiGridValidateService#properties_validatorFactories validatorFactories}",
                    "type": "Function"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29006,
            "ngdoc": "service",
            "name": "clearExternalFactory",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Removes any link to external factory from this service",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29016,
            "ngdoc": "service",
            "name": "getValidatorFromExternalFactory",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Retrieves a validator by executing a validatorFactory\nstored in an external service.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the validator to retrieve",
                    "type": "String"
                },
                {
                    "name": "argument",
                    "description": "an argument to pass to the validator factory",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29029,
            "ngdoc": "service",
            "name": "getMessageFromExternalFactory",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Retrieves a message stored in an external service.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the validator",
                    "type": "String"
                },
                {
                    "name": "argument",
                    "description": "an argument to pass to the message function",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29041,
            "ngdoc": "service",
            "name": "setValidator",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Adds a new validator to the service",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the validator, must be unique",
                    "type": "String"
                },
                {
                    "name": "validatorFactory",
                    "description": "a factory that return a validatorFunction",
                    "type": "Function"
                },
                {
                    "name": "messageFunction",
                    "description": "a function that return the error message",
                    "type": "Function"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29057,
            "ngdoc": "service",
            "name": "getValidator",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Returns a validator registered to the service\nor retrieved from the external factory",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the validator to retrieve",
                    "type": "String"
                },
                {
                    "name": "argument",
                    "description": "an argument to pass to the validator factory",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the validator function",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29080,
            "ngdoc": "service",
            "name": "getMessage",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Returns the error message related to the validator",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the validator",
                    "type": "String"
                },
                {
                    "name": "argument",
                    "description": "an argument to pass to the message function",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the error message related to the validator",
                "type": "String"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29099,
            "ngdoc": "service",
            "name": "isInvalid",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Returns true if the cell (identified by rowEntity, colDef) is invalid",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the row entity of the cell",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the colDef of the cell",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the cell is invalid",
                "type": "Boolean"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29112,
            "ngdoc": "service",
            "name": "setInvalid",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Makes the cell invalid by adding the proper field to the entity",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the row entity of the cell",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the colDef of the cell",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29124,
            "ngdoc": "service",
            "name": "setValid",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Makes the cell valid by removing the proper error field from the entity",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the row entity of the cell",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the colDef of the cell",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29136,
            "ngdoc": "service",
            "name": "setError",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Adds the proper error to the entity errors field",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the row entity of the cell",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the colDef of the cell",
                    "type": "Object"
                },
                {
                    "name": "validatorName",
                    "description": "the name of the validator that is failing",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29152,
            "ngdoc": "service",
            "name": "clearError",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Removes the proper error from the entity errors field",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the row entity of the cell",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the colDef of the cell",
                    "type": "Object"
                },
                {
                    "name": "validatorName",
                    "description": "the name of the validator that is failing",
                    "type": "String"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29170,
            "ngdoc": "function",
            "name": "getErrorMessages",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "returns an array of i18n-ed error messages.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance whose errors we are looking for",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we are looking for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of strings containing all the error messages for the cell",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29193,
            "ngdoc": "function",
            "name": "getFormattedErrors",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "returns the error i18n-ed and formatted in html to be shown inside the page.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance whose errors we are looking for",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we are looking for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that can be used in a template (like a cellTemplate) to display the\nmessage inside the page (i.e. inside a div)",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29220,
            "ngdoc": "function",
            "name": "getTitleFormattedErrors",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "returns the error i18n-ed and formatted in javaScript to be shown inside an html \ntitle attribute.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance whose errors we are looking for",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we are looking for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that can be used in a template (like a cellTemplate) to display the\nmessage inside an html title attribute",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29250,
            "ngdoc": "function",
            "name": "getTitleFormattedErrors",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "Executes all validators on a cell (identified by row entity and column definition) and sets or clears errors",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the row entity of the cell we want to run the validators on",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column definition of the cell we want to run the validators on",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "the value the user just entered",
                    "type": "Object"
                },
                {
                    "name": "oldValue",
                    "description": "the value the field had before",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29302,
            "ngdoc": "function",
            "name": "createDefaultValidators",
            "methodof": "ui.grid.validate.service:uiGridValidateService",
            "description": "adds the basic validators to the list of service validators",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29361,
            "ngdoc": "object",
            "name": "ui.grid.validate.api:PublicApi",
            "description": "Public Api for validation feature",
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29370,
            "ngdoc": "event",
            "name": "validationFailed",
            "eventof": "ui.grid.validate.api:PublicApi",
            "description": "raised when one or more failure happened during validation \n<pre>\n     gridApi.validate.on.validationFailed(scope, function(rowEntity, colDef, newValue, oldValue){...})\n</pre>",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "the options.data element whose validation failed",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose validation failed",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "new value",
                    "type": "Object"
                },
                {
                    "name": "oldValue",
                    "description": "old value",
                    "type": "Object"
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29389,
            "ngdoc": "function",
            "name": "isInvalid",
            "methodof": "ui.grid.validate.api:PublicApi",
            "description": "checks if a cell (identified by rowEntity, colDef) is invalid",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance we want to check",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we want to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the cell value is not valid",
                "type": "Boolean"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29401,
            "ngdoc": "function",
            "name": "getErrorMessages",
            "methodof": "ui.grid.validate.api:PublicApi",
            "description": "returns an array of i18n-ed error messages.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance whose errors we are looking for",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we are looking for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of strings containing all the error messages for the cell",
                "type": "Array"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29413,
            "ngdoc": "function",
            "name": "getFormattedErrors",
            "methodof": "ui.grid.validate.api:PublicApi",
            "description": "returns the error i18n-ed and formatted in html to be shown inside the page.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance whose errors we are looking for",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we are looking for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that can be used in a template (like a cellTemplate) to display the\nmessage inside the page (i.e. inside a div)",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "assets\\ui-grid.js",
            "line": 29426,
            "ngdoc": "function",
            "name": "getTitleFormattedErrors",
            "methodof": "ui.grid.validate.api:PublicApi",
            "description": "returns the error i18n-ed and formatted in javaScript to be shown inside an html \ntitle attribute.",
            "params": [
                {
                    "name": "rowEntity",
                    "description": "gridOptions.data[] array instance whose errors we are looking for",
                    "type": "Object"
                },
                {
                    "name": "colDef",
                    "description": "the column whose errors we are looking for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object that can be used in a template (like a cellTemplate) to display the\nmessage inside an html title attribute",
                "type": "Object"
            },
            "class": "APP",
            "module": "app"
        },
        {
            "file": "js\\app.js",
            "line": 29,
            "description": "Роутер",
            "itemtype": "method",
            "name": "config",
            "params": [
                {
                    "name": "$routeProvider",
                    "description": ""
                },
                {
                    "name": "$locationProvider",
                    "description": ""
                }
            ],
            "class": "APP",
            "module": "app"
        },
        {
            "file": "js\\app.js",
            "line": 60,
            "description": "Сохранить пользователя после обновления страницы <br> Перенаправлять на страницу входа в систему, если не был вход в систему",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "$rootScope",
                    "description": ""
                },
                {
                    "name": "$location",
                    "description": ""
                },
                {
                    "name": "$cookies",
                    "description": ""
                },
                {
                    "name": "$http",
                    "description": ""
                }
            ],
            "class": "APP",
            "module": "app"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\dist\\js\\datepicker.js:702"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\dist\\js\\datepicker.js:1637"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\dist\\js\\datepicker.js:1676"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\dist\\js\\datepicker.js:2143"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:85"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:85"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:85"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:94"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:94"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:94"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:105"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:105"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:105"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:144"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:144"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:144"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:166"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:166"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:166"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:182"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:182"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:182"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:205"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:205"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:205"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:229"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:229"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:229"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:368"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:368"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:377"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:377"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:377"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:400"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:400"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:400"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:433"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:433"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:433"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:440"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:440"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:440"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:457"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:457"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:457"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:473"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:473"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:473"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:491"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:491"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:491"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:498"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:498"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:498"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:516"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:516"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:516"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:583"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:583"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:583"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:583"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:614"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:614"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:614"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:675"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:675"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:698"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:698"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:698"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:737"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:737"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:737"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1433"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1433"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:1433"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1443"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1443"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:1443"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1689"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1689"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1697"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1697"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1697"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1729"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1729"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1729"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1747"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1747"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1747"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1762"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1762"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:1762"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1792"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1792"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1792"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1827"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1827"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:1827"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1839"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1839"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:1839"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1847"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1847"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1847"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:1847"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1903"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1903"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:1903"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1921"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1921"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1921"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:1986"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:1986"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:1986"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2017"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:2017"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2017"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2087"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2087"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2087"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2411"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2411"
        },
        {
            "message": "unknown tag: summary",
            "line": " assets\\ui-grid.js:2411"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2448"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2448"
        },
        {
            "message": "unknown tag: memberof",
            "line": " assets\\ui-grid.js:2448"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2448"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2459"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2459"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2459"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2468"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2468"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2468"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2477"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2477"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2477"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2489"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2489"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2489"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2498"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2498"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2498"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2507"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2507"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2507"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2516"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2516"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2516"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2525"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2525"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2525"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2534"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2534"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2534"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2549"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2549"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2549"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2558"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2558"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2558"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2575"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2575"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2575"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2592"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2592"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2592"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2611"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2611"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2611"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:2628"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:2628"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:2628"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3023"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3023"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:3023"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3134"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3134"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3134"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3449"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3449"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:3449"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3743"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3743"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3750"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3750"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3775"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3775"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:3775"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3788"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3788"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:3788"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3797"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3797"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:3797"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3840"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3840"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:3840"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3848"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3848"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:3848"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3856"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3856"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:3856"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3889"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3889"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3889"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3908"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3908"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3908"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3941"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3941"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3941"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3958"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3958"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3958"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3972"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3972"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3972"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:3972"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3983"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3983"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3983"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:3983"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:3994"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:3994"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:3994"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:3994"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4007"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4007"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4007"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4019"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4019"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4019"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4019"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4032"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4032"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4032"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4032"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4044"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4044"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4044"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4065"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4065"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4065"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4087"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4087"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4087"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4087"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4112"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4112"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4112"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4134"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4134"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4134"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4153"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4153"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4153"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4169"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4169"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4169"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4169"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4226"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4226"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4226"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4237"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4237"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4237"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4249"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4249"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4249"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4260"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4260"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4260"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4273"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4273"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4273"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4273"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4317"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4317"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4317"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4343"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4343"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4343"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4367"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4367"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4367"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4384"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4384"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4384"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4398"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4398"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4398"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4412"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4412"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4412"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4426"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4426"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4426"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4440"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4440"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4440"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4446"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4446"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:4446"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4481"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4481"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4481"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4492"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4492"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4492"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4544"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4544"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4544"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4561"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4561"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4561"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4561"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4677"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4677"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4677"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4696"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4696"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4696"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4711"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4711"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4711"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4723"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4723"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4723"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4735"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4735"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4735"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4745"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4745"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4745"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4756"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4756"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4808"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4808"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4808"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4829"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4829"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4829"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4928"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4928"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4953"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4953"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4953"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:4953"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:4971"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:4971"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:4971"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5008"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5008"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5008"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5039"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5039"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5039"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5059"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5059"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5160"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5160"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5160"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5286"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5286"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5286"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:5286"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5302"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5302"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5302"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5327"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5327"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5327"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5352"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5352"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5352"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5369"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5369"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5369"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5611"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5611"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5611"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5633"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5633"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5633"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5673"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5673"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5673"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5690"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5690"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5690"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:5690"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5715"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5715"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5715"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:5715"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5815"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5815"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5815"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5839"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5839"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5839"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:5839"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:5860"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:5860"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:5860"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:5860"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6020"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6020"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6020"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6049"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6049"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6049"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6059"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6059"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6059"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6069"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6069"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6069"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:6069"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6228"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6228"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6228"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:6228"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6251"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6251"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:6251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:6306"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6338"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6338"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6358"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6358"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6358"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6381"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6381"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6381"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6393"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6393"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6393"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6405"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6405"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6405"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6418"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6418"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6418"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:6418"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6428"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6428"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6428"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6443"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6443"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6443"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6452"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6452"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6452"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6460"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6460"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6460"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6468"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6468"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6468"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6478"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6478"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:6478"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6489"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6489"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6489"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6541"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6541"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6541"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6622"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6622"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6622"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6657"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6657"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6657"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6677"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6677"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6677"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6733"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6733"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6733"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6745"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6745"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6745"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6757"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6757"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6757"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6766"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6766"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6766"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6775"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6775"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6775"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6786"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6786"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6786"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6795"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6795"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6795"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6807"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6807"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6807"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6817"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6817"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6842"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6842"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6842"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6908"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6908"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6908"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6924"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6924"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6924"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6935"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:6935"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6935"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6964"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6964"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6964"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6977"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6977"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6977"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6987"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6987"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6987"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:6997"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:6997"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:6997"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7011"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7011"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7011"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7035"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7035"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7035"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7045"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7045"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7045"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7070"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7070"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7070"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7099"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7099"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7099"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7125"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7125"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7125"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7162"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7162"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7162"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7256"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7256"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7256"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7283"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7283"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7283"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7311"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7311"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7311"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7321"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7321"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7321"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7331"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7331"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7331"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7341"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7341"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7341"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7353"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7353"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7353"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7366"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7366"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7366"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7375"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7375"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7375"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7387"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7387"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7387"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7408"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7408"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7408"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7427"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7427"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7427"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7438"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7438"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7438"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7485"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7485"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7485"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7581"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7581"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7581"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7602"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7602"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7602"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7615"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7615"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7615"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7625"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7625"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7625"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7636"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7636"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7636"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7646"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7646"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7646"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7666"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7666"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7666"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7677"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7677"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7677"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7685"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7685"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7685"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7744"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7744"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7783"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7783"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7783"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7805"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7805"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7805"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7845"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7845"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7845"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7860"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7860"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7871"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7871"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7871"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7886"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7886"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7886"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7900"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7900"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7900"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7912"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7912"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:7912"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7924"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7924"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7924"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7938"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7938"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7938"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7961"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7961"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7961"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7977"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7977"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7977"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7985"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7985"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7985"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:7994"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:7994"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:7994"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8003"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8003"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8003"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8015"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8015"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8015"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8024"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8024"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8024"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8032"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8032"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8032"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8040"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8040"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8040"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8048"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8048"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8048"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8056"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8056"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8056"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8064"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8064"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8064"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8073"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8073"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8073"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8081"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8081"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8081"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8090"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8090"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8090"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8098"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8098"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8098"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8109"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8109"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8109"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8119"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8119"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8119"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8128"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8128"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8128"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8138"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8138"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8138"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8148"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8148"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8148"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8158"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8158"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8158"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8166"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8166"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:8166"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8179"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8179"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8179"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8200"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8200"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8200"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8212"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8212"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8212"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8221"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8221"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8221"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8235"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8235"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8235"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8244"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8244"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8244"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8266"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8266"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8309"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8309"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8309"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8317"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8317"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8317"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8325"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8325"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8325"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8333"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8333"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8333"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8417"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8417"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:8417"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8431"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8431"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:8431"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8446"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8446"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:8446"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:8446"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8533"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8533"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:8533"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:8533"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:8835"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:8835"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:8835"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9071"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9071"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9082"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9082"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9082"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9090"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9090"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9090"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9098"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9098"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9098"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9106"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9106"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9106"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9120"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9120"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9120"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9139"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9139"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9139"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9139"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9152"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9152"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9152"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9170"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9170"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9170"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9192"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9192"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9192"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9214"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9214"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9214"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9234"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9234"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9234"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9254"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9254"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9254"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9292"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9292"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9308"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9308"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9308"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9315"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9315"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9315"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9324"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9324"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9324"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9324"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9346"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9346"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9361"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9361"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9361"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9371"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9371"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9371"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9380"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9380"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9380"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9401"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9401"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9401"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9414"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9414"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9414"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9446"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9446"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9446"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9511"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9511"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9522"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9522"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9522"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9522"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9587"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9587"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9587"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9638"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9638"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9638"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9649"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9649"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9649"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9659"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9659"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9659"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9669"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9669"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9669"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9736"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9736"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9747"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9747"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9747"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9747"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9769"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9769"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9769"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9769"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9789"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9789"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9789"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9789"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9823"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9823"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9823"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9823"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9893"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9893"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9893"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9893"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9989"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9989"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:9989"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:9999"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:9999"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:9999"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:9999"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10032"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10032"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10032"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10127"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10127"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10155"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10155"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10155"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10155"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10184"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10184"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10184"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10215"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10215"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10215"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10241"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10241"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10241"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10241"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10260"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10260"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10260"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10260"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10314"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10314"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10314"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10314"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10336"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10336"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10336"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10336"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10365"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10365"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10365"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10365"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10394"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10394"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10394"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10394"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10454"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10454"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10454"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10454"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10497"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10497"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:10497"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10507"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10507"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10507"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10507"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10793"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10793"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10807"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10807"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10807"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10807"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10833"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10833"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10833"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10833"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10885"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10885"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10885"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10885"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10934"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10934"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10934"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10934"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:10957"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:10957"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:10957"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:10957"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11027"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11027"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11027"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11027"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11059"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11059"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11059"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11059"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11073"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11073"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11073"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11073"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11150"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11150"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11150"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11150"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11365"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11365"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11365"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11381"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11381"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11381"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11397"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11397"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11397"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11414"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11414"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:11414"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11422"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11422"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11434"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11434"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11434"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11434"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11463"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11463"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11463"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11463"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11487"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11487"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11487"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11487"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11661"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11661"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11661"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11661"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11695"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11695"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11695"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11695"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11732"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11732"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11732"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11732"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11764"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11764"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11764"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11764"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:11815"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:11815"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:11815"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:11815"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14654"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14654"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14673"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14673"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14691"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14691"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14735"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14735"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:14735"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14769"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14769"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:14769"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:14769"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14780"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14780"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:14780"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:14780"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14793"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14793"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:14793"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:14793"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14829"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14829"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:14829"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:14849"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:14849"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:14849"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15133"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15133"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15179"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15179"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15193"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15193"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15213"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15213"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15239"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15239"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15247"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15247"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:15247"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15436"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15436"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15452"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15452"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15463"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15463"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15472"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15472"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:15472"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15484"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15484"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:15484"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15497"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15497"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:15497"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15513"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15513"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15513"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:15513"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15527"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15527"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15527"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15538"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15538"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15538"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15549"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15549"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15549"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15580"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15580"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15588"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15588"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:15588"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15597"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15597"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:15597"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15609"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15609"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15609"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15630"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15630"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15630"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:15630"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15668"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15668"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15668"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:15668"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15678"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15678"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15686"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15686"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:15686"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15698"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15698"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15698"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:15698"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15734"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:15734"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15734"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:15775"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:15775"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:15775"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16230"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16230"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:16230"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16369"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16369"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16390"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16390"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16407"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16407"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16425"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16425"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16434"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16434"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:16434"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16449"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16449"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:16449"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16464"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16464"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:16464"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16491"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16491"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16499"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16499"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16499"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16507"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16507"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16507"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16523"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16523"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16523"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16531"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16531"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16531"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16542"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16542"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:16542"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:16542"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16553"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16553"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16561"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16561"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16561"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16570"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16570"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16570"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16585"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16585"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16585"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16606"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16606"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16606"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16618"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16618"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16618"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16634"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16634"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:16634"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:16634"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16676"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16676"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:16676"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16726"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16726"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:16726"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16770"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16770"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:16770"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16809"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16809"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16817"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16817"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16817"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16974"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16974"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16974"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:16983"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:16983"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:16983"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17001"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17001"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17001"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17022"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17022"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:17022"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:17022"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17056"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17056"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17056"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17074"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17074"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17074"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17268"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17268"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:17268"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17426"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17426"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:17426"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17487"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17487"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:17487"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17574"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17574"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:17574"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17611"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17611"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17611"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17686"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17686"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17703"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17703"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17713"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17713"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17724"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17724"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17724"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17752"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17752"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17819"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17819"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17849"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17849"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17865"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17865"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17878"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17878"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17878"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17893"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17893"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17893"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17908"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17908"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17908"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17922"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17922"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:17922"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17939"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17939"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17945"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17945"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17951"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17951"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17961"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17961"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:17961"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17980"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17980"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:17980"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:17997"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:17997"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:17997"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18010"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18010"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18010"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18023"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18023"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18023"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18035"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18035"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18035"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18048"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18048"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18048"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18061"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18061"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18061"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18082"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18082"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18082"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18149"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18149"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18149"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18200"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18200"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18220"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18220"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18226"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18226"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18226"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18250"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18250"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18270"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18270"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18270"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18306"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18306"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18370"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18370"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18411"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18411"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18437"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18437"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18443"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18443"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18443"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18450"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18450"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18450"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18457"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18457"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18457"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18475"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18475"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18494"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18494"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18507"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18507"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18507"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18522"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18522"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18522"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18540"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18540"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:18540"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18578"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18578"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18585"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18585"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18590"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18590"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18590"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18599"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18599"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18599"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18608"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18608"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18608"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18621"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18621"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18621"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18630"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18630"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18630"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18639"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18639"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18639"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18647"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18647"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18647"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18657"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18657"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18657"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18666"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18666"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18666"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18674"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18674"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18674"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18687"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18687"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18687"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18700"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18700"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18700"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18715"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18715"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18715"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18739"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18739"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18739"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18763"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18763"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18763"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18772"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18772"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18772"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18782"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18782"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18782"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18792"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18792"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18792"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18802"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18802"
        },
        {
            "message": "unknown tag: porpertyof",
            "line": " assets\\ui-grid.js:18802"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18810"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18810"
        },
        {
            "message": "unknown tag: porpertyof",
            "line": " assets\\ui-grid.js:18810"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18818"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18818"
        },
        {
            "message": "unknown tag: porpertyof",
            "line": " assets\\ui-grid.js:18818"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18826"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18826"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18826"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18834"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18834"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18834"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18842"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18842"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18842"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18850"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18850"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18850"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18871"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18871"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18871"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18886"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18886"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18886"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18906"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18906"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18906"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:18906"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18936"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18936"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18936"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:18936"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18965"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18965"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18965"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18978"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18978"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18978"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:18978"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:18995"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:18995"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:18995"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:18995"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19018"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19018"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19018"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19125"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19125"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19125"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19150"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19150"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19150"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19179"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:19179"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19179"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19186"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19186"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19186"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19235"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:19235"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19235"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19245"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19245"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19250"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19250"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:19250"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19260"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19260"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19260"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19260"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19283"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19283"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19283"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19283"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19316"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19316"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19316"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19395"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19395"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19395"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19395"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19420"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19420"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19420"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19420"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19436"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19436"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19436"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19436"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19464"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19464"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19464"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19482"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19482"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19482"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19560"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19560"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19560"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19593"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19593"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19593"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19646"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19646"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19646"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19646"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19709"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19709"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19709"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19709"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19759"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19759"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19759"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19759"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19776"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19776"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19776"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19776"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19812"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19812"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19812"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19812"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19855"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19855"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19855"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19855"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19876"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19876"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:19876"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:19876"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:19972"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:19972"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:19972"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20028"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20028"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20087"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20087"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20111"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20111"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20126"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20126"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20134"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20134"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20134"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20178"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20178"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20187"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:20187"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20187"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20200"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:20200"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20200"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20217"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20217"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20217"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:20217"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20262"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20262"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20262"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20276"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20276"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20276"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20293"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20293"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20293"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20311"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20311"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20311"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20323"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20323"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20323"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20356"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20356"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20364"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20364"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20364"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20373"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20373"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20373"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20384"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20384"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20384"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20393"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20393"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20393"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20404"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20404"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20404"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:20404"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20416"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20416"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20424"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20424"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20424"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20435"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20435"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20435"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20536"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20536"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20536"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20554"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20554"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:20554"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20578"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20578"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20578"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:20578"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20595"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20595"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20595"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20617"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20617"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20617"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:20617"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20679"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20679"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20679"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20723"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20723"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20723"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20759"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20759"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20759"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20793"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20793"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20793"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20837"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20837"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20837"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20871"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20871"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20871"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20919"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20919"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20919"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:20919"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:20989"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:20989"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:20989"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:20989"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21018"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21018"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21018"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21018"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21059"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21059"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21059"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21136"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21136"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21136"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21157"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21157"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21157"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21207"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21207"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21207"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21207"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21246"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21246"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:21246"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21306"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21306"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21343"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21343"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21354"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21354"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21374"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21374"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21387"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21387"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21387"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21424"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21424"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21432"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:21432"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21432"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21452"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21452"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21452"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21452"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21489"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21489"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21489"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21489"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21514"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21514"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21514"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21542"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21542"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21542"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21564"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21564"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:21564"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21581"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:21581"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21581"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21590"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21590"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21590"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21590"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21620"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21620"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21620"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21645"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21645"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21645"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21676"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21676"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21676"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21709"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21709"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21709"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21709"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21739"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21739"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21739"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21768"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21768"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21768"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21788"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21788"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21788"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21829"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21829"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21829"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21829"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21867"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21867"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21867"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21908"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21908"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21908"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21908"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21942"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21942"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21942"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:21942"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21960"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21960"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:21960"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:21987"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:21987"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:21987"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22010"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22010"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:22010"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22055"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22055"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22069"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22069"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22079"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22079"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22079"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22097"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22097"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22107"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22107"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:22107"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22118"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22118"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:22118"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22133"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22133"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22133"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:22133"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22165"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22165"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22165"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22188"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22188"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22188"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22201"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22201"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22201"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22215"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22215"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22215"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22229"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22229"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22229"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22252"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22252"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22260"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22260"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:22260"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22269"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22269"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:22269"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22285"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22285"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:22285"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22296"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22296"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:22296"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22309"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22309"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22309"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22328"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22328"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22328"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22371"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22371"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22371"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22397"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22397"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22397"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:22397"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22461"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22461"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22461"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22488"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22488"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22488"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22517"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22517"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22517"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22542"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22542"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:22542"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22598"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22598"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22612"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22612"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22630"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22630"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22637"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22637"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:22637"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22655"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22655"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22655"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22701"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22701"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22708"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22708"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:22708"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22719"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22719"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22726"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22726"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:22726"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22736"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22736"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22736"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22745"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22745"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:22745"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22809"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22809"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:22809"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:22863"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:22863"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:22863"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23175"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23175"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23189"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23189"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23198"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23198"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23198"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23208"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23208"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23217"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23217"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:23217"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23230"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23230"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23230"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23239"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23239"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23239"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23253"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23253"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23253"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23265"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23265"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23265"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23282"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23282"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23282"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23302"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23302"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23302"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23315"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23315"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23315"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23364"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23364"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23372"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23372"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23372"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23379"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23379"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23379"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23387"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23387"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23387"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23396"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23396"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23396"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23405"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23405"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23405"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23415"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23415"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23415"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23424"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23424"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23424"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23437"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23437"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23437"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23447"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23447"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23447"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23457"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23457"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23457"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23477"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23477"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:23477"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23545"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23545"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23669"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23669"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23702"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23702"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23711"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23711"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:23711"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23728"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23728"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:23728"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23753"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23753"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23761"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23761"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23761"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23769"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23769"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23769"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23777"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23777"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23777"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23790"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23790"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23798"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23798"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23798"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23806"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23806"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23806"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23814"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23814"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23814"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23823"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23823"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23823"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23831"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23831"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23831"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23947"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23947"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23966"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23966"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23974"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23974"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:23974"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:23993"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:23993"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24001"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24001"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:24001"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24021"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24021"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24028"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24028"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:24028"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24079"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24079"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:24079"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24206"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24206"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:24206"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24512"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24512"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24533"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24533"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24542"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24542"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24554"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24554"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24566"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:24566"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24566"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24566"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24598"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24598"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24598"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24616"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24616"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24616"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24616"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24630"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24630"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24630"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24630"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24644"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24644"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24644"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24644"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24662"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24662"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24662"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24684"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24684"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24684"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24724"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24724"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24735"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24735"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24735"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24735"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24769"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24769"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24769"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24791"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24791"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24791"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24791"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24816"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24816"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24816"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24816"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24844"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24844"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24844"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24867"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24867"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24867"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24887"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24887"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24887"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:24887"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24914"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24914"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24914"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24947"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24947"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24947"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24968"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24968"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24968"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:24992"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:24992"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:24992"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25016"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25016"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25016"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25032"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25032"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25032"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25055"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25055"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25055"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25073"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25073"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25073"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25116"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25116"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25116"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25152"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25152"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:25152"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25181"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25181"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25223"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25223"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25247"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25247"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25258"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25258"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25275"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25275"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25288"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25288"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25288"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25288"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25299"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25299"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25299"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25299"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25323"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25323"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25330"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25330"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25330"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25340"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25340"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25340"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25350"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25350"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25350"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25367"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25367"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25367"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25391"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25391"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25391"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25405"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25405"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25405"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25414"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25414"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25414"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25423"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25423"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25423"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25432"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25432"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25432"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25447"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25447"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25447"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25457"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25457"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25457"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25470"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25470"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25470"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25479"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25479"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:25479"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25493"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25493"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25493"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25493"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25516"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25516"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25516"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25516"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25556"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25556"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25556"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25556"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25612"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25612"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25612"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25612"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25665"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25665"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25665"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25665"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25686"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25686"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25686"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25686"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25703"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25703"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25703"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25703"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25723"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25723"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25723"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25723"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25740"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25740"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25740"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25740"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25768"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25768"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25768"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25836"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25836"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25836"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25881"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25881"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25881"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25913"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25913"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25913"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25930"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25930"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25930"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25947"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25947"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25947"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:25966"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:25966"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:25966"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:25966"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26002"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26002"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:26002"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26055"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26055"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26070"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26070"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26085"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26085"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26092"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26092"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26092"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26102"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26102"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26102"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26111"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26111"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26111"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26130"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26130"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26144"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26144"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26155"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26155"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26155"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26167"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26167"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26176"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26176"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:26176"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26186"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26186"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:26186"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26203"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26203"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26203"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26217"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26217"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26217"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26231"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26231"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26231"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26248"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26248"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26248"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26262"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26262"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26262"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26284"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26284"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26284"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26313"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26313"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26313"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26323"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26323"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26323"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26334"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26334"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26334"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26343"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26343"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26343"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26352"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26352"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26352"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26362"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26362"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26362"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26372"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26372"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26372"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26397"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26397"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26405"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26405"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26405"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26413"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26413"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26413"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26421"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26421"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26421"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26432"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26432"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26432"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26440"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26440"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26440"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26448"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26448"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26448"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26458"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26458"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26458"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26466"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26466"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26466"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26477"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26477"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26477"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26486"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26486"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26486"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26496"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26496"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:26496"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26506"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26506"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26506"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26549"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26549"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26549"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26586"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26586"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26586"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26599"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26599"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26599"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26620"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26620"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26620"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26639"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26639"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:26639"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26661"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26661"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:26661"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26845"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26845"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:26882"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:26882"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:26882"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27060"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27060"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27143"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27143"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27168"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27168"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27174"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27174"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27190"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27190"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27198"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27198"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27198"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27208"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27208"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27208"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27217"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27217"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27217"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27306"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27306"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27315"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:27315"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27315"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27333"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:27333"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27333"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27352"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27352"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27352"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27362"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27362"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27362"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27372"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27372"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27372"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27383"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27383"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27383"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27395"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27395"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27395"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27406"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27406"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27406"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27418"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27418"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27418"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27430"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27430"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27430"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:27430"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27451"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27451"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27451"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27463"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27463"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27463"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:27463"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27489"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27489"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27497"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27497"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27497"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27507"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27507"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27507"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27517"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27517"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27517"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27527"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27527"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27527"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27538"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27538"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27538"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27548"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27548"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27548"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27586"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27586"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27586"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27598"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27598"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27598"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:27598"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27612"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27612"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27612"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27648"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27648"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27648"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27683"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27683"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27683"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27696"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27696"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27696"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27724"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27724"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:27724"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27751"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27751"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27751"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27779"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27779"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27779"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27796"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27796"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27796"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27813"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27813"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27813"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27846"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27846"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27846"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27871"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27871"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27871"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27915"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27915"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27915"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27935"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27935"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27935"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27958"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27958"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27958"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:27978"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:27978"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:27978"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:27978"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28021"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28021"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28021"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28021"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28062"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28062"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28062"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28102"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28102"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28102"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28102"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28128"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28128"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28128"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28128"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28199"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28199"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28199"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28199"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28236"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28236"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28236"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28236"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28258"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28258"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28258"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28258"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28305"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28305"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28305"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28355"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28355"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28355"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28355"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28379"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28379"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28379"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28379"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28407"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28407"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28407"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28532"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28532"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28532"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28557"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28557"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28557"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28596"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28596"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28596"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28621"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28621"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28646"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28646"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28675"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28675"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28715"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28715"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28741"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28741"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28765"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28765"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28779"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28779"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28789"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28789"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28814"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28814"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28825"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28825"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:28825"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28837"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28837"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28837"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:28837"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28870"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28870"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:28870"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28930"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28930"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28957"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28957"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28967"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28967"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " assets\\ui-grid.js:28967"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:28991"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:28991"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:28991"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29006"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29006"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29006"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29016"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29016"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29016"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29029"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29029"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29029"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29041"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29041"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29041"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29057"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29057"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29057"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29057"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29080"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29080"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29080"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29080"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29099"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29099"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29099"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29099"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29112"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29112"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29112"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29124"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29124"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29124"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29136"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29136"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29136"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29152"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29152"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29152"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29170"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29170"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29170"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29170"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29193"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29193"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29193"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29193"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29220"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29220"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29220"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29220"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29250"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29250"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29250"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29302"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29302"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29302"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29361"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29361"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29370"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29370"
        },
        {
            "message": "unknown tag: eventof",
            "line": " assets\\ui-grid.js:29370"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29389"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29389"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29389"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29389"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29401"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29401"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29401"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29401"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29413"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29413"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29413"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29413"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29426"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29426"
        },
        {
            "message": "unknown tag: methodof",
            "line": " assets\\ui-grid.js:29426"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets\\ui-grid.js:29426"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " assets\\ui-grid.js:29462"
        },
        {
            "message": "unknown tag: name",
            "line": " assets\\ui-grid.js:29462"
        },
        {
            "message": "unknown tag: restrict",
            "line": " assets\\ui-grid.js:29462"
        },
        {
            "message": "Missing item type\nUpdates datepicker options",
            "line": " assets\\dist\\js\\datepicker.js:602"
        },
        {
            "message": "Missing item type\nCheck if date is between minDate and maxDate",
            "line": " assets\\dist\\js\\datepicker.js:702"
        },
        {
            "message": "Missing item type\nReturns copy of date with hours and minutes equals to 0",
            "line": " assets\\dist\\js\\datepicker.js:1448"
        },
        {
            "message": "Missing item type\nCalculates days number to render. Generates days html and returns it.",
            "line": " assets\\dist\\js\\datepicker.js:1637"
        },
        {
            "message": "Missing item type\nGenerates months html",
            "line": " assets\\dist\\js\\datepicker.js:1676"
        },
        {
            "message": "Missing item type\nSets minHours and minMinutes from date (usually it's a minDate)\nAlso changes minMinutes if current hours are bigger then @date hours",
            "line": " assets\\dist\\js\\datepicker.js:2004"
        },
        {
            "message": "Missing item type\nLooks for min/max hours/minutes and if current values\nare out of range sets valid values.",
            "line": " assets\\dist\\js\\datepicker.js:2045"
        },
        {
            "message": "Missing item type\nSets minHours, minMinutes etc. from date. If date is not passed, than sets\nvalues from options",
            "line": " assets\\dist\\js\\datepicker.js:2119"
        },
        {
            "message": "Missing item type\nCalculates valid hour value to display in text input and datepicker's body.",
            "line": " assets\\dist\\js\\datepicker.js:2143"
        },
        {
            "message": "Missing item type\nConstants for use across many grid features",
            "line": " assets\\ui-grid.js:14"
        },
        {
            "message": "Missing item type\nUsed in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and\n{@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}\nto configure the sorting direction of the column",
            "line": " assets\\ui-grid.js:85"
        },
        {
            "message": "Missing item type\nUsed in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and\n{@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}\nto configure the sorting direction of the column",
            "line": " assets\\ui-grid.js:94"
        },
        {
            "message": "Missing item type\nUsed in {@link ui.grid.class:GridOptions.columnDef#properties_filter columnDef.filter}\nto configure filtering on the column\n\n`SELECT` and `INPUT` are used with the `type` property of the filter, the rest are used to specify\none of the built-in conditions.\n\nAvailable `condition` options are:\n- `uiGridConstants.filter.STARTS_WITH`\n- `uiGridConstants.filter.ENDS_WITH`\n- `uiGridConstants.filter.CONTAINS`\n- `uiGridConstants.filter.GREATER_THAN`\n- `uiGridConstants.filter.GREATER_THAN_OR_EQUAL`\n- `uiGridConstants.filter.LESS_THAN`\n- `uiGridConstants.filter.LESS_THAN_OR_EQUAL`\n- `uiGridConstants.filter.NOT_EQUAL`\n\n\nAvailable `type` options are:\n- `uiGridConstants.filter.SELECT` - use a dropdown box for the cell header filter field\n- `uiGridConstants.filter.INPUT` - use a text box for the cell header filter field",
            "line": " assets\\ui-grid.js:105"
        },
        {
            "message": "Missing item type\nUsed in {@link ui.grid.class:GridOptions.columnDef#properties_aggregationType columnDef.aggregationType}\nto specify the type of built-in aggregation the column should use.\n\nAvailable options are:\n- `uiGridConstants.aggregationTypes.sum` - add the values in this column to produce the aggregated value\n- `uiGridConstants.aggregationTypes.count` - count the number of rows to produce the aggregated value\n- `uiGridConstants.aggregationTypes.avg` - average the values in this column to produce the aggregated value\n- `uiGridConstants.aggregationTypes.min` - use the minimum value in this column as the aggregated value\n- `uiGridConstants.aggregationTypes.max` - use the maximum value in this column as the aggregated value",
            "line": " assets\\ui-grid.js:144"
        },
        {
            "message": "Missing item type\nA list of all presently circulating currency symbols that was copied from\nhttps://en.wikipedia.org/wiki/Currency_symbol#List_of_presently-circulating_currency_symbols\n\nCan be used on {@link ui.grid.class:rowSorter} to create a number string regex that ignores currency symbols.",
            "line": " assets\\ui-grid.js:166"
        },
        {
            "message": "Missing item type\nSet on {@link ui.grid.class:Grid#properties_scrollDirection Grid.scrollDirection},\nto indicate the direction the grid is currently scrolling in\n\nAvailable options are:\n- `uiGridConstants.scrollDirection.UP` - set when the grid is scrolling up\n- `uiGridConstants.scrollDirection.DOWN` - set when the grid is scrolling down\n- `uiGridConstants.scrollDirection.LEFT` - set when the grid is scrolling left\n- `uiGridConstants.scrollDirection.RIGHT` - set when the grid is scrolling right\n- `uiGridConstants.scrollDirection.NONE` - set when the grid is not scrolling, this is the default",
            "line": " assets\\ui-grid.js:182"
        },
        {
            "message": "Missing item type\nUsed with {@link ui.grid.core.api:PublicApi#methods_notifyDataChange PublicApi.notifyDataChange},\n{@link ui.grid.class:Grid#methods_callDataChangeCallbacks Grid.callDataChangeCallbacks},\nand {@link ui.grid.class:Grid#methods_registerDataChangeCallback Grid.registerDataChangeCallback}\nto specify the type of the event(s).\n\nAvailable options are:\n- `uiGridConstants.dataChange.ALL` - listeners fired on any of these events, fires listeners on all events.\n- `uiGridConstants.dataChange.EDIT` - fired when the data in a cell is edited\n- `uiGridConstants.dataChange.ROW` - fired when a row is added or removed\n- `uiGridConstants.dataChange.COLUMN` - fired when the column definitions are modified\n- `uiGridConstants.dataChange.OPTIONS` - fired when the grid options are modified",
            "line": " assets\\ui-grid.js:205"
        },
        {
            "message": "Missing item type\nUsed with {@link ui.grid.class:GridOptions#properties_enableHorizontalScrollbar GridOptions.enableHorizontalScrollbar}\nand {@link ui.grid.class:GridOptions#properties_enableVerticalScrollbar GridOptions.enableVerticalScrollbar}\nto specify the scrollbar policy for that direction.\n\nAvailable options are:\n- `uiGridConstants.scrollbars.NEVER` - never show scrollbars in this direction\n- `uiGridConstants.scrollbars.ALWAYS` - always show scrollbars in this direction",
            "line": " assets\\ui-grid.js:229"
        },
        {
            "message": "Missing item type\nServices for working with column menus, factored out\nto make the code easier to understand",
            "line": " assets\\ui-grid.js:368"
        },
        {
            "message": "Missing item type\nSets defaults, puts a reference to the $scope on\nthe uiGridController",
            "line": " assets\\ui-grid.js:377"
        },
        {
            "message": "Missing item type\nSetup a watch on $scope.col.menuItems, and update\nmenuItems based on this.  $scope.col needs to be set by the column\nbefore calling the menu.",
            "line": " assets\\ui-grid.js:400"
        },
        {
            "message": "Missing item type\n(optional) True by default. When enabled, this setting adds sort\nwidgets to the column header, allowing sorting of the data in the individual column.",
            "line": " assets\\ui-grid.js:433"
        },
        {
            "message": "Missing item type\ndetermines whether this column is sortable",
            "line": " assets\\ui-grid.js:440"
        },
        {
            "message": "Missing item type\ndetermines whether the requested sort direction is current active, to\nallow highlighting in the menu",
            "line": " assets\\ui-grid.js:457"
        },
        {
            "message": "Missing item type\ndetermines whether we should suppress the removeSort option",
            "line": " assets\\ui-grid.js:473"
        },
        {
            "message": "Missing item type\n(optional) True by default. When set to false, this setting prevents a user from hiding the column\nusing the column menu or the grid menu.",
            "line": " assets\\ui-grid.js:491"
        },
        {
            "message": "Missing item type\ndetermines whether a column can be hidden, by checking the enableHiding columnDef option",
            "line": " assets\\ui-grid.js:498"
        },
        {
            "message": "Missing item type\nreturns the default menu items for a column menu",
            "line": " assets\\ui-grid.js:516"
        },
        {
            "message": "Missing item type\ngets the position information needed to place the column\nmenu below the column header",
            "line": " assets\\ui-grid.js:583"
        },
        {
            "message": "Missing item type\nReposition the menu below the new column.  If the menu has no child nodes\n(i.e. it's not currently visible) then we guess it's width at 100, we'll be called again\nlater to fix it",
            "line": " assets\\ui-grid.js:614"
        },
        {
            "message": "Missing item type\nProvides the column menu framework, leverages uiGridMenu underneath",
            "line": " assets\\ui-grid.js:675"
        },
        {
            "message": "Missing item type\nShows the column menu.  If the menu is already displayed it\ncalls the menu to ask it to hide (it will animate), then it repositions the menu\nto the right place whilst hidden (it will make an assumption on menu width),\nthen it asks the menu to show (it will animate), then it repositions the menu again\nonce we can calculate it's size.",
            "line": " assets\\ui-grid.js:698"
        },
        {
            "message": "Missing item type\nHides the column menu.",
            "line": " assets\\ui-grid.js:737"
        },
        {
            "message": "Missing item type\nif column menus are enabled, controls the column menus for this specific\ncolumn (i.e. if gridOptions.enableColumnMenus, then you can control column menus\nusing this option. If gridOptions.enableColumnMenus === false then you get no column\nmenus irrespective of the value of this option ).  Defaults to true.",
            "line": " assets\\ui-grid.js:1433"
        },
        {
            "message": "Missing item type\nOverride for column menus everywhere - if set to false then you get no\ncolumn menus.  Defaults to true.",
            "line": " assets\\ui-grid.js:1443"
        },
        {
            "message": "Missing item type\nMethods for working with the grid menu",
            "line": " assets\\ui-grid.js:1689"
        },
        {
            "message": "Missing item type\nSets up the gridMenu. Most importantly, sets our\nscope onto the grid object as grid.gridMenuScope, allowing us\nto operate when passed only the grid.  Second most importantly,\nwe register the 'addToGridMenu' and 'removeFromGridMenu' methods\non the core api.",
            "line": " assets\\ui-grid.js:1697"
        },
        {
            "message": "Missing item type\nadd items to the grid menu.  Used by features\nto add their menu items if they are enabled, can also be used by\nend users to add menu items.  This method has the advantage of allowing\nremove again, which can simplify management of which items are included\nin the menu when.  (Noting that in most cases the shown and active functions\nprovide a better way to handle visibility of menu items)",
            "line": " assets\\ui-grid.js:1729"
        },
        {
            "message": "Missing item type\nRemove an item from the grid menu based on a provided id. Assumes\nthat the id is unique, removes only the last instance of that id. Does nothing if\nthe specified id is not found",
            "line": " assets\\ui-grid.js:1747"
        },
        {
            "message": "Missing item type\nadd items to the grid menu.  Used by features\nto add their menu items if they are enabled, can also be used by\nend users to add menu items.  This method has the advantage of allowing\nremove again, which can simplify management of which items are included\nin the menu when.  (Noting that in most cases the shown and active functions\nprovide a better way to handle visibility of menu items)",
            "line": " assets\\ui-grid.js:1762"
        },
        {
            "message": "Missing item type\nRemove an item from the grid menu based on a provided id.  Assumes\nthat the id is unique, removes only the last instance of that id.  Does nothing if\nthe specified id is not found.  If there is no gridMenuScope or registeredMenuItems\nthen do nothing silently - the desired result is those menu items not be present and they\naren't.",
            "line": " assets\\ui-grid.js:1792"
        },
        {
            "message": "Missing item type\n(optional) An array of menu items that should be added to\nthe gridMenu.  Follow the format documented in the tutorial for column\nmenu customisation.  The context provided to the action function will\ninclude context.grid.  An alternative if working with dynamic menus is to use the\nprovided api - core.addToGridMenu and core.removeFromGridMenu, which handles\nsome of the management of items for you.",
            "line": " assets\\ui-grid.js:1827"
        },
        {
            "message": "Missing item type\ntrue by default, whether the grid menu should allow hide/show\nof columns",
            "line": " assets\\ui-grid.js:1839"
        },
        {
            "message": "Missing item type\nDecides the menu items to show in the menu.  This is a\ncombination of:\n\n- the default menu items that are always included,\n- any menu items that have been provided through the addMenuItem api. These\n  are typically added by features within the grid\n- any menu items included in grid.options.gridMenuCustomItems.  These can be\n  changed dynamically, as they're always recalculated whenever we show the\n  menu",
            "line": " assets\\ui-grid.js:1847"
        },
        {
            "message": "Missing item type\n(optional) A function that takes a title string\n(usually the col.displayName), and converts it into a display value.  The function\nmust return either a string or a promise.\n\nUsed for internationalization of the grid menu column names - for angular-translate\nyou can pass $translate as the function, for i18nService you can pass getSafeText as the\nfunction",
            "line": " assets\\ui-grid.js:1903"
        },
        {
            "message": "Missing item type\nAdds two menu items for each of the columns in columnDefs.  One\nmenu item for hide, one menu item for show.  Each is visible when appropriate\n(show when column is not visible, hide when column is visible).  Each toggles\nthe visible property on the columnDef using toggleColumnVisibility",
            "line": " assets\\ui-grid.js:1921"
        },
        {
            "message": "Missing item type\nHandles the response from gridMenuTitleFilter, adding it directly to the menu\nitem if it returns a string, otherwise waiting for the promise to resolve or reject then\nputting the result into the title",
            "line": " assets\\ui-grid.js:1986"
        },
        {
            "message": "Missing item type\nToggles the visibility of an individual column.  Expects to be\nprovided a context that has on it a gridColumn, which is the column that\nwe'll operate upon.  We change the visibility, and refresh the grid as appropriate",
            "line": " assets\\ui-grid.js:2017"
        },
        {
            "message": "Missing item type\nA group of directives that provide a one time bind to a dom element.\nAs one time bindings are not supported in Angular 1.2.* this directive provdes this capability.\nThis is done to reduce the number of watchers on the dom.\n<br/>\n<h2>Short Example ({@link ui.grid.directive:uiGridOneBindSrc ui-grid-one-bind-src})</h2>\n<pre>\n       <div ng-init=\"imageName = 'myImageDir.jpg'\">\n         <img ui-grid-one-bind-src=\"imageName\"></img>\n       </div>\n    </pre>\nWill become:\n<pre>\n      <div ng-init=\"imageName = 'myImageDir.jpg'\">\n        <img ui-grid-one-bind-src=\"imageName\" src=\"myImageDir.jpg\"></img>\n      </div>\n    </pre>\n    </br>\n    <h2>Short Example ({@link ui.grid.directive:uiGridOneBindText ui-grid-one-bind-text})</h2>\n<pre>\n       <div ng-init=\"text='Add this text'\" ui-grid-one-bind-text=\"text\"></div>\n    </pre>\nWill become:\n<pre>\n  <div ng-init=\"text='Add this text'\" ui-grid-one-bind-text=\"text\">Add this text</div>\n    </pre>\n    </br>\n<b>Note:</b> This behavior is slightly different for the {@link ui.grid.directive:uiGridOneBindIdGrid uiGridOneBindIdGrid}\nand {@link ui.grid.directive:uiGridOneBindAriaLabelledbyGrid uiGridOneBindAriaLabelledbyGrid} directives.",
            "line": " assets\\ui-grid.js:2411"
        },
        {
            "message": "Missing item type\n(optional) uiGridViewport.on('scroll', scrollHandler) by default.\nA function that allows you to provide your own scroller function. It is particularly helpful if you want to use third party scrollers\nas this allows you to do that.\n\n<div class=\"alert alert-info\" role=\"alert\"> <strong>NOTE:</strong> It is important to remember to always pass in an event object to\nthe scrollHandler as the grid scrolling behavior will break without it.</div>\n<h5>Example</h5>\n<pre>\n  $scope.gridOptions = {\n      customScroller: function myScrolling(uiGridViewport, scrollHandler) {\n          uiGridViewport.on('scroll', function myScrollingOverride(event) {\n              // Do something here\n\n              scrollHandler(event);\n          });\n      }\n  };\n</pre>",
            "line": " assets\\ui-grid.js:3134"
        },
        {
            "message": "Missing item type\nPublic Api for the core grid features",
            "line": " assets\\ui-grid.js:3743"
        },
        {
            "message": "Missing item type\nGrid is the main viewModel.  Any properties or methods needed to maintain state are defined in\nthis prototype.  One instance of Grid is created per Grid directive instance.",
            "line": " assets\\ui-grid.js:3750"
        },
        {
            "message": "Missing item type\nreference to the application scope (the parent scope of the ui-grid element).  Assigned in ui-grid controller\n<br/>\nuse gridOptions.appScopeProvider to override the default assignment of $scope.$parent with any reference",
            "line": " assets\\ui-grid.js:3775"
        },
        {
            "message": "Missing item type\nreturns the total footer height gridFooter + columnFooter",
            "line": " assets\\ui-grid.js:3788"
        },
        {
            "message": "Missing item type\nreturns the total column footer height",
            "line": " assets\\ui-grid.js:3797"
        },
        {
            "message": "Missing item type\nset to true when Grid is scrolling vertically. Set to false via debounced method",
            "line": " assets\\ui-grid.js:3840"
        },
        {
            "message": "Missing item type\nset to true when Grid is scrolling horizontally. Set to false via debounced method",
            "line": " assets\\ui-grid.js:3848"
        },
        {
            "message": "Missing item type\nset one of the {@link ui.grid.service:uiGridConstants#properties_scrollDirection uiGridConstants.scrollDirection}\n values (UP, DOWN, LEFT, RIGHT, NONE), which tells us which direction we are scrolling.\nSet to NONE via debounced method",
            "line": " assets\\ui-grid.js:3856"
        },
        {
            "message": "Missing item type\nsets isScrollingVertically to true and sets it to false in a debounced function",
            "line": " assets\\ui-grid.js:3889"
        },
        {
            "message": "Missing item type\nsets isScrollingHorizontally to true and sets it to false in a debounced function",
            "line": " assets\\ui-grid.js:3908"
        },
        {
            "message": "Missing item type\nRefresh the rendered grid on screen.\nThe refresh method re-runs both the columnProcessors and the\nrowProcessors, as well as calling refreshCanvas to update all\nthe grid sizing.  In general you should prefer to use queueGridRefresh\ninstead, which is basically a debounced version of refresh.\n\nIf you only want to resize the grid, not regenerate all the rows\nand columns, you should consider directly calling refreshCanvas instead.",
            "line": " assets\\ui-grid.js:3941"
        },
        {
            "message": "Missing item type\nRequest a refresh of the rendered grid on screen, if multiple\ncalls to queueGridRefresh are made within a digest cycle only one will execute.\nThe refresh method re-runs both the columnProcessors and the\nrowProcessors, as well as calling refreshCanvas to update all\nthe grid sizing.  In general you should prefer to use queueGridRefresh\ninstead, which is basically a debounced version of refresh.",
            "line": " assets\\ui-grid.js:3958"
        },
        {
            "message": "Missing item type\nRuns only the rowProcessors, columns remain as they were.\nIt then calls redrawInPlace and refreshCanvas, which adjust the grid sizing.",
            "line": " assets\\ui-grid.js:3972"
        },
        {
            "message": "Missing item type\nRequests execution of refreshCanvas, if multiple requests are made\nduring a digest cycle only one will run.  RefreshCanvas updates the grid sizing.",
            "line": " assets\\ui-grid.js:3983"
        },
        {
            "message": "Missing item type\nTrigger a grid resize, normally this would be picked\nup by a watch on window size, but in some circumstances it is necessary\nto call this manually",
            "line": " assets\\ui-grid.js:3994"
        },
        {
            "message": "Missing item type\nadds a row header column to the grid",
            "line": " assets\\ui-grid.js:4007"
        },
        {
            "message": "Missing item type\nScrolls the grid to make a certain row and column combo visible,\n  in the case that it is not completely visible on the screen already.",
            "line": " assets\\ui-grid.js:4019"
        },
        {
            "message": "Missing item type\nScroll the grid such that the specified\nrow and column is in view",
            "line": " assets\\ui-grid.js:4032"
        },
        {
            "message": "Missing item type\nRegister a \"rows processor\" function. When the rows are updated,\nthe grid calls each registered \"rows processor\", which has a chance\nto alter the set of rows (sorting, etc) as long as the count is not\nmodified.",
            "line": " assets\\ui-grid.js:4044"
        },
        {
            "message": "Missing item type\nRegister a \"columns processor\" function. When the columns are updated,\nthe grid calls each registered \"columns processor\", which has a chance\nto alter the set of columns as long as the count is not\nmodified.",
            "line": " assets\\ui-grid.js:4065"
        },
        {
            "message": "Missing item type\nA null handling method that can be used when building custom sort\nfunctions",
            "line": " assets\\ui-grid.js:4087"
        },
        {
            "message": "Missing item type\nThe sort criteria on one or more columns has\nchanged.  Provides as parameters the grid and the output of\ngetColumnSorting, which is an array of gridColumns\nthat have sorting on them, sorted in priority order.",
            "line": " assets\\ui-grid.js:4112"
        },
        {
            "message": "Missing item type\nThe visibility of a column has changed,\nthe column itself is passed out as a parameter of the event.",
            "line": " assets\\ui-grid.js:4134"
        },
        {
            "message": "Missing item type\nNotify the grid that a data or config change has occurred,\nwhere that change isn't something the grid was otherwise noticing.  This\nmight be particularly relevant where you've changed values within the data\nand you'd like cell classes to be re-evaluated, or changed config within\nthe columnDef and you'd like headerCellClasses to be re-evaluated.",
            "line": " assets\\ui-grid.js:4153"
        },
        {
            "message": "Missing item type\nClears all filters and optionally refreshes the visible rows.",
            "line": " assets\\ui-grid.js:4169"
        },
        {
            "message": "Missing item type\nReturns true if grid is RightToLeft",
            "line": " assets\\ui-grid.js:4226"
        },
        {
            "message": "Missing item type\nWhen the build creates columns from column definitions, the columnbuilders will be called to add\nadditional properties to the column.",
            "line": " assets\\ui-grid.js:4237"
        },
        {
            "message": "Missing item type\nPopulates columnDefs from the provided data",
            "line": " assets\\ui-grid.js:4249"
        },
        {
            "message": "Missing item type\nWhen the build creates rows from gridOptions.data, the rowBuilders will be called to add\nadditional properties to the row.",
            "line": " assets\\ui-grid.js:4260"
        },
        {
            "message": "Missing item type\nWhen a data change occurs, the data change callbacks of the specified type\nwill be called.  The rules are:\n\n- when the data watch fires, that is considered a ROW change (the data watch only notices\n  added or removed rows)\n- when the api is called to inform us of a change, the declared type of that change is used\n- when a cell edit completes, the EDIT callbacks are triggered\n- when the columnDef watch fires, the COLUMN callbacks are triggered\n- when the options watch fires, the OPTIONS callbacks are triggered\n\nFor a given event:\n- ALL calls ROW, EDIT, COLUMN, OPTIONS and ALL callbacks\n- ROW calls ROW and ALL callbacks\n- EDIT calls EDIT and ALL callbacks\n- COLUMN calls COLUMN and ALL callbacks\n- OPTIONS calls OPTIONS and ALL callbacks",
            "line": " assets\\ui-grid.js:4273"
        },
        {
            "message": "Missing item type\nCalls the callbacks based on the type of data change that\nhas occurred. Always calls the ALL callbacks, calls the ROW, EDIT, COLUMN and OPTIONS callbacks if the\nevent type is matching, or if the type is ALL.",
            "line": " assets\\ui-grid.js:4317"
        },
        {
            "message": "Missing item type\nNotifies us that a data change has occurred, used in the public\napi for users to tell us when they've changed data or some other event that\nour watches cannot pick up",
            "line": " assets\\ui-grid.js:4343"
        },
        {
            "message": "Missing item type\nrefreshes the grid when a column refresh\nis notified, which triggers handling of the visible flag.\nThis is called on uiGridConstants.dataChange.COLUMN, and is\nregistered as a dataChangeCallback in grid.js",
            "line": " assets\\ui-grid.js:4367"
        },
        {
            "message": "Missing item type\ncalls the row processors, specifically\nintended to reset the sorting when an edit is called,\nregistered as a dataChangeCallback on uiGridConstants.dataChange.EDIT",
            "line": " assets\\ui-grid.js:4384"
        },
        {
            "message": "Missing item type\nrecalculates the footer height,\nregistered as a dataChangeCallback on uiGridConstants.dataChange.OPTIONS",
            "line": " assets\\ui-grid.js:4398"
        },
        {
            "message": "Missing item type\nreturns a grid column for the column name",
            "line": " assets\\ui-grid.js:4412"
        },
        {
            "message": "Missing item type\nreturns a grid colDef for the column name",
            "line": " assets\\ui-grid.js:4426"
        },
        {
            "message": "Missing item type\nuses the first row of data to assign colDef.type for any types not defined.",
            "line": " assets\\ui-grid.js:4440"
        },
        {
            "message": "Missing item type\nthe type of the column, used in sorting.  If not provided then the\ngrid will guess the type.  Add this only if the grid guessing is not to your\nsatisfaction.  One of:\n- 'string'\n- 'boolean'\n- 'number'\n- 'date'\n- 'object'\n- 'numberStr'\nNote that if you choose date, your dates should be in a javascript date type",
            "line": " assets\\ui-grid.js:4446"
        },
        {
            "message": "Missing item type\nreturns true if the column is a row Header",
            "line": " assets\\ui-grid.js:4481"
        },
        {
            "message": "Missing item type\nadds a row header column to the grid",
            "line": " assets\\ui-grid.js:4492"
        },
        {
            "message": "Missing item type\nreturns all columns except for rowHeader columns",
            "line": " assets\\ui-grid.js:4544"
        },
        {
            "message": "Missing item type\ncreates GridColumn objects from the columnDefinition.  Calls each registered\ncolumnBuilder to further process the column",
            "line": " assets\\ui-grid.js:4561"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:4624"
        },
        {
            "message": "Missing item type\nprecompiles all cell templates",
            "line": " assets\\ui-grid.js:4677"
        },
        {
            "message": "Missing item type\nReturns the $parse-able accessor for a column within its $scope",
            "line": " assets\\ui-grid.js:4696"
        },
        {
            "message": "Missing item type\ncreates the left render container if it doesn't already exist",
            "line": " assets\\ui-grid.js:4711"
        },
        {
            "message": "Missing item type\ncreates the right render container if it doesn't already exist",
            "line": " assets\\ui-grid.js:4723"
        },
        {
            "message": "Missing item type\nreturns true if leftContainer exists",
            "line": " assets\\ui-grid.js:4735"
        },
        {
            "message": "Missing item type\nreturns true if rightContainer exists",
            "line": " assets\\ui-grid.js:4745"
        },
        {
            "message": "Missing item type\ndefaults the name property from field to maintain backwards compatibility with 2.x\nvalidates that name or field is present",
            "line": " assets\\ui-grid.js:4756"
        },
        {
            "message": "Missing item type\nreturns the GridRow that contains the rowEntity",
            "line": " assets\\ui-grid.js:4808"
        },
        {
            "message": "Missing item type\ncreates or removes GridRow objects from the newRawData array.  Calls each registered\nrowBuilder to further process the row",
            "line": " assets\\ui-grid.js:4829"
        },
        {
            "message": "Missing item type\nadds the newRawData array of rows to the grid and calls all registered\nrowBuilders. this keyword will reference the grid",
            "line": " assets\\ui-grid.js:4928"
        },
        {
            "message": "Missing item type\nprocesses all RowBuilders for the gridRow",
            "line": " assets\\ui-grid.js:4953"
        },
        {
            "message": "Missing item type\nregistered a styleComputation function\n\nIf the function returns a value it will be appended into the grid's `<style>` block",
            "line": " assets\\ui-grid.js:4971"
        },
        {
            "message": "Missing item type\nRegister a \"rows processor\" function. When the rows are updated,\nthe grid calls each registered \"rows processor\", which has a chance\nto alter the set of rows (sorting, etc) as long as the count is not\nmodified.",
            "line": " assets\\ui-grid.js:5008"
        },
        {
            "message": "Missing item type\nRemove a registered rows processor",
            "line": " assets\\ui-grid.js:5039"
        },
        {
            "message": "Missing item type\nRun all the registered rows processors on the array of renderable rows",
            "line": " assets\\ui-grid.js:5059"
        },
        {
            "message": "Missing item type\nRegister a \"columns processor\" function. When the columns are updated,\n    the grid calls each registered \"columns processor\", which has a chance\n    to alter the set of columns, as long as the count is not modified.",
            "line": " assets\\ui-grid.js:5160"
        },
        {
            "message": "Missing item type\nTriggered when the browser window resizes; automatically resizes the grid",
            "line": " assets\\ui-grid.js:5286"
        },
        {
            "message": "Missing item type\nqueues a grid refreshCanvas, a way of debouncing all the refreshes we might otherwise issue",
            "line": " assets\\ui-grid.js:5302"
        },
        {
            "message": "Missing item type\nqueues a grid refresh, a way of debouncing all the refreshes we might otherwise issue",
            "line": " assets\\ui-grid.js:5327"
        },
        {
            "message": "Missing item type\nflags all render containers to update their canvas height",
            "line": " assets\\ui-grid.js:5352"
        },
        {
            "message": "Missing item type\ncalls each styleComputation function",
            "line": " assets\\ui-grid.js:5369"
        },
        {
            "message": "Missing item type\nScroll needed containers by calling their ScrollSyncs",
            "line": " assets\\ui-grid.js:5495"
        },
        {
            "message": "Missing item type\nGets the value of a cell for a particular row and column",
            "line": " assets\\ui-grid.js:5611"
        },
        {
            "message": "Missing item type\nGets the displayed value of a cell after applying any the `cellFilter`",
            "line": " assets\\ui-grid.js:5633"
        },
        {
            "message": "Missing item type\nReturn the columns that the grid is currently being sorted by",
            "line": " assets\\ui-grid.js:5673"
        },
        {
            "message": "Missing item type\nReturn the columns that the grid is currently being sorted by",
            "line": " assets\\ui-grid.js:5690"
        },
        {
            "message": "Missing item type\nSet the sorting on a given column, optionally resetting any existing sorting on the Grid.\nEmits the sortChanged event whenever the sort criteria are changed.",
            "line": " assets\\ui-grid.js:5715"
        },
        {
            "message": "Missing item type\ncommunicate to outside world that we are done with initial rendering",
            "line": " assets\\ui-grid.js:5795"
        },
        {
            "message": "Missing item type\nRefresh the rendered grid on screen.",
            "line": " assets\\ui-grid.js:5815"
        },
        {
            "message": "Missing item type\nRefresh the rendered rows on screen?  Note: not functional at present",
            "line": " assets\\ui-grid.js:5839"
        },
        {
            "message": "Missing item type\nBuilds all styles and recalculates much of the grid sizing",
            "line": " assets\\ui-grid.js:5860"
        },
        {
            "message": "Missing item type\nRedraw the rows and columns based on our current scroll position",
            "line": " assets\\ui-grid.js:6020"
        },
        {
            "message": "Missing item type\nreturns true if leftContainer has columns",
            "line": " assets\\ui-grid.js:6049"
        },
        {
            "message": "Missing item type\nreturns true if rightContainer has columns",
            "line": " assets\\ui-grid.js:6059"
        },
        {
            "message": "Missing item type\nScrolls the grid to make a certain row and column combo visible,\n  in the case that it is not completely visible on the screen already.",
            "line": " assets\\ui-grid.js:6069"
        },
        {
            "message": "Missing item type\nScroll the grid such that the specified\nrow and column is in view",
            "line": " assets\\ui-grid.js:6228"
        },
        {
            "message": "Missing item type\nClears all filters and optionally refreshes the visible rows.",
            "line": " assets\\ui-grid.js:6251"
        },
        {
            "message": "Missing item type\nStore key value pair",
            "line": " assets\\ui-grid.js:6297"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:6306"
        },
        {
            "message": "Missing item type\nRemove the key/value pair",
            "line": " assets\\ui-grid.js:6314"
        },
        {
            "message": "Missing item type\nGridApi provides the ability to register public methods events inside the grid and allow\nfor other components to use the api via featureName.raise.methodName and featureName.on.eventName(function(args){}.\n<br/>\nTo listen to events, you must add a callback to gridOptions.onRegisterApi\n<pre>\n  $scope.gridOptions.onRegisterApi = function(gridApi){\n     gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){\n         $log.log('navigation event');\n     });\n  };\n</pre>",
            "line": " assets\\ui-grid.js:6338"
        },
        {
            "message": "Missing item type\nRendering is complete, called at the same\ntime as `onRegisterApi`, but provides a way to obtain\nthat same event within features without stopping end\nusers from getting at the onRegisterApi method.\n\nIncluded in gridApi so that it's always there - otherwise\nthere is still a timing problem with when a feature can\ncall this.",
            "line": " assets\\ui-grid.js:6358"
        },
        {
            "message": "Missing item type\nis raised after the filter is changed.  The nature\nof the watch expression doesn't allow notification of what changed,\nso the receiver of this event will need to re-extract the filter\nconditions from the columns.",
            "line": " assets\\ui-grid.js:6381"
        },
        {
            "message": "Missing item type\nSets an override on the row to make it always invisible,\nwhich will override any filtering or other visibility calculations.\nIf the row is currently visible then sets it to invisible and calls\nboth grid refresh and emits the rowsVisibleChanged event",
            "line": " assets\\ui-grid.js:6393"
        },
        {
            "message": "Missing item type\nClears any override on visibility for the row so that it returns to\nusing normal filtering and other visibility calculations.\nIf the row is currently invisible then sets it to visible and calls\nboth grid refresh and emits the rowsVisibleChanged event\nTODO: if a filter is active then we can't just set it to visible?",
            "line": " assets\\ui-grid.js:6405"
        },
        {
            "message": "Missing item type\nReturns all visible rows",
            "line": " assets\\ui-grid.js:6418"
        },
        {
            "message": "Missing item type\nis raised after the rows that are visible\nchange.  The filtering is zero-based, so it isn't possible\nto say which rows changed (unlike in the selection feature).\nWe can plausibly know which row was changed when setRowInvisible\nis called, but in that situation the user already knows which row\nthey changed.  When a filter runs we don't know what changed,\nand that is the one that would have been useful.",
            "line": " assets\\ui-grid.js:6428"
        },
        {
            "message": "Missing item type\nis raised after the cache of visible rows is changed.",
            "line": " assets\\ui-grid.js:6443"
        },
        {
            "message": "Missing item type\nis raised when scroll begins.  Is throttled, so won't be raised too frequently",
            "line": " assets\\ui-grid.js:6452"
        },
        {
            "message": "Missing item type\nis raised when scroll has finished.  Is throttled, so won't be raised too frequently",
            "line": " assets\\ui-grid.js:6460"
        },
        {
            "message": "Missing item type\nis raised when the canvas height has changed\n<br/>\narguments: oldHeight, newHeight",
            "line": " assets\\ui-grid.js:6468"
        },
        {
            "message": "Missing item type\nis raised when the grid dimensions have changed (when autoResize is on)\n<br/>\narguments: oldGridHeight, oldGridWidth, newGridHeight, newGridWidth",
            "line": " assets\\ui-grid.js:6478"
        },
        {
            "message": "Missing item type\nUsed to execute a function while disabling the specified event listeners.\nDisables the listenerFunctions, executes the callbackFn, and then enables\nthe listenerFunctions again",
            "line": " assets\\ui-grid.js:6489"
        },
        {
            "message": "Missing item type\nRegisters a new event for the given feature.  The event will get a\n.raise and .on prepended to it\n<br>\n.raise.eventName() - takes no arguments\n<br/>\n<br/>\n.on.eventName(scope, callBackFn, _this)\n<br/>\nscope - a scope reference to add a deregister call to the scopes .$on('destroy').  Scope is optional and can be a null value,\nbut in this case you must deregister it yourself via the returned deregister function\n<br/>\ncallBackFn - The function to call\n<br/>\n_this - optional this context variable for callbackFn. If omitted, grid.api will be used for the context\n<br/>\n.on.eventName returns a dereg funtion that will remove the listener.  It's not necessary to use it as the listener\nwill be removed when the scope is destroyed.",
            "line": " assets\\ui-grid.js:6541"
        },
        {
            "message": "Missing item type\nRegisters features and events from a simple objectMap.\neventObjectMap must be in this format (multiple features allowed)\n<pre>\n{featureName:\n       {\n         eventNameOne:function(args){},\n         eventNameTwo:function(args){}\n       }\n }\n</pre>",
            "line": " assets\\ui-grid.js:6622"
        },
        {
            "message": "Missing item type\nRegisters a new event for the given feature",
            "line": " assets\\ui-grid.js:6657"
        },
        {
            "message": "Missing item type\nRegisters features and methods from a simple objectMap.\neventObjectMap must be in this format (multiple features allowed)\n<br>\n{featureName:\n       {\n         methodNameOne:function(args){},\n         methodNameTwo:function(args){}\n       }",
            "line": " assets\\ui-grid.js:6677"
        },
        {
            "message": "Missing item type\n******************************************************************************************\nPaulL1: Ugly hack here in documentation.  These properties are clearly properties of GridColumn,\nand need to be noted as such for those extending and building ui-grid itself.\nHowever, from an end-developer perspective, they interact with all these through columnDefs,\nand they really need to be documented there.  I feel like they're relatively static, and\nI can't find an elegant way for ngDoc to reference to both....so I've duplicated each\ncomment block.  Ugh.",
            "line": " assets\\ui-grid.js:6722"
        },
        {
            "message": "Missing item type\n(mandatory) Each column should have a name, although for backward\ncompatibility with 2.x name can be omitted if field is present.\n\nImportant - This must be unique to each column on a web page since it can\nbe used as a key for retrieving information such as custom sort algorithms.",
            "line": " assets\\ui-grid.js:6733"
        },
        {
            "message": "Missing item type\n(mandatory) Each column should have a name, although for backward\ncompatibility with 2.x name can be omitted if field is present.\n\nImportant - This must be unique to each column on a web page since it can\nbe used as a key for retrieving information such as custom sort algorithms.",
            "line": " assets\\ui-grid.js:6745"
        },
        {
            "message": "Missing item type\nColumn name that will be shown in the header.  If displayName is not\nprovided then one is generated using the name.",
            "line": " assets\\ui-grid.js:6757"
        },
        {
            "message": "Missing item type\nColumn name that will be shown in the header.  If displayName is not\nprovided then one is generated using the name.",
            "line": " assets\\ui-grid.js:6766"
        },
        {
            "message": "Missing item type\nfield must be provided if you wish to bind to a\nproperty in the data source.  Should be an angular expression that evaluates against grid.options.data\narray element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.\nSee the angular docs on binding expressions.",
            "line": " assets\\ui-grid.js:6775"
        },
        {
            "message": "Missing item type\nfield must be provided if you wish to bind to a\nproperty in the data source.  Should be an angular expression that evaluates against grid.options.data\narray element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.    * See the angular docs on binding expressions.    *",
            "line": " assets\\ui-grid.js:6786"
        },
        {
            "message": "Missing item type\nFilter on this column.\n\nAvailable built-in conditions and types are listed under {@link jui.grid.service:uiGridConstants#properties_filter uiGridOptions.filter}",
            "line": " assets\\ui-grid.js:6795"
        },
        {
            "message": "Missing item type\nadditional on this column.",
            "line": " assets\\ui-grid.js:6807"
        },
        {
            "message": "Missing item type\nRepresents the viewModel for each column.  Any state or methods needed for a Grid Column\nare defined on this prototype",
            "line": " assets\\ui-grid.js:6817"
        },
        {
            "message": "Missing item type\nThe aggregation that you'd like to show in the columnFooter for this\ncolumn.  Valid values are in\n{@link ui.grid.service:uiGridConstants#properties_aggregationTypes uiGridConstants.aggregationTypes},\nand currently include `uiGridConstants.aggregationTypes.count`,\n`uiGridConstants.aggregationTypes.sum`, `uiGridConstants.aggregationTypes.avg`, `uiGridConstants.aggregationTypes.min`,\n`uiGridConstants.aggregationTypes.max`.\n\nYou can also provide a function as the aggregation type, in this case your function needs to accept the full\nset of visible rows, and return a value that should be shown",
            "line": " assets\\ui-grid.js:6842"
        },
        {
            "message": "Missing item type\ngets the aggregation value based on the aggregation type for this column.\nDebounced using scrollDebounce option setting",
            "line": " assets\\ui-grid.js:6908"
        },
        {
            "message": "Missing item type\nHides the column by setting colDef.visible = false",
            "line": " assets\\ui-grid.js:6924"
        },
        {
            "message": "Missing item type\nSets a property on the column using the passed in columnDef, and\nsetting the defaultValue if the value cannot be found on the colDef",
            "line": " assets\\ui-grid.js:6935"
        },
        {
            "message": "Missing item type\nsets the column width.  Can be either\na number or a percentage, or an * for auto.",
            "line": " assets\\ui-grid.js:6964"
        },
        {
            "message": "Missing item type\nsets the minimum column width.  Should be a number.",
            "line": " assets\\ui-grid.js:6977"
        },
        {
            "message": "Missing item type\nsets the maximum column width.  Should be a number.",
            "line": " assets\\ui-grid.js:6987"
        },
        {
            "message": "Missing item type\nsets whether or not the column is visible\n</br>Default is true",
            "line": " assets\\ui-grid.js:6997"
        },
        {
            "message": "Missing item type\nAn object of sort information, attributes are:\n\n- direction: values are {@link ui.grid.service:uiGridConstants#properties_ASC uiGridConstants.ASC}\n or {@link ui.grid.service:uiGridConstants#properties_DESC uiGridConstants.DESC}\n- ignoreSort: if set to true this sort is ignored (used by tree to manipulate the sort functionality)\n- priority: says what order to sort the columns in (lower priority gets sorted first).",
            "line": " assets\\ui-grid.js:7011"
        },
        {
            "message": "Missing item type\nAlgorithm to use for sorting this column. Takes 'a' and 'b' parameters\nlike any normal sorting function with additional 'rowA', 'rowB', and 'direction' parameters\nthat are the row objects and the current direction of the sort respectively.",
            "line": " assets\\ui-grid.js:7035"
        },
        {
            "message": "Missing item type\nAn object of sort information, provides a hidden default ordering of the data\nwhen no user sorts are applied, or when a user-provided sort deems two rows to be equal.\n\nMay be combined with a regular {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort}\nto explicitly sort by that column by default.\n\nShares the same object format as {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort}.\n\nNote that a defaultSort can never take priority over an explicit sort.",
            "line": " assets\\ui-grid.js:7045"
        },
        {
            "message": "Missing item type\nSpecify multiple filter fields.",
            "line": " assets\\ui-grid.js:7070"
        },
        {
            "message": "Missing item type\nFilters for this column. Includes 'term' property bound to filter input elements.",
            "line": " assets\\ui-grid.js:7099"
        },
        {
            "message": "Missing item type\nused to add menu items to a column.  Refer to the tutorial on this\nfunctionality.  A number of settings are supported:\n\n- title: controls the title that is displayed in the menu\n- icon: the icon shown alongside that title\n- action: the method to call when the menu is clicked\n- shown: a function to evaluate to determine whether or not to show the item\n- active: a function to evaluate to determine whether or not the item is currently selected\n- context: context to pass to the action function, available in this.context in your handler\n- leaveOpen: if set to true, the menu should stay open after the action, defaults to false",
            "line": " assets\\ui-grid.js:7125"
        },
        {
            "message": "Missing item type\nMoves settings from the columnDef down onto the column,\nand sets properties as appropriate",
            "line": " assets\\ui-grid.js:7162"
        },
        {
            "message": "Missing item type\nWhether or not to show a tooltip when a user hovers over the cell.\nIf set to false, no tooltip.  If true, the cell value is shown in the tooltip (useful\nif you have long values in your cells), if a function then that function is called\npassing in the row and the col `cellTooltip( row, col )`, and the return value is shown in the tooltip,\nif it is a static string then displays that static string.\n\nDefaults to false",
            "line": " assets\\ui-grid.js:7256"
        },
        {
            "message": "Missing item type\nWhether or not to show a tooltip when a user hovers over the header cell.\nIf set to false, no tooltip.  If true, the displayName is shown in the tooltip (useful\nif you have long values in your headers), if a function then that function is called\npassing in the row and the col `headerTooltip( col )`, and the return value is shown in the tooltip,\nif a static string then shows that static string.\n\nDefaults to false",
            "line": " assets\\ui-grid.js:7283"
        },
        {
            "message": "Missing item type\nfooterCellClass can be a string specifying the class to append to a cell\nor it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name",
            "line": " assets\\ui-grid.js:7311"
        },
        {
            "message": "Missing item type\ncellClass can be a string specifying the class to append to a cell\nor it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name",
            "line": " assets\\ui-grid.js:7321"
        },
        {
            "message": "Missing item type\nheaderCellClass can be a string specifying the class to append to a cell\nor it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name",
            "line": " assets\\ui-grid.js:7331"
        },
        {
            "message": "Missing item type\ncellFilter is a filter to apply to the content of each cell",
            "line": " assets\\ui-grid.js:7341"
        },
        {
            "message": "Missing item type\n(optional) False by default. When `true` uiGrid will apply the cellFilter before\nsorting the data. Note that when using this option uiGrid will assume that the displayed value is\na string, and use the {@link ui.grid.class:RowSorter#sortAlpha sortAlpha} `sortFn`. It is possible\nto return a non-string value from an angularjs filter, in which case you should define a {@link ui.grid.class:GridOptions.columnDef#sortingAlgorithm sortingAlgorithm}\nfor the column which hanldes the returned type. You may specify one of the `sortingAlgorithms`\nfound in the {@link ui.grid.RowSorter rowSorter} service.",
            "line": " assets\\ui-grid.js:7353"
        },
        {
            "message": "Missing item type\n(optional) False by default. When `true` uiGrid will apply the cellFilter before\napplying \"search\" `filters`.",
            "line": " assets\\ui-grid.js:7366"
        },
        {
            "message": "Missing item type\nheaderCellFilter is a filter to apply to the content of the column header",
            "line": " assets\\ui-grid.js:7375"
        },
        {
            "message": "Missing item type\nfooterCellFilter is a filter to apply to the content of the column footer",
            "line": " assets\\ui-grid.js:7387"
        },
        {
            "message": "Missing item type\n(optional) An array of {@link ui.grid.service:uiGridConstants#properties_ASC sort directions},\nspecifying the order that they should cycle through as the user repeatedly clicks on the column heading.\nThe default is `[null, uiGridConstants.ASC, uiGridConstants.DESC]`. Null\nrefers to the unsorted state. This does not affect the initial sort\ndirection; use the {@link ui.grid.class:GridOptions.columnDef#sort sort}\nproperty for that. If\n{@link ui.grid.class:GridOptions.columnDef#suppressRemoveSort suppressRemoveSort}\nis also set, the unsorted state will be skipped even if it is listed here.\nEach direction may not appear in the list more than once (e.g. `[ASC,\nDESC, DESC]` is not allowed), and the list may not be empty.",
            "line": " assets\\ui-grid.js:7408"
        },
        {
            "message": "Missing item type\n(optional) False by default. When enabled, this setting hides the removeSort option\nin the menu, and prevents users from manually removing the sort",
            "line": " assets\\ui-grid.js:7427"
        },
        {
            "message": "Missing item type\nturn off filtering for an individual column, where\nyou've turned on filtering for the overall grid",
            "line": " assets\\ui-grid.js:7438"
        },
        {
            "message": "Missing item type\nSpecify a single filter field on this column.\n\nA filter consists of a condition, a term, and a placeholder:\n\n- condition defines how rows are chosen as matching the filter term. This can be set to\none of the constants in {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter},\nor you can supply a custom filter function\nthat gets passed the following arguments: [searchTerm, cellValue, row, column].\n- term: If set, the filter field will be pre-populated\nwith this value.\n- placeholder: String that will be set to the `<input>.placeholder` attribute.\n- ariaLabel: String that will be set to the `<input>.ariaLabel` attribute. This is what is read as a label to screen reader users.\n- noTerm: set this to true if you have defined a custom function in condition, and\nyour custom function doesn't require a term (so it can run even when the term is null)\n- rawTerm: set this to true if you have defined a custom function in condition, and\nyour custom function requires access to the raw unmodified search term that was entered\n- flags: only flag currently available is `caseSensitive`, set to false if you don't want\ncase sensitive matching\n- type: defaults to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.INPUT},\nwhich gives a text box.  If set to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.SELECT}\nthen a select box will be shown with options selectOptions\n- selectOptions: options in the format `[ { value: 1, label: 'male' }]`.  No i18n filter is provided, you need\nto perform the i18n on the values before you provide them\n- disableCancelFilterButton: defaults to false. If set to true then the 'x' button that cancels/clears the filter\nwill not be shown.",
            "line": " assets\\ui-grid.js:7485"
        },
        {
            "message": "Missing item type\nRemoves column from the grid sorting",
            "line": " assets\\ui-grid.js:7581"
        },
        {
            "message": "Missing item type\nReturns the class name for the column",
            "line": " assets\\ui-grid.js:7602"
        },
        {
            "message": "Missing item type\nReturns true if column is in the left render container",
            "line": " assets\\ui-grid.js:7615"
        },
        {
            "message": "Missing item type\nReturns true if column is in the right render container",
            "line": " assets\\ui-grid.js:7625"
        },
        {
            "message": "Missing item type\nReturns the class definition for th column",
            "line": " assets\\ui-grid.js:7636"
        },
        {
            "message": "Missing item type\nReturns the render container object that this column belongs to.\n\nColumns will be default be in the `body` render container if they aren't allocated to one specifically.",
            "line": " assets\\ui-grid.js:7646"
        },
        {
            "message": "Missing item type\nMakes the column visible by setting colDef.visible = true",
            "line": " assets\\ui-grid.js:7666"
        },
        {
            "message": "Missing item type\ndefaults to false, if set to true hides the label text\nin the aggregation footer, so only the value is displayed.",
            "line": " assets\\ui-grid.js:7677"
        },
        {
            "message": "Missing item type\nGets the aggregation label from colDef.aggregationLabel if\nspecified or by using i18n, including deciding whether or not to display\nbased on colDef.aggregationHideLabel.",
            "line": " assets\\ui-grid.js:7685"
        },
        {
            "message": "Missing item type\nDefault GridOptions class.  GridOptions are defined by the application developer and overlaid\nover this object.  Setting gridOptions within your controller is the most common method for an application\ndeveloper to configure the behaviour of their ui-grid",
            "line": " assets\\ui-grid.js:7744"
        },
        {
            "message": "Missing item type\nA callback that returns the gridApi once the grid is instantiated, which is\nthen used to interact with the grid programatically.\n\nNote that the gridApi.core.renderingComplete event is identical to this\ncallback, but has the advantage that it can be called from multiple places\nif needed",
            "line": " assets\\ui-grid.js:7783"
        },
        {
            "message": "Missing item type\n(mandatory) Array of data to be rendered into the grid, providing the data source or data binding for\nthe grid.\n\nMost commonly the data is an array of objects, where each object has a number of attributes.\nEach attribute automatically becomes a column in your grid.  This array could, for example, be sourced from\nan angularJS $resource query request.  The array can also contain complex objects, refer the binding tutorial\nfor examples of that.\n\nThe most flexible usage is to set your data on $scope:\n\n`$scope.data = data;`\n\nAnd then direct the grid to resolve whatever is in $scope.data:\n\n`$scope.gridOptions.data = 'data';`\n\nThis is the most flexible approach as it allows you to replace $scope.data whenever you feel like it without\ngetting pointer issues.\n\nAlternatively you can directly set the data array:\n\n`$scope.gridOptions.data = [ ];`\nor\n\n`$http.get('/data/100.json')\n.success(function(data) {\n  $scope.myData = data;\n  $scope.gridOptions.data = $scope.myData;\n });`\n\nWhere you do this, you need to take care in updating the data - you can't just update `$scope.myData` to some other\narray, you need to update $scope.gridOptions.data to point to that new array as well.",
            "line": " assets\\ui-grid.js:7805"
        },
        {
            "message": "Missing item type\nArray of columnDef objects.  Only required property is name.\nThe individual options available in columnDefs are documented in the\n{@link ui.grid.class:GridOptions.columnDef columnDef} section\n</br>_field property can be used in place of name for backwards compatibility with 2.x_",
            "line": " assets\\ui-grid.js:7845"
        },
        {
            "message": "Missing item type\nDefinition / configuration of an individual column, which would typically be\none of many column definitions within the gridOptions.columnDefs array",
            "line": " assets\\ui-grid.js:7860"
        },
        {
            "message": "Missing item type\nArray of property names in data to ignore when auto-generating column names.  Provides the\ninverse of columnDefs - columnDefs is a list of columns to include, excludeProperties is a list of columns\nto exclude.\n\nIf columnDefs is defined, this will be ignored.\n\nDefaults to ['$$hashKey']",
            "line": " assets\\ui-grid.js:7871"
        },
        {
            "message": "Missing item type\nTrue by default. When enabled, this setting allows uiGrid to add\n`$$hashKey`-type properties (similar to Angular) to elements in the `data` array. This allows\nthe grid to maintain state while vastly speeding up the process of altering `data` by adding/moving/removing rows.\n\nNote that this DOES add properties to your data that you may not want, but they are stripped out when using `angular.toJson()`. IF\nyou do not want this at all you can disable this setting but you will take a performance hit if you are using large numbers of rows\nand are altering the data set often.",
            "line": " assets\\ui-grid.js:7886"
        },
        {
            "message": "Missing item type\nThis function is used to get and, if necessary, set the value uniquely identifying this row (i.e. if an identity is not present it will set one).\n\nBy default it returns the `$$hashKey` property if it exists. If it doesn't it uses gridUtil.nextUid() to generate one",
            "line": " assets\\ui-grid.js:7900"
        },
        {
            "message": "Missing item type\nThis function returns the identity value uniquely identifying this row, if one is not present it does not set it.\n\nBy default it returns the `$$hashKey` property but can be overridden to use any property or set of properties you want.",
            "line": " assets\\ui-grid.js:7912"
        },
        {
            "message": "Missing item type\nSet to true if your columns are all related directly to fields in a flat object structure - i.e.\neach of your columns associate directly with a property on each of the entities in your data array.\n\nIn that situation we can avoid all the logic associated with complex binding to functions or to properties of sub-objects,\nwhich can provide a significant speed improvement with large data sets when filtering or sorting.\n\nBy default false",
            "line": " assets\\ui-grid.js:7924"
        },
        {
            "message": "Missing item type\nTrue by default. When set to false, this setting will replace the\nstandard header template with '<div></div>', resulting in no header being shown.",
            "line": " assets\\ui-grid.js:7938"
        },
        {
            "message": "Missing item type\nThe height of the row in pixels,  Can be passed as integer or string. defaults to 30.",
            "line": " assets\\ui-grid.js:7961"
        },
        {
            "message": "Missing item type\nMinimum number of rows to show when the grid doesn't have a defined height. Defaults to \"10\".",
            "line": " assets\\ui-grid.js:7977"
        },
        {
            "message": "Missing item type\nWhether or not to show the footer, defaults to false\nThe footer display Total Rows and Visible Rows (filtered rows)",
            "line": " assets\\ui-grid.js:7985"
        },
        {
            "message": "Missing item type\nWhether or not to show the column footer, defaults to false\nThe column footer displays column aggregates",
            "line": " assets\\ui-grid.js:7994"
        },
        {
            "message": "Missing item type\nThe height of the footer rows (column footer and grid footer) in pixels",
            "line": " assets\\ui-grid.js:8003"
        },
        {
            "message": "Missing item type\nDefaults to 200",
            "line": " assets\\ui-grid.js:8015"
        },
        {
            "message": "Missing item type\nTurn virtualization on when number of data elements goes over this number, defaults to 20",
            "line": " assets\\ui-grid.js:8024"
        },
        {
            "message": "Missing item type\nTurn virtualization on when number of columns goes over this number, defaults to 10",
            "line": " assets\\ui-grid.js:8032"
        },
        {
            "message": "Missing item type\nExtra rows to to render outside of the viewport, which helps with smoothness of scrolling.\nDefaults to 4",
            "line": " assets\\ui-grid.js:8040"
        },
        {
            "message": "Missing item type\nDefaults to 4",
            "line": " assets\\ui-grid.js:8048"
        },
        {
            "message": "Missing item type\nExtra columns to to render outside of the viewport, which helps with smoothness of scrolling.\nDefaults to 4",
            "line": " assets\\ui-grid.js:8056"
        },
        {
            "message": "Missing item type\nDefaults to 4",
            "line": " assets\\ui-grid.js:8064"
        },
        {
            "message": "Missing item type\nDefault time in milliseconds to throttle aggregation calcuations, defaults to 500ms",
            "line": " assets\\ui-grid.js:8073"
        },
        {
            "message": "Missing item type\nDefault time in milliseconds to throttle scroll events to, defaults to 70ms",
            "line": " assets\\ui-grid.js:8081"
        },
        {
            "message": "Missing item type\nDefault time in milliseconds to debounce scroll events, defaults to 300ms",
            "line": " assets\\ui-grid.js:8090"
        },
        {
            "message": "Missing item type\nTrue by default. When enabled, this setting adds sort\nwidgets to the column headers, allowing sorting of the data for the entire grid.\nSorting can then be disabled / enabled on individual columns using the columnDefs,\nif it set, it will override GridOptions enableSorting setting.",
            "line": " assets\\ui-grid.js:8098"
        },
        {
            "message": "Missing item type\nFalse by default. When enabled, this setting adds filter\nboxes to each column header, allowing filtering within the column for the entire grid.\nFiltering can then be disabled on individual columns using the columnDefs.",
            "line": " assets\\ui-grid.js:8109"
        },
        {
            "message": "Missing item type\nTrue by default. When enabled, this setting displays a column\nmenu within each column.",
            "line": " assets\\ui-grid.js:8119"
        },
        {
            "message": "Missing item type\n{@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.\nThis settings controls the vertical scrollbar for the grid.\nSupported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER",
            "line": " assets\\ui-grid.js:8128"
        },
        {
            "message": "Missing item type\n{@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.\nThis settings controls the horizontal scrollbar for the grid.\nSupported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER",
            "line": " assets\\ui-grid.js:8138"
        },
        {
            "message": "Missing item type\nTrue by default. When enabled, a newly initialized grid will check to see if it is tall enough to display\nat least one row of data.  If the grid is not tall enough, it will resize the DOM element to display minRowsToShow number\nof rows.",
            "line": " assets\\ui-grid.js:8148"
        },
        {
            "message": "Missing item type\nColumns can't be smaller than this, defaults to 10 pixels",
            "line": " assets\\ui-grid.js:8158"
        },
        {
            "message": "Missing item type\nBy default, rows are compared using object equality.  This option can be overridden\nto compare on any data item property or function",
            "line": " assets\\ui-grid.js:8166"
        },
        {
            "message": "Missing item type\nNull by default. When provided, this setting uses a custom header\ntemplate, rather than the default template. Can be set to either the name of a template file:\n<pre>  $scope.gridOptions.headerTemplate = 'header_template.html';</pre>\ninline html\n<pre>  $scope.gridOptions.headerTemplate = '<div class=\"ui-grid-top-panel\" style=\"text-align: center\">I am a Custom Grid Header</div>'</pre>\nor the id of a precompiled template (TBD how to use this).\n</br>Refer to the custom header tutorial for more information.\nIf you want no header at all, you can set to an empty div:\n<pre>  $scope.gridOptions.headerTemplate = '<div></div>';</pre>\n\nIf you want to only have a static header, then you can set to static content.  If\nyou want to tailor the existing column headers, then you should look at the\ncurrent 'ui-grid-header.html' template in github as your starting point.",
            "line": " assets\\ui-grid.js:8179"
        },
        {
            "message": "Missing item type\n(optional) ui-grid/ui-grid-footer by default.  This footer shows the per-column\naggregation totals.\nWhen provided, this setting uses a custom footer template. Can be set to either the name of a template file 'footer_template.html', inline html\n<pre>'<div class=\"ui-grid-bottom-panel\" style=\"text-align: center\">I am a Custom Grid Footer</div>'</pre>, or the id\nof a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.",
            "line": " assets\\ui-grid.js:8200"
        },
        {
            "message": "Missing item type\n(optional) ui-grid/ui-grid-grid-footer by default. This template by default shows the\ntotal items at the bottom of the grid, and the selected items if selection is enabled.",
            "line": " assets\\ui-grid.js:8212"
        },
        {
            "message": "Missing item type\n'ui-grid/ui-grid-row' by default. When provided, this setting uses a\ncustom row template.  Can be set to either the name of a template file:\n<pre> $scope.gridOptions.rowTemplate = 'row_template.html';</pre>\ninline html\n<pre>  $scope.gridOptions.rowTemplate = '<div style=\"background-color: aquamarine\" ng-click=\"grid.appScope.fnOne(row)\" ng-repeat=\"col in colContainer.renderedColumns track by col.colDef.name\" class=\"ui-grid-cell\" ui-grid-cell></div>';</pre>\nor the id of a precompiled template (TBD how to use this) can be provided.\n</br>Refer to the custom row template tutorial for more information.",
            "line": " assets\\ui-grid.js:8221"
        },
        {
            "message": "Missing item type\n'ui-grid/uiGridMenu' by default. When provided, this setting uses a\ncustom grid menu template.",
            "line": " assets\\ui-grid.js:8235"
        },
        {
            "message": "Missing item type\nby default, the parent scope of the ui-grid element will be assigned to grid.appScope\nthis property allows you to assign any reference you want to grid.appScope",
            "line": " assets\\ui-grid.js:8244"
        },
        {
            "message": "Missing item type\nThe grid has render containers, allowing the ability to have pinned columns.  If the grid\nis right-to-left then there may be a right render container, if left-to-right then there may\nbe a left render container.  There is always a body render container.",
            "line": " assets\\ui-grid.js:8266"
        },
        {
            "message": "Missing item type\nflag to signal that container has a horizontal scrollbar",
            "line": " assets\\ui-grid.js:8309"
        },
        {
            "message": "Missing item type\nflag to signal that container has a vertical scrollbar",
            "line": " assets\\ui-grid.js:8317"
        },
        {
            "message": "Missing item type\nflag to signal that container should recalculate the canvas size",
            "line": " assets\\ui-grid.js:8325"
        },
        {
            "message": "Missing item type\nlast calculated canvas height value",
            "line": " assets\\ui-grid.js:8333"
        },
        {
            "message": "Missing item type\nRegisters an adjuster to the render container's available width or height.  Adjusters are used\nto tell the render container that there is something else consuming space, and to adjust it's size\nappropriately.",
            "line": " assets\\ui-grid.js:8417"
        },
        {
            "message": "Missing item type\nRemoves an adjuster, should be used when your element is destroyed",
            "line": " assets\\ui-grid.js:8431"
        },
        {
            "message": "Missing item type\nGets the adjustment based on the viewportAdjusters.",
            "line": " assets\\ui-grid.js:8446"
        },
        {
            "message": "Missing item type\nReturns the total canvas height.   Only recalculates if canvasHeightShouldUpdate = false",
            "line": " assets\\ui-grid.js:8533"
        },
        {
            "message": "Missing item type\nDetermine the appropriate column width of each column across all render containers.\n\nColumn width is easy when each column has a specified width.  When columns are variable width (i.e.\nhave an * or % of the viewport) then we try to calculate so that things fit in.  The problem is that\nwe have multiple render containers, and we don't want one render container to just take the whole viewport\nwhen it doesn't need to - we want things to balance out across the render containers.\n\nTo do this, we use this method to calculate all the renderContainers, recognising that in a given render\ncycle it'll get called once per render container, so it needs to return the same values each time.\n\nThe constraints on this method are therefore:\n- must return the same value when called multiple times, to do this it needs to rely on properties of the\n  columns, but not properties that change when this is called (so it shouldn't rely on drawnWidth)\n\nThe general logic of this method is:\n- calculate our total available width\n- look at all the columns across all render containers, and work out which have widths and which have\n  constraints such as % or * or something else\n- for those with *, count the total number of * we see and add it onto a running total, add this column to an * array\n- for those with a %, allocate the % as a percentage of the viewport, having consideration of min and max\n- for those with manual width (in pixels) we set the drawnWidth to the specified width\n- we end up with an asterisks array still to process\n- we look at our remaining width.  If it's greater than zero, we divide it up among the asterisk columns, then process\n  them for min and max width constraints\n- if it's zero or less, we set the asterisk columns to their minimum widths\n- we use parseInt quite a bit, as we try to make all our column widths integers",
            "line": " assets\\ui-grid.js:8835"
        },
        {
            "message": "Missing item type\nGridRow is the viewModel for one logical row on the grid.  A grid Row is not necessarily a one-to-one\nrelation to gridOptions.data.",
            "line": " assets\\ui-grid.js:9071"
        },
        {
            "message": "Missing item type\nA reference back to the grid",
            "line": " assets\\ui-grid.js:9082"
        },
        {
            "message": "Missing item type\nA reference to an item in gridOptions.data[]",
            "line": " assets\\ui-grid.js:9090"
        },
        {
            "message": "Missing item type\nUniqueId of row",
            "line": " assets\\ui-grid.js:9098"
        },
        {
            "message": "Missing item type\nIf true, the row will be rendered",
            "line": " assets\\ui-grid.js:9106"
        },
        {
            "message": "Missing item type\nheight of each individual row. changing the height will flag all\nrow renderContainers to recalculate their canvas height",
            "line": " assets\\ui-grid.js:9120"
        },
        {
            "message": "Missing item type\nreturns the qualified field name as it exists on scope\nie: row.entity.fieldA",
            "line": " assets\\ui-grid.js:9139"
        },
        {
            "message": "Missing item type\nreturns the qualified field name minus the row path\nie: entity.fieldA",
            "line": " assets\\ui-grid.js:9152"
        },
        {
            "message": "Missing item type\nSets an override on the row that forces it to always\nbe invisible. Emits the rowsVisibleChanged event if it changed the row visibility.\n\nThis method can be called from the api, passing in the gridRow we want\naltered.  It should really work by calling gridRow.setRowInvisible, but that's\nnot the way I coded it, and too late to change now.  Changed to just call\nthe internal function row.setThisRowInvisible().",
            "line": " assets\\ui-grid.js:9170"
        },
        {
            "message": "Missing item type\nClears an override on the row that forces it to always\nbe invisible. Emits the rowsVisibleChanged event if it changed the row visibility.\n\nThis method can be called from the api, passing in the gridRow we want\naltered.  It should really work by calling gridRow.clearRowInvisible, but that's\nnot the way I coded it, and too late to change now.  Changed to just call\nthe internal function row.clearThisRowInvisible().",
            "line": " assets\\ui-grid.js:9192"
        },
        {
            "message": "Missing item type\nSets an override on the row that forces it to always\nbe invisible. Emits the rowsVisibleChanged event if it changed the row visibility",
            "line": " assets\\ui-grid.js:9214"
        },
        {
            "message": "Missing item type\nClears any override on the row visibility, returning it \nto normal visibility calculations.  Emits the rowsVisibleChanged\nevent",
            "line": " assets\\ui-grid.js:9234"
        },
        {
            "message": "Missing item type\nDetermines whether the row should be visible based on invisibleReason, \nand if it changes the row visibility, then emits the rowsVisibleChanged event.\n\nQueues a grid refresh, but doesn't call it directly to avoid hitting lots of grid refreshes.",
            "line": " assets\\ui-grid.js:9254"
        },
        {
            "message": "Missing item type\nA row and column pair that represents the intersection of these two entities.\nMust be instantiated as a constructor using the `new` keyword.",
            "line": " assets\\ui-grid.js:9292"
        },
        {
            "message": "Missing item type\n{@link ui.grid.class:GridRow }",
            "line": " assets\\ui-grid.js:9308"
        },
        {
            "message": "Missing item type\n{@link ui.grid.class:GridColumn }",
            "line": " assets\\ui-grid.js:9315"
        },
        {
            "message": "Missing item type\nGets the intersection of where the row and column meet.",
            "line": " assets\\ui-grid.js:9324"
        },
        {
            "message": "Missing item type\nModel for all scrollEvents",
            "line": " assets\\ui-grid.js:9346"
        },
        {
            "message": "Missing item type\nA reference back to the grid",
            "line": " assets\\ui-grid.js:9361"
        },
        {
            "message": "Missing item type\nthe source of the scroll event. limited to values from uiGridConstants.scrollEventSources",
            "line": " assets\\ui-grid.js:9371"
        },
        {
            "message": "Missing item type\nmost scroll events from the mouse or trackpad require delay to operate properly\nset to false to eliminate delay.  Useful for scroll events that the grid causes, such as scrolling to make a row visible.",
            "line": " assets\\ui-grid.js:9380"
        },
        {
            "message": "Missing item type\nfires a throttled event using grid.api.core.raise.scrollEvent",
            "line": " assets\\ui-grid.js:9401"
        },
        {
            "message": "Missing item type\nreturns newScrollLeft property if available; calculates a new value if it isn't",
            "line": " assets\\ui-grid.js:9414"
        },
        {
            "message": "Missing item type\nreturns newScrollTop property if available; calculates a new value if it isn't",
            "line": " assets\\ui-grid.js:9446"
        },
        {
            "message": "Missing item type\nfactory to return dom specific instances of a grid",
            "line": " assets\\ui-grid.js:9511"
        },
        {
            "message": "Missing item type\nCreates a new grid instance. Each instance will have a unique id",
            "line": " assets\\ui-grid.js:9522"
        },
        {
            "message": "Missing item type\nProcesses designTime column definitions and applies them to col for the\n             core grid features",
            "line": " assets\\ui-grid.js:9587"
        },
        {
            "message": "Missing item type\na custom template for each cell in this column.  The default\nis ui-grid/uiGridCell.  If you are using the cellNav feature, this template\nmust contain a div that can receive focus.",
            "line": " assets\\ui-grid.js:9638"
        },
        {
            "message": "Missing item type\na custom template for the header for this column.  The default\nis ui-grid/uiGridHeaderCell",
            "line": " assets\\ui-grid.js:9649"
        },
        {
            "message": "Missing item type\na custom template for the footer for this column.  The default\nis ui-grid/uiGridFooterCell",
            "line": " assets\\ui-grid.js:9659"
        },
        {
            "message": "Missing item type\na custom template for the filter input.  The default is ui-grid/ui-grid-filter",
            "line": " assets\\ui-grid.js:9669"
        },
        {
            "message": "Missing item type\nService for searching/filtering rows based on column value conditions.",
            "line": " assets\\ui-grid.js:9736"
        },
        {
            "message": "Missing item type\nGet the term from a filter\nTrims leading and trailing whitespace",
            "line": " assets\\ui-grid.js:9747"
        },
        {
            "message": "Missing item type\nRemove leading and trailing asterisk (*) from the filter's term",
            "line": " assets\\ui-grid.js:9769"
        },
        {
            "message": "Missing item type\nGuess the condition for a filter based on its term\n<br>\nDefaults to STARTS_WITH. Uses CONTAINS for strings beginning and ending with *s (*bob*).\nUses STARTS_WITH for strings ending with * (bo*). Uses ENDS_WITH for strings starting with * (*ob).",
            "line": " assets\\ui-grid.js:9789"
        },
        {
            "message": "Missing item type\nFor a given columns filters (either col.filters, or [col.filter] can be passed in),\ndo all the parsing and pre-processing and store that data into a new filters object.  The object\nhas the condition, the flags, the stripped term, and a parsed reg exp if there was one.\n\nWe could use a forEach in here, since it's much less performance sensitive, but since we're using \nfor loops everywhere else in this module...",
            "line": " assets\\ui-grid.js:9823"
        },
        {
            "message": "Missing item type\nRuns a single pre-parsed filter against a cell, returning true\nif the cell matches that one filter.",
            "line": " assets\\ui-grid.js:9893"
        },
        {
            "message": "Missing item type\nFalse by default. When enabled, this setting suppresses the internal filtering.\nAll UI logic will still operate, allowing filter conditions to be set and modified.\n\nThe external filter logic can listen for the `filterChange` event, which fires whenever\na filter has been adjusted.",
            "line": " assets\\ui-grid.js:9989"
        },
        {
            "message": "Missing item type\nProcess provided filters on provided column against a given row. If the row meets \nthe conditions on all the filters, return true.",
            "line": " assets\\ui-grid.js:9999"
        },
        {
            "message": "Missing item type\nRun a search across the given rows and columns, marking any rows that don't \nmatch the stored col.filters or col.filter as invisible.",
            "line": " assets\\ui-grid.js:10032"
        },
        {
            "message": "Missing item type\nrowSorter provides the default sorting mechanisms,\nincluding guessing column types and applying appropriate sort\nalgorithms",
            "line": " assets\\ui-grid.js:10127"
        },
        {
            "message": "Missing item type\nAssigns a sort function to use based on the itemType in the column",
            "line": " assets\\ui-grid.js:10155"
        },
        {
            "message": "Missing item type\nSorts nulls and undefined to the bottom (top when\ndescending).  Called by each of the internal sorters before\nattempting to sort.  Note that this method is available on the core api\nvia gridApi.core.sortHandleNulls",
            "line": " assets\\ui-grid.js:10184"
        },
        {
            "message": "Missing item type\nSorts any values that provide the < method, including strings\nor numbers.  Handles nulls and undefined through calling handleNulls",
            "line": " assets\\ui-grid.js:10215"
        },
        {
            "message": "Missing item type\nSorts numerical values.  Handles nulls and undefined through calling handleNulls",
            "line": " assets\\ui-grid.js:10241"
        },
        {
            "message": "Missing item type\nSorts numerical values that are stored in a string (i.e. parses them to numbers first).\nHandles nulls and undefined through calling handleNulls",
            "line": " assets\\ui-grid.js:10260"
        },
        {
            "message": "Missing item type\nSorts string values. Handles nulls and undefined through calling handleNulls",
            "line": " assets\\ui-grid.js:10314"
        },
        {
            "message": "Missing item type\nSorts date values. Handles nulls and undefined through calling handleNulls.\nHandles date strings by converting to Date object if not already an instance of Date",
            "line": " assets\\ui-grid.js:10336"
        },
        {
            "message": "Missing item type\nSorts boolean values, true is considered larger than false.\nHandles nulls and undefined through calling handleNulls",
            "line": " assets\\ui-grid.js:10365"
        },
        {
            "message": "Missing item type\nGet the sort function for the column.  Looks first in\nrowSorter.colSortFnCache using the column name, failing that it\nlooks at col.sortingAlgorithm (and puts it in the cache), failing that\nit guesses the sort algorithm based on the data type.\n\nThe cache currently seems a bit pointless, as none of the work we do is\nprocessor intensive enough to need caching.  Presumably in future we might\ninspect the row data itself to guess the sort function, and in that case\nit would make sense to have a cache, the infrastructure is in place to allow\nthat.",
            "line": " assets\\ui-grid.js:10394"
        },
        {
            "message": "Missing item type\nUsed where multiple columns are present in the sort criteria,\nwe determine which column should take precedence in the sort by sorting\nthe columns based on their sort.priority",
            "line": " assets\\ui-grid.js:10454"
        },
        {
            "message": "Missing item type\nPrevents the internal sorting from executing.  Events will\nstill be fired when the sort changes, and the sort information on\nthe columns will be updated, allowing an external sorter (for example,\nserver sorting) to be implemented.  Defaults to false.",
            "line": " assets\\ui-grid.js:10497"
        },
        {
            "message": "Missing item type\nsorts the grid",
            "line": " assets\\ui-grid.js:10507"
        },
        {
            "message": "Missing item type\nGrid utility functions",
            "line": " assets\\ui-grid.js:10793"
        },
        {
            "message": "Missing item type\nBinds given method to given object.\n\nBy means of a wrapper, ensures that ``method`` is always bound to\n``object`` regardless of its calling environment.\nIow, inside ``method``, ``this`` always points to ``object``.\n\nSee http://alistapart.com/article/getoutbindingsituations",
            "line": " assets\\ui-grid.js:10807"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:10833"
        },
        {
            "message": "Missing item type\nReturn a list of column names, given a data set",
            "line": " assets\\ui-grid.js:10885"
        },
        {
            "message": "Missing item type\nReturn a unique ID string",
            "line": " assets\\ui-grid.js:10934"
        },
        {
            "message": "Missing item type\nGet's template from cache / element / url",
            "line": " assets\\ui-grid.js:10957"
        },
        {
            "message": "Missing item type\nguesses the type of an argument",
            "line": " assets\\ui-grid.js:11027"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:11059"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:11073"
        },
        {
            "message": "Missing item type\nGiven an event from this list:\n\n`wheel, mousewheel, DomMouseScroll, MozMousePixelScroll`\n\n\"normalize\" it\nso that it stays consistent no matter what browser it comes from (i.e. scale it correctly and make sure the direction is right.)",
            "line": " assets\\ui-grid.js:11150"
        },
        {
            "message": "Missing item type\nwraps the $log method, allowing us to choose different\ntreatment within ui-grid if we so desired.  At present we only log\nerror messages if uiGridConstants.LOG_ERROR_MESSAGES is set to true",
            "line": " assets\\ui-grid.js:11365"
        },
        {
            "message": "Missing item type\nwraps the $log method, allowing us to choose different\ntreatment within ui-grid if we so desired.  At present we only log\nwarning messages if uiGridConstants.LOG_WARN_MESSAGES is set to true",
            "line": " assets\\ui-grid.js:11381"
        },
        {
            "message": "Missing item type\nwraps the $log method, allowing us to choose different\ntreatment within ui-grid if we so desired.  At present we only log\ndebug messages if uiGridConstants.LOG_DEBUG_MESSAGES is set to true",
            "line": " assets\\ui-grid.js:11397"
        },
        {
            "message": "Missing item type\nProvies a set of methods to set the document focus inside the grid.\nSee {@link ui.grid.service:GridUtil.focus} for more information.",
            "line": " assets\\ui-grid.js:11414"
        },
        {
            "message": "Missing item type\nProvies a set of methods to set the document focus inside the grid.\nTimeouts are utilized to ensure that the focus is invoked after any other event has been triggered.\ne.g. click events that need to run before the focus or\ninputs elements that are in a disabled state but are enabled when those events\nare triggered.",
            "line": " assets\\ui-grid.js:11422"
        },
        {
            "message": "Missing item type\nSets the focus of the document to the given id value.\nIf provided with the grid object it will automatically append the grid id.\nThis is done to encourage unique dom id's as it allows for multiple grids on a\npage.",
            "line": " assets\\ui-grid.js:11434"
        },
        {
            "message": "Missing item type\nSets the focus of the document to the given dom element.",
            "line": " assets\\ui-grid.js:11463"
        },
        {
            "message": "Missing item type\nSets the focus of the document to the given dom element.",
            "line": " assets\\ui-grid.js:11487"
        },
        {
            "message": "Missing item type\nBrowsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method normalizes them",
            "line": " assets\\ui-grid.js:11661"
        },
        {
            "message": "Missing item type\nBrowsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method denormalizes a value for the current browser.",
            "line": " assets\\ui-grid.js:11695"
        },
        {
            "message": "Missing item type\nTakes a field path and converts it to bracket notation to allow for special characters in path",
            "line": " assets\\ui-grid.js:11732"
        },
        {
            "message": "Missing item type\nCopied from https://github.com/shahata/angular-debounce\nTakes a function, decorates it to execute only 1 time after multiple calls, and returns the decorated function",
            "line": " assets\\ui-grid.js:11764"
        },
        {
            "message": "Missing item type\nAdapted from debounce function (above)\nPotential keys for Params Object are:\n   trailing (bool) - whether to trigger after throttle time ends if called multiple times\nUpdated to use $interval rather than $timeout, as protractor (e2e tests) is able to work with $interval,\nbut not with $timeout\n\nNote that when using throttle, you need to use throttle to create a new function upfront, then use the function\nreturn from that call each time you need to call throttle.  If you call throttle itself repeatedly, the lastCall\nvariable will get overwritten and the throttling won't work",
            "line": " assets\\ui-grid.js:11815"
        },
        {
            "message": "Missing item type\nTranslated by: R. Salarmehr\n               M. Hosseynzade\n               Using Vajje.com online dictionary.",
            "line": " assets\\ui-grid.js:12672"
        },
        {
            "message": "Missing item type\n# ui.grid.i18n\nThis module provides i18n functions to ui.grid and any application that wants to use it\n\n\n<div doc-module-components=\"ui.grid.i18n\"></div>",
            "line": " assets\\ui-grid.js:14654"
        },
        {
            "message": "Missing item type\nconstants available in i18n module",
            "line": " assets\\ui-grid.js:14673"
        },
        {
            "message": "Missing item type\nServices for i18n",
            "line": " assets\\ui-grid.js:14691"
        },
        {
            "message": "Missing item type\nAdds the languages and strings to the cache. Decorate this service to\nadd more translation strings",
            "line": " assets\\ui-grid.js:14735"
        },
        {
            "message": "Missing item type\nreturn all currently loaded languages",
            "line": " assets\\ui-grid.js:14769"
        },
        {
            "message": "Missing item type\nreturn all currently loaded languages",
            "line": " assets\\ui-grid.js:14780"
        },
        {
            "message": "Missing item type\nreturns the text specified in the path or a Missing text if text is not found",
            "line": " assets\\ui-grid.js:14793"
        },
        {
            "message": "Missing item type\nsets the current language to use in the application\n$broadcasts the i18nConstants.UPDATE_EVENT on the $rootScope",
            "line": " assets\\ui-grid.js:14829"
        },
        {
            "message": "Missing item type\nreturns the current language used in the application",
            "line": " assets\\ui-grid.js:14849"
        },
        {
            "message": "Missing item type\n#ui.grid.autoResize\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides auto-resizing functionality to UI-Grid.",
            "line": " assets\\ui-grid.js:15133"
        },
        {
            "message": "Missing item type\n#ui.grid.cellNav\n\n    <div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\n    This module provides cell navigation functionality to UI-Grid.",
            "line": " assets\\ui-grid.js:15179"
        },
        {
            "message": "Missing item type\nconstants available in cellNav",
            "line": " assets\\ui-grid.js:15193"
        },
        {
            "message": "Missing item type\nreturns a CellNav prototype function",
            "line": " assets\\ui-grid.js:15213"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:15230"
        },
        {
            "message": "Missing item type\nGridRow settings for cellNav feature, these are available to be\nset only internally (for example, by other features)",
            "line": " assets\\ui-grid.js:15239"
        },
        {
            "message": "Missing item type\nEnable focus on a cell within this row.  If set to false then no cells\nin this row can be focused - group header rows as an example would set this to false.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:15247"
        },
        {
            "message": "Missing item type",
            "line": " assets\\ui-grid.js:15255"
        },
        {
            "message": "Missing item type\nServices for cell navigation features. If you don't like the key maps we use,\nor the direction cells navigation, override with a service decorator (see angular docs)",
            "line": " assets\\ui-grid.js:15436"
        },
        {
            "message": "Missing item type\ncellNav properties added to grid class",
            "line": " assets\\ui-grid.js:15452"
        },
        {
            "message": "Missing item type\nPublic Api for cellNav feature",
            "line": " assets\\ui-grid.js:15463"
        },
        {
            "message": "Missing item type\nraised when the active cell is changed\n<pre>\n     gridApi.cellNav.on.navigate(scope,function(newRowcol, oldRowCol){})\n</pre>",
            "line": " assets\\ui-grid.js:15472"
        },
        {
            "message": "Missing item type\nis raised when the viewPort receives a keyDown event. Cells never get focus in uiGrid\ndue to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this\nevent whenever you need a keydown event on a cell\n<br/>",
            "line": " assets\\ui-grid.js:15484"
        },
        {
            "message": "Missing item type\nis raised when the viewPort receives a keyPress event. Cells never get focus in uiGrid\ndue to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this\nevent whenever you need a keypress event on a cell\n<br/>",
            "line": " assets\\ui-grid.js:15497"
        },
        {
            "message": "Missing item type\nbrings the specified row and column into view, and sets focus\nto that cell",
            "line": " assets\\ui-grid.js:15513"
        },
        {
            "message": "Missing item type\nreturns the current (or last if Grid does not have focus) focused row and column\n<br> value is null if no selection has occurred",
            "line": " assets\\ui-grid.js:15527"
        },
        {
            "message": "Missing item type\nreturns an array containing the current selection\n<br> array is empty if no selection has occurred",
            "line": " assets\\ui-grid.js:15538"
        },
        {
            "message": "Missing item type\nreturns the index in the order in which the GridRowColumn was selected, returns -1 if the GridRowColumn\nisn't selected",
            "line": " assets\\ui-grid.js:15549"
        },
        {
            "message": "Missing item type\nGridOptions for cellNav feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:15580"
        },
        {
            "message": "Missing item type\nEnable multiple cell selection only when using the ctrlKey or shiftKey.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:15588"
        },
        {
            "message": "Missing item type\nAn array of event objects to override on keydown. If an event is overridden, the viewPortKeyDown event will\n             be raised with the overridden events, allowing custom keydown behavior.\n<br/>Defaults to []",
            "line": " assets\\ui-grid.js:15597"
        },
        {
            "message": "Missing item type\ndecorates grid renderContainers with cellNav functions",
            "line": " assets\\ui-grid.js:15609"
        },
        {
            "message": "Missing item type\ndetermines which direction to for a given keyDown event",
            "line": " assets\\ui-grid.js:15630"
        },
        {
            "message": "Missing item type\ncolumnBuilder function that adds cell navigation properties to grid column",
            "line": " assets\\ui-grid.js:15668"
        },
        {
            "message": "Missing item type\nColumn Definitions for cellNav feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:15678"
        },
        {
            "message": "Missing item type\nEnable focus on a cell within this column.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:15686"
        },
        {
            "message": "Missing item type\nScroll the grid such that the specified\nrow and column is in view, and set focus to the cell in that row and column",
            "line": " assets\\ui-grid.js:15698"
        },
        {
            "message": "Missing item type\nGet the current drawn width of the columns in the\ngrid up to the numbered column, and add an apportionment for the\ncolumn that we're on.  So if we are on column 0, we want to scroll\n0% (i.e. exclude this column from calc).  If we're on the last column\nwe want to scroll to 100% (i.e. include this column in the calc). So\nwe include (thisColIndex / totalNumberCols) % of this column width",
            "line": " assets\\ui-grid.js:15734"
        },
        {
            "message": "Missing item type\n# ui.grid.edit\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides cell editing capability to ui.grid. The goal was to emulate keying data in a spreadsheet via\na keyboard.\n<br/>\n<br/>\nTo really get the full spreadsheet-like data entry, the ui.grid.cellNav module should be used. This will allow the\nuser to key data and then tab, arrow, or enter to the cells beside or below.\n\n<div doc-module-components=\"ui.grid.edit\"></div>",
            "line": " assets\\ui-grid.js:16369"
        },
        {
            "message": "Missing item type\nconstants available in edit module",
            "line": " assets\\ui-grid.js:16390"
        },
        {
            "message": "Missing item type\nServices for editing features",
            "line": " assets\\ui-grid.js:16407"
        },
        {
            "message": "Missing item type\nPublic Api for edit feature",
            "line": " assets\\ui-grid.js:16425"
        },
        {
            "message": "Missing item type\nraised when cell editing is complete\n<pre>\n     gridApi.edit.on.afterCellEdit(scope,function(rowEntity, colDef){})\n</pre>",
            "line": " assets\\ui-grid.js:16434"
        },
        {
            "message": "Missing item type\nraised when cell editing starts on a cell\n<pre>\n     gridApi.edit.on.beginCellEdit(scope,function(rowEntity, colDef){})\n</pre>",
            "line": " assets\\ui-grid.js:16449"
        },
        {
            "message": "Missing item type\nraised when cell editing is cancelled on a cell\n<pre>\n     gridApi.edit.on.cancelCellEdit(scope,function(rowEntity, colDef){})\n</pre>",
            "line": " assets\\ui-grid.js:16464"
        },
        {
            "message": "Missing item type\nOptions for configuring the edit feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:16491"
        },
        {
            "message": "Missing item type\nIf defined, sets the default value for the editable flag on each individual colDefs\nif their individual enableCellEdit configuration is not defined. Defaults to undefined.",
            "line": " assets\\ui-grid.js:16499"
        },
        {
            "message": "Missing item type\nIf specified, either a value or function to be used by all columns before editing.\nIf false, then editing of cell is not allowed.",
            "line": " assets\\ui-grid.js:16507"
        },
        {
            "message": "Missing item type\nIf specified, cellTemplate to use as the editor for all columns.\n<br/> defaults to 'ui-grid/cellTextEditor'",
            "line": " assets\\ui-grid.js:16523"
        },
        {
            "message": "Missing item type\nIf true, then editor is invoked as soon as cell receives focus. Default false.\n<br/>_requires cellNav feature and the edit feature to be enabled_",
            "line": " assets\\ui-grid.js:16531"
        },
        {
            "message": "Missing item type\ncolumnBuilder function that adds edit properties to grid column",
            "line": " assets\\ui-grid.js:16542"
        },
        {
            "message": "Missing item type\nColumn Definition for edit feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:16553"
        },
        {
            "message": "Missing item type\nenable editing on column",
            "line": " assets\\ui-grid.js:16561"
        },
        {
            "message": "Missing item type\nIf specified, either a value or function evaluated before editing cell.  If falsy, then editing of cell is not allowed.",
            "line": " assets\\ui-grid.js:16570"
        },
        {
            "message": "Missing item type\ncell template to be used when editing this column. Can be Url or text template\n<br/>Defaults to gridOptions.editableCellTemplate",
            "line": " assets\\ui-grid.js:16585"
        },
        {
            "message": "Missing item type\nIf true, then editor is invoked as soon as cell receives focus. Default false.\n<br>_requires both the cellNav feature and the edit feature to be enabled_",
            "line": " assets\\ui-grid.js:16606"
        },
        {
            "message": "Missing item type\na bindable string value that is used when binding to edit controls instead of colDef.field\n<br/> example: You have a complex property on and object like state:{abbrev:'MS',name:'Mississippi'}.  The\ngrid should display state.name in the cell and sort/filter based on the state.name property but the editor\nrequires the full state object.\n<br/>colDef.field = 'state.name'\n<br/>colDef.editModelField = 'state'",
            "line": " assets\\ui-grid.js:16618"
        },
        {
            "message": "Missing item type\nDetermines if a keypress should start editing.  Decorate this service to override with your\nown key events.  See service decorator in angular docs.",
            "line": " assets\\ui-grid.js:16634"
        },
        {
            "message": "Missing item type\nGridRow options for edit feature, these are available to be\nset internally only, by other features",
            "line": " assets\\ui-grid.js:16809"
        },
        {
            "message": "Missing item type\nenable editing on row, grouping for example might disable editing on group header rows",
            "line": " assets\\ui-grid.js:16817"
        },
        {
            "message": "Missing item type\nan array of values in the format\n[ {id: xxx, value: xxx} ], which is populated\ninto the edit dropdown",
            "line": " assets\\ui-grid.js:16974"
        },
        {
            "message": "Missing item type\nthe label for the \"id\" field\nin the editDropdownOptionsArray.  Defaults\nto 'id'",
            "line": " assets\\ui-grid.js:16983"
        },
        {
            "message": "Missing item type\na path to a property on row.entity containing an\narray of values in the format\n[ {id: xxx, value: xxx} ], which will be used to populate\nthe edit dropdown.  This can be used when the dropdown values are dependent on\nthe backing row entity.\nIf this property is set then editDropdownOptionsArray will be ignored.",
            "line": " assets\\ui-grid.js:17001"
        },
        {
            "message": "Missing item type\na function returning an array of values in the format\n[ {id: xxx, value: xxx} ], which will be used to populate\nthe edit dropdown.  This can be used when the dropdown values are dependent on\nthe backing row entity with some kind of algorithm.\nIf this property is set then both editDropdownOptionsArray and\neditDropdownRowEntityOptionsArrayPath will be ignored.",
            "line": " assets\\ui-grid.js:17022"
        },
        {
            "message": "Missing item type\nthe label for the \"value\" field\nin the editDropdownOptionsArray.  Defaults\nto 'value'",
            "line": " assets\\ui-grid.js:17056"
        },
        {
            "message": "Missing item type\nA filter that you would like to apply to the values in the options list\nof the dropdown.  For example if you were using angular-translate you might set this\nto `'translate'`",
            "line": " assets\\ui-grid.js:17074"
        },
        {
            "message": "Missing item type\nA function that should be called when any files have been chosen\nby the user.  You should use this to process the files appropriately for your\napplication.\n\nIt passes the gridCol, the gridRow (from which you can get gridRow.entity),\nand the files.  The files are in the format as returned from the file chooser,\nan array of files, with each having useful information such as:\n- `files[0].lastModifiedDate`\n- `files[0].name`\n- `files[0].size`  (appears to be in bytes)\n- `files[0].type`  (MIME type by the looks)\n\nTypically you would do something with these files - most commonly you would\nuse the filename or read the file itself in.  The example function does both.",
            "line": " assets\\ui-grid.js:17611"
        },
        {
            "message": "Missing item type\n# ui.grid.emptyBaseLayer\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides the ability to have the background of the ui-grid be empty rows, this would be displayed in the case were\nthe grid height is greater then the amount of rows displayed.\n\n<div doc-module-components=\"ui.grid.emptyBaseLayer\"></div>",
            "line": " assets\\ui-grid.js:17686"
        },
        {
            "message": "Missing item type\nServices for the empty base layer grid",
            "line": " assets\\ui-grid.js:17703"
        },
        {
            "message": "Missing item type\nGridOptions for emptyBaseLayer feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:17713"
        },
        {
            "message": "Missing item type\nEnable empty base layer, which shows empty rows as background on the entire grid\n<br/>Defaults to true, if the directive is used.\n<br/>Set to false either by setting this attribute or passing false to the directive.",
            "line": " assets\\ui-grid.js:17724"
        },
        {
            "message": "Missing item type\nShows empty rows in the background of the ui-grid, these span\nthe full height of the ui-grid, so that there won't be blank space below the shown rows.",
            "line": " assets\\ui-grid.js:17752"
        },
        {
            "message": "Missing item type\nstacks on the uiGridViewport directive to append the empty grid base layer html elements to the\ndefault gridRow template",
            "line": " assets\\ui-grid.js:17819"
        },
        {
            "message": "Missing item type\n# ui.grid.expandable\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides the ability to create subgrids with the ability to expand a row\nto show the subgrid.\n\n<div doc-module-components=\"ui.grid.expandable\"></div>",
            "line": " assets\\ui-grid.js:17849"
        },
        {
            "message": "Missing item type\nServices for the expandable grid",
            "line": " assets\\ui-grid.js:17865"
        },
        {
            "message": "Missing item type\nWhether or not to use expandable feature, allows you to turn off expandable on specific grids\nwithin your application, or in specific modes on _this_ grid. Defaults to true.",
            "line": " assets\\ui-grid.js:17878"
        },
        {
            "message": "Missing item type\nHeight in pixels of the expanded subgrid.  Defaults to\n150",
            "line": " assets\\ui-grid.js:17893"
        },
        {
            "message": "Missing item type\nWidth in pixels of the expandable column. Defaults to 40",
            "line": " assets\\ui-grid.js:17908"
        },
        {
            "message": "Missing item type\nMandatory. The template for your expanded row",
            "line": " assets\\ui-grid.js:17922"
        },
        {
            "message": "Missing item type\nPublic Api for expandable feature",
            "line": " assets\\ui-grid.js:17939"
        },
        {
            "message": "Missing item type\nAdditional properties added to GridRow when using the expandable module",
            "line": " assets\\ui-grid.js:17945"
        },
        {
            "message": "Missing item type\nOptions for configuring the expandable feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:17951"
        },
        {
            "message": "Missing item type\nraised when row expanded or collapsed\n<pre>\n     gridApi.expandable.on.rowExpandedStateChanged(scope,function(row){})\n</pre>",
            "line": " assets\\ui-grid.js:17961"
        },
        {
            "message": "Missing item type\nToggle a specific row\n<pre>\n     gridApi.expandable.toggleRowExpansion(rowEntity);\n</pre>",
            "line": " assets\\ui-grid.js:17980"
        },
        {
            "message": "Missing item type\nExpand all subgrids.\n<pre>\n     gridApi.expandable.expandAllRows();\n</pre>",
            "line": " assets\\ui-grid.js:17997"
        },
        {
            "message": "Missing item type\nCollapse all subgrids.\n<pre>\n     gridApi.expandable.collapseAllRows();\n</pre>",
            "line": " assets\\ui-grid.js:18010"
        },
        {
            "message": "Missing item type\nToggle all subgrids.\n<pre>\n     gridApi.expandable.toggleAllRows();\n</pre>",
            "line": " assets\\ui-grid.js:18023"
        },
        {
            "message": "Missing item type\nExpand the data row",
            "line": " assets\\ui-grid.js:18035"
        },
        {
            "message": "Missing item type\nCollapse the data row",
            "line": " assets\\ui-grid.js:18048"
        },
        {
            "message": "Missing item type\nreturns all expandedRow's entity references",
            "line": " assets\\ui-grid.js:18061"
        },
        {
            "message": "Missing item type\nWhether or not the row is currently expanded.",
            "line": " assets\\ui-grid.js:18082"
        },
        {
            "message": "Missing item type\nShow a rowHeader to provide the expandable buttons.  If set to false then implies\nyou're going to use a custom method for expanding and collapsing the subgrids. Defaults to true.",
            "line": " assets\\ui-grid.js:18149"
        },
        {
            "message": "Missing item type\nstacks on the uiGrid directive to register child grid with parent row when child is created",
            "line": " assets\\ui-grid.js:18200"
        },
        {
            "message": "Missing item type\nAdditional Grid properties added by expandable module",
            "line": " assets\\ui-grid.js:18220"
        },
        {
            "message": "Missing item type\nreference to the expanded parent row that owns this grid",
            "line": " assets\\ui-grid.js:18226"
        },
        {
            "message": "Missing item type\ndirective to render the expandable row template",
            "line": " assets\\ui-grid.js:18250"
        },
        {
            "message": "Missing item type\nVariables of object expandableScope will be available in the scope of the expanded subgrid",
            "line": " assets\\ui-grid.js:18270"
        },
        {
            "message": "Missing item type\nstacks on the uiGridRow directive to add support for expandable rows",
            "line": " assets\\ui-grid.js:18306"
        },
        {
            "message": "Missing item type\nstacks on the uiGridViewport directive to append the expandable row html elements to the\ndefault gridRow template",
            "line": " assets\\ui-grid.js:18370"
        },
        {
            "message": "Missing item type\n# ui.grid.exporter\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides the ability to export data from the grid.\n\nData can be exported in a range of formats, and all data, visible\ndata, or selected rows can be exported, with all columns or visible\ncolumns.\n\nNo UI is provided, the caller should provide their own UI/buttons\nas appropriate, or enable the gridMenu\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.exporter\"></div>",
            "line": " assets\\ui-grid.js:18411"
        },
        {
            "message": "Missing item type\nconstants available in exporter module",
            "line": " assets\\ui-grid.js:18437"
        },
        {
            "message": "Missing item type\nexport all data, including data not visible.  Can\nbe set for either rowTypes or colTypes",
            "line": " assets\\ui-grid.js:18443"
        },
        {
            "message": "Missing item type\nexport only visible data, including data not visible.  Can\nbe set for either rowTypes or colTypes",
            "line": " assets\\ui-grid.js:18450"
        },
        {
            "message": "Missing item type\nexport all data, including data not visible.  Can\nbe set only for rowTypes, selection of only some columns is\nnot supported",
            "line": " assets\\ui-grid.js:18457"
        },
        {
            "message": "Missing item type\nServices for exporter feature",
            "line": " assets\\ui-grid.js:18475"
        },
        {
            "message": "Missing item type\nPublic Api for exporter feature",
            "line": " assets\\ui-grid.js:18494"
        },
        {
            "message": "Missing item type\nExports rows from the grid in csv format,\nthe data exported is selected based on the provided options",
            "line": " assets\\ui-grid.js:18507"
        },
        {
            "message": "Missing item type\nExports rows from the grid in pdf format,\nthe data exported is selected based on the provided options\nNote that this function has a dependency on pdfMake, all\ngoing well this has been installed for you.\nThe resulting pdf opens in a new browser window.",
            "line": " assets\\ui-grid.js:18522"
        },
        {
            "message": "Missing item type\nExports rows from the grid in excel format,\nthe data exported is selected based on the provided options",
            "line": " assets\\ui-grid.js:18540"
        },
        {
            "message": "Missing item type\nGridOptions for exporter feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:18578"
        },
        {
            "message": "Missing item type\nColumnDef settings for exporter",
            "line": " assets\\ui-grid.js:18585"
        },
        {
            "message": "Missing item type\nDon't show the export menu button, implying the user\nwill roll their own UI for calling the exporter\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:18590"
        },
        {
            "message": "Missing item type\nThe text to show on the exporter menu button\nlink\n<br/>Defaults to 'Export'",
            "line": " assets\\ui-grid.js:18599"
        },
        {
            "message": "Missing item type\nColumns that should not be exported.  The selectionRowHeader is already automatically\nsuppressed, but if you had a button column or some other \"system\" column that shouldn't be shown in the\noutput then add it in this list.  You should provide an array of column names.\n<br/>Defaults to: []\n<pre>\n  gridOptions.exporterSuppressColumns = [ 'buttons' ];\n</pre>",
            "line": " assets\\ui-grid.js:18608"
        },
        {
            "message": "Missing item type\nThe character to use as column separator\nlink\n<br/>Defaults to ','",
            "line": " assets\\ui-grid.js:18621"
        },
        {
            "message": "Missing item type\nThe default filename to use when saving the downloaded csv.\nThis will only work in some browsers.\n<br/>Defaults to 'download.csv'",
            "line": " assets\\ui-grid.js:18630"
        },
        {
            "message": "Missing item type\nThe default filename to use when saving the downloaded pdf, only used in IE (other browsers open pdfs in a new window)\n<br/>Defaults to 'download.pdf'",
            "line": " assets\\ui-grid.js:18639"
        },
        {
            "message": "Missing item type\nSome versions of excel don't like the utf-16 BOM on the front, and it comes\nthrough as ï»¿ in the first column header.  Setting this option to false will suppress this, at the\nexpense of proper utf-16 handling in applications that do recognise the BOM\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:18647"
        },
        {
            "message": "Missing item type\nSeparator header, used to set a custom column separator in a csv file, only works on MS Excel.\nUsed it on other programs will make csv content display unproperly. Setting this option to false won't add this header.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:18657"
        },
        {
            "message": "Missing item type\nAn option to determine the starting point for the menu items created by the exporter\n<br/>Defaults to 200",
            "line": " assets\\ui-grid.js:18666"
        },
        {
            "message": "Missing item type\nThe default style in pdfMake format\n<br/>Defaults to:\n<pre>\n  {\n    fontSize: 11\n  }\n</pre>",
            "line": " assets\\ui-grid.js:18674"
        },
        {
            "message": "Missing item type\nThe table style in pdfMake format\n<br/>Defaults to:\n<pre>\n  {\n    margin: [0, 5, 0, 15]\n  }\n</pre>",
            "line": " assets\\ui-grid.js:18687"
        },
        {
            "message": "Missing item type\nThe tableHeader style in pdfMake format\n<br/>Defaults to:\n<pre>\n  {\n    bold: true,\n    fontSize: 12,\n    color: 'black'\n  }\n</pre>",
            "line": " assets\\ui-grid.js:18700"
        },
        {
            "message": "Missing item type\nThe header section for pdf exports.  Can be\nsimple text:\n<pre>\n  gridOptions.exporterPdfHeader = 'My Header';\n</pre>\nCan be a more complex object in pdfMake format:\n<pre>\n  gridOptions.exporterPdfHeader = {\n    columns: [\n      'Left part',\n      { text: 'Right part', alignment: 'right' }\n    ]\n  };\n</pre>\nOr can be a function, allowing page numbers and the like\n<pre>\n  gridOptions.exporterPdfHeader: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };\n</pre>",
            "line": " assets\\ui-grid.js:18715"
        },
        {
            "message": "Missing item type\nThe header section for pdf exports.  Can be\nsimple text:\n<pre>\n  gridOptions.exporterPdfFooter = 'My Footer';\n</pre>\nCan be a more complex object in pdfMake format:\n<pre>\n  gridOptions.exporterPdfFooter = {\n    columns: [\n      'Left part',\n      { text: 'Right part', alignment: 'right' }\n    ]\n  };\n</pre>\nOr can be a function, allowing page numbers and the like\n<pre>\n  gridOptions.exporterPdfFooter: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };\n</pre>",
            "line": " assets\\ui-grid.js:18739"
        },
        {
            "message": "Missing item type\nThe orientation, should be a valid pdfMake value,\n'landscape' or 'portrait'\n<br/>Defaults to landscape",
            "line": " assets\\ui-grid.js:18763"
        },
        {
            "message": "Missing item type\nThe orientation, should be a valid pdfMake\npaper size, usually 'A4' or 'LETTER'\n{@link https://github.com/bpampuch/pdfmake/blob/master/src/standardPageSizes.js pdfMake page sizes}\n<br/>Defaults to A4",
            "line": " assets\\ui-grid.js:18772"
        },
        {
            "message": "Missing item type\nThe maxium grid width - the current grid width\nwill be scaled to match this, with any fixed width columns\nbeing adjusted accordingly.\n<br/>Defaults to 720 (for A4 landscape), use 670 for LETTER",
            "line": " assets\\ui-grid.js:18782"
        },
        {
            "message": "Missing item type\nA tableLayout in pdfMake format,\ncontrols gridlines and the like.  We use the default\nlayout usually.\n<br/>Defaults to null, which means no layout",
            "line": " assets\\ui-grid.js:18792"
        },
        {
            "message": "Missing item type\nAdd export all data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "line": " assets\\ui-grid.js:18802"
        },
        {
            "message": "Missing item type\nAdd export visible data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "line": " assets\\ui-grid.js:18810"
        },
        {
            "message": "Missing item type\nAdd export selected data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "line": " assets\\ui-grid.js:18818"
        },
        {
            "message": "Missing item type\nAdd csv export menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "line": " assets\\ui-grid.js:18826"
        },
        {
            "message": "Missing item type\nAdd pdf export menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "line": " assets\\ui-grid.js:18834"
        },
        {
            "message": "Missing item type\nAdd excel export menu items to the ui-grid grid menu, if it's present.  Defaults to true.",
            "line": " assets\\ui-grid.js:18842"
        },
        {
            "message": "Missing item type\nA custom callback routine that changes the pdf document, adding any\ncustom styling or content that is supported by pdfMake.  Takes in the complete docDefinition, and\nmust return an updated docDefinition ready for pdfMake.",
            "line": " assets\\ui-grid.js:18850"
        },
        {
            "message": "Missing item type\nDefaults to false, which leads to `displayName` being passed into the headerFilter.\nIf set to true, then will pass `name` instead.",
            "line": " assets\\ui-grid.js:18871"
        },
        {
            "message": "Missing item type\nA function to apply to the header displayNames before exporting.  Useful for internationalisation,\nfor example if you were using angular-translate you'd set this to `$translate.instant`.  Note that this\ncall must be synchronous, it cannot be a call that returns a promise.\n\nBehaviour can be changed to pass in `name` instead of `displayName` through use of `exporterHeaderFilterUseName: true`.",
            "line": " assets\\ui-grid.js:18886"
        },
        {
            "message": "Missing item type\nA function to call for each field before exporting it.  Allows\nmassaging of raw data into a display format, for example if you have applied\nfilters to convert codes into decodes, or you require\na specific date format in the exported content.\n\nThe method is called once for each field exported, and provides the grid, the\ngridCol and the GridRow for you to use as context in massaging the data.",
            "line": " assets\\ui-grid.js:18906"
        },
        {
            "message": "Missing item type\nA function to call for each field before exporting it.  Allows\ngeneral object to be return to modify the format of a cell in the case of\nexcel exports\n\nThe method is called once for each field exported, and provides the grid, the\ngridCol and the GridRow for you to use as context in massaging the data.",
            "line": " assets\\ui-grid.js:18936"
        },
        {
            "message": "Missing item type\nDefaults to false, which leads to filters being evaluated on export           *",
            "line": " assets\\ui-grid.js:18965"
        },
        {
            "message": "Missing item type\nThis promise is needed when exporting all rows,\nand the data need to be provided by server side. Default is null.",
            "line": " assets\\ui-grid.js:18978"
        },
        {
            "message": "Missing item type\nDEPRECATED - exporterAllDataFn used to be\ncalled this, but it wasn't a promise, it was a function that returned\na promise.  Deprecated, but supported for backward compatibility, use\nexporterAllDataFn instead.",
            "line": " assets\\ui-grid.js:18995"
        },
        {
            "message": "Missing item type\nAdds export items to the grid menu,\nallowing the user to select export options",
            "line": " assets\\ui-grid.js:19018"
        },
        {
            "message": "Missing item type\nExports rows from the grid in csv format,\nthe data exported is selected based on the provided options",
            "line": " assets\\ui-grid.js:19125"
        },
        {
            "message": "Missing item type\nWhen using server side pagination, use exporterAllDataFn to\nload all data before continuing processing.\nWhen using client side pagination, return a resolved promise so processing\ncontinues immediately",
            "line": " assets\\ui-grid.js:19150"
        },
        {
            "message": "Missing item type\nSuppresses export for this column.  Used by selection and expandable.",
            "line": " assets\\ui-grid.js:19179"
        },
        {
            "message": "Missing item type\nGets the column headers from the grid to use\nas a title row for the exported file, all headers have\nheaderCellFilters applied as appropriate.\n\nColumn headers are an array of objects, each object has\nname, displayName, width and align attributes.  Only name is\nused for csv, all attributes are used for pdf.",
            "line": " assets\\ui-grid.js:19186"
        },
        {
            "message": "Missing item type\nthe alignment you'd like for this specific column when\nexported into a pdf.  Can be 'left', 'right', 'center' or any other\nvalid pdfMake alignment option.",
            "line": " assets\\ui-grid.js:19235"
        },
        {
            "message": "Missing item type\nGridRow settings for exporter",
            "line": " assets\\ui-grid.js:19245"
        },
        {
            "message": "Missing item type\nIf set to false, then don't export this row, notwithstanding visible or\nother settings\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:19250"
        },
        {
            "message": "Missing item type\nGets rows from a node. If the node is grouped it will\nrecurse down into the children to get to the raw data element\nwhich is a row without children (a leaf).",
            "line": " assets\\ui-grid.js:19260"
        },
        {
            "message": "Missing item type\nGets rows from a node. If the node is grouped it will\nrecurse down into the children to get to the raw data element\nwhich is a row without children (a leaf). If the grid is not\ngrouped this will return just the raw rows",
            "line": " assets\\ui-grid.js:19283"
        },
        {
            "message": "Missing item type\nGets data from the grid based on the provided options,\nall cells have cellFilters applied as appropriate.  Any rows marked\n`exporterEnableExporting: false` will not be exported",
            "line": " assets\\ui-grid.js:19316"
        },
        {
            "message": "Missing item type\nFormats the column headers and data as a CSV,\nand sends that data to the user",
            "line": " assets\\ui-grid.js:19395"
        },
        {
            "message": "Missing item type\nRenders a single field as a csv field, including\nquotes around the value",
            "line": " assets\\ui-grid.js:19420"
        },
        {
            "message": "Missing item type\nRenders a single field as a csv field, including\nquotes around the value",
            "line": " assets\\ui-grid.js:19436"
        },
        {
            "message": "Missing item type\nChecks whether current browser is IE and returns it's version if it is",
            "line": " assets\\ui-grid.js:19464"
        },
        {
            "message": "Missing item type\nTriggers download of a csv file.  Logic provided\nby @cssensei (from his colleagues at https://github.com/ifeelgoods) in issue #2391",
            "line": " assets\\ui-grid.js:19482"
        },
        {
            "message": "Missing item type\nExports rows from the grid in pdf format,\nthe data exported is selected based on the provided options.\nNote that this function has a dependency on pdfMake, which must\nbe installed.  The resulting pdf opens in a new\nbrowser window.",
            "line": " assets\\ui-grid.js:19560"
        },
        {
            "message": "Missing item type\nGenerates and retrieves the pdf as a blob, then downloads\nit as a file.  Only used in IE, in all other browsers we use the native\npdfMake.open function to just open the PDF",
            "line": " assets\\ui-grid.js:19593"
        },
        {
            "message": "Missing item type\nRenders the data into a pdf, and opens that pdf.",
            "line": " assets\\ui-grid.js:19646"
        },
        {
            "message": "Missing item type\nDetermines the column widths base on the\nwidths we got from the grid.  If the column is drawn\nthen we have a drawnWidth.  If the column is not visible\nthen we have '*', 'x%' or a width.  When columns are\nnot visible they don't contribute to the overall gridWidth,\nso we need to adjust to allow for extra columns\n\nOur basic heuristic is to take the current gridWidth, plus\nnumeric columns and call this the base gridwidth.\n\nTo that we add 100 for any '*' column, and x% of the base gridWidth\nfor any column that is a %",
            "line": " assets\\ui-grid.js:19709"
        },
        {
            "message": "Missing item type\nRenders a row in a format consumable by PDF,\nmainly meaning casting everything to a string",
            "line": " assets\\ui-grid.js:19759"
        },
        {
            "message": "Missing item type\nRenders a single field as a pdf-able field, which\nis different from a csv field only in that strings don't have quotes\naround them",
            "line": " assets\\ui-grid.js:19776"
        },
        {
            "message": "Missing item type\nFormats the column headers and data as a excel,\nand sends that data to the user",
            "line": " assets\\ui-grid.js:19812"
        },
        {
            "message": "Missing item type\nRenders a single field as a csv field, including\nquotes around the value",
            "line": " assets\\ui-grid.js:19855"
        },
        {
            "message": "Missing item type\nRenders a single field as a csv field, including\nquotes around the value",
            "line": " assets\\ui-grid.js:19876"
        },
        {
            "message": "Missing item type\n# ui.grid.grouping\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides grouping of rows based on the data in them, similar\nin concept to excel grouping.  You can group multiple columns, resulting in\nnested grouping.\n\nIn concept this feature is similar to sorting + grid footer/aggregation, it\nsorts the data based on the grouped columns, then creates group rows that\nreflect a break in the data.  Each of those group rows can have aggregations for\nthe data within that group.\n\nThis feature leverages treeBase to provide the tree functionality itself,\nthe key thing this feature does therefore is to set treeLevels on the rows\nand insert the group headers.\n\nDesign information:\n-------------------\n\nEach column will get new menu items - group by, and aggregate by.  Group by\nwill cause this column to be sorted (if not already), and will move this column\nto the front of the sorted columns (i.e. grouped columns take precedence over\nsorted columns).  It will respect the sort order already set if there is one,\nand it will allow the sorting logic to change that sort order, it just forces\nthe column to the front of the sorting.  You can group by multiple columns, the\nlogic will add this column to the sorting after any already grouped columns.\n\nOnce a grouping is defined, grouping logic is added to the rowsProcessors.  This\nwill process the rows, identifying a break in the data value, and inserting a grouping row.\nGrouping rows have specific attributes on them:\n\n - internalRow = true: tells us that this isn't a real row, so we can ignore it\n   from any processing that it looking at core data rows.  This is used by the core\n   logic (or will be one day), as it's not grouping specific\n - groupHeader = true: tells us this is a groupHeader.  This is used by the grouping logic\n   to know if this is a groupHeader row or not\n\nSince the logic is baked into the rowsProcessors, it should get triggered whenever\nrow order or filtering or anything like that is changed.  In order to avoid the row instantiation\ntime, and to preserve state across invocations, we hold a cache of the rows that we created\nlast time, and we use them again this time if we can.\n\nBy default rows are collapsed, which means all data rows have their visible property\nset to false, and only level 0 group rows are set to visible.\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.grouping\"></div>",
            "line": " assets\\ui-grid.js:20028"
        },
        {
            "message": "Missing item type\nconstants available in grouping module, this includes\nall the constants declared in the treeBase module (these are manually copied\nas there isn't an easy way to include constants in another constants file, and\nwe don't want to make users include treeBase)",
            "line": " assets\\ui-grid.js:20087"
        },
        {
            "message": "Missing item type\nServices for grouping features",
            "line": " assets\\ui-grid.js:20111"
        },
        {
            "message": "Missing item type\nGrid properties and functions added for grouping",
            "line": " assets\\ui-grid.js:20126"
        },
        {
            "message": "Missing item type\nCache that holds the group header rows we created last time, we'll\nreuse these next time, not least because they hold our expanded states.\n\nWe need to take care with these that they don't become a memory leak, we\ncreate a new cache each time using the values from the old cache.  This works\nso long as we're creating group rows for invisible rows as well.\n\nThe cache is a nested hash, indexed on the value we grouped by.  So if we\ngrouped by gender then age, we'd maybe have something like:\n```\n  {\n    male: {\n      row: <pointer to the old row>,\n      children: {\n        22: { row: <pointer to the old row> },\n        31: { row: <pointer to the old row> }\n    },\n    female: {\n      row: <pointer to the old row>,\n      children: {\n        28: { row: <pointer to the old row> },\n        55: { row: <pointer to the old row> }\n    }\n  }\n```\n\nWe create new rows for any missing rows, this means that they come in as collapsed.",
            "line": " assets\\ui-grid.js:20134"
        },
        {
            "message": "Missing item type\nPublic Api for grouping feature",
            "line": " assets\\ui-grid.js:20178"
        },
        {
            "message": "Missing item type\nraised whenever aggregation is changed, added or removed from a column\n\n<pre>\n     gridApi.grouping.on.aggregationChanged(scope,function(col){})\n</pre>",
            "line": " assets\\ui-grid.js:20187"
        },
        {
            "message": "Missing item type\nraised whenever the grouped columns changes\n\n<pre>\n     gridApi.grouping.on.groupingChanged(scope,function(col){})\n</pre>",
            "line": " assets\\ui-grid.js:20200"
        },
        {
            "message": "Missing item type\nGet the grouping configuration for this grid,\nused by the saveState feature.  Adds expandedState to the information\nprovided by the internal getGrouping, and removes any aggregations that have a source\nof grouping (i.e. will be automatically reapplied when we regroup the column)\nReturned grouping is an object\n  `{ grouping: groupArray, treeAggregations: aggregateArray, expandedState: hash }`\nwhere grouping contains an array of objects:\n  `{ field: column.field, colName: column.name, groupPriority: column.grouping.groupPriority }`\nand aggregations contains an array of objects:\n  `{ field: column.field, colName: column.name, aggregation: column.grouping.aggregation }`\nand expandedState is a hash of the currently expanded nodes\n\nThe groupArray will be sorted by groupPriority.",
            "line": " assets\\ui-grid.js:20217"
        },
        {
            "message": "Missing item type\nSet the grouping configuration for this grid,\nused by the saveState feature, but can also be used by any\nuser to specify a combined grouping and aggregation configuration",
            "line": " assets\\ui-grid.js:20262"
        },
        {
            "message": "Missing item type\nAdds this column to the existing grouping, at the end of the priority order.\nIf the column doesn't have a sort, adds one, by default ASC\n\nThis column will move to the left of any non-group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "line": " assets\\ui-grid.js:20276"
        },
        {
            "message": "Missing item type\nRemoves the groupPriority from this column.  If the\ncolumn was previously aggregated the aggregation will come back.\nThe sort will remain.\n\nThis column will move to the right of any other group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "line": " assets\\ui-grid.js:20293"
        },
        {
            "message": "Missing item type\nClear any grouped columns and any aggregations.  Doesn't remove sorting,\nas we don't know whether that sorting was added by grouping or was there beforehand",
            "line": " assets\\ui-grid.js:20311"
        },
        {
            "message": "Missing item type\nSets the aggregation type on a column, if the\ncolumn is currently grouped then it removes the grouping first.\nIf the aggregationDef is null then will result in the aggregation\nbeing removed",
            "line": " assets\\ui-grid.js:20323"
        },
        {
            "message": "Missing item type\nGridOptions for grouping feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:20356"
        },
        {
            "message": "Missing item type\nEnable row grouping for entire grid.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:20364"
        },
        {
            "message": "Missing item type\nshows counts on the groupHeader rows. Not that if you are using a cellFilter or a\nsortingAlgorithm which relies on a specific format or data type, showing counts may cause that\nto break, since the group header rows will always be a string with groupingShowCounts enabled.\n<br/>Defaults to true except on columns of types 'date' and 'object'",
            "line": " assets\\ui-grid.js:20373"
        },
        {
            "message": "Missing item type\nThe string to use for the grouping header row label on rows which contain a null or undefined value in the grouped column.\n<br/>Defaults to \"Null\"",
            "line": " assets\\ui-grid.js:20384"
        },
        {
            "message": "Missing item type\nAllows group header rows to be selected.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:20393"
        },
        {
            "message": "Missing item type\nSets the grouping defaults based on the columnDefs",
            "line": " assets\\ui-grid.js:20404"
        },
        {
            "message": "Missing item type\nColumnDef for grouping feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:20416"
        },
        {
            "message": "Missing item type\nEnable grouping on this column\n<br/>Defaults to true.",
            "line": " assets\\ui-grid.js:20424"
        },
        {
            "message": "Missing item type\nSet the grouping for a column.  Format is:\n```\n  {\n    groupPriority: <number, starts at 0, if less than 0 or undefined then we're aggregating in this column>\n  }\n```\n\n**Note that aggregation used to be included in grouping, but is now separately set on the column via treeAggregation\nsetting in treeBase**\n\nWe group in the priority order given, this will also put these columns to the high order of the sort irrespective\nof the sort priority given them.  If there is no sort defined then we sort ascending, if there is a sort defined then\nwe use that sort.\n\nIf the groupPriority is undefined or less than 0, then we expect to be aggregating, and we look at the\naggregation types to determine what sort of aggregation we can do.  Values are in the constants file, but\ninclude SUM, COUNT, MAX, MIN\n\ngroupPriorities should generally be sequential, if they're not then the next time getGrouping is called\nwe'll renumber them to be sequential.\n<br/>Defaults to undefined.",
            "line": " assets\\ui-grid.js:20435"
        },
        {
            "message": "Missing item type\nShow the grouping (group and ungroup items) menu on this column\n<br/>Defaults to true.",
            "line": " assets\\ui-grid.js:20536"
        },
        {
            "message": "Missing item type\nShow the aggregation menu on this column\n<br/>Defaults to true.",
            "line": " assets\\ui-grid.js:20554"
        },
        {
            "message": "Missing item type\nMoves the columns around based on which are grouped",
            "line": " assets\\ui-grid.js:20578"
        },
        {
            "message": "Missing item type\nUsed on group columns to display the rendered value and optionally\ndisplay the count of rows.",
            "line": " assets\\ui-grid.js:20595"
        },
        {
            "message": "Missing item type\nMoves the column order so that the grouped columns are lined up\nto the left (well, unless you're RTL, then it's the right).  By doing this in\nthe columnsProcessor, we make it transient - when the column is ungrouped it'll\ngo back to where it was.\n\nDoes nothing if the option `moveGroupColumns` is set to false.",
            "line": " assets\\ui-grid.js:20617"
        },
        {
            "message": "Missing item type\nAdds this column to the existing grouping, at the end of the priority order.\nIf the column doesn't have a sort, adds one, by default ASC\n\nThis column will move to the left of any non-group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "line": " assets\\ui-grid.js:20679"
        },
        {
            "message": "Missing item type\nRemoves the groupPriority from this column.  If the\ncolumn was previously aggregated the aggregation will come back.\nThe sort will remain.\n\nThis column will move to the right of any other group columns, the\nmove is handled in a columnProcessor, so gets called as part of refresh",
            "line": " assets\\ui-grid.js:20723"
        },
        {
            "message": "Missing item type\nSets the aggregation type on a column, if the\ncolumn is currently grouped then it removes the grouping first.",
            "line": " assets\\ui-grid.js:20759"
        },
        {
            "message": "Missing item type\nSet the grouping based on a config object, used by the save state feature\n(more specifically, by the restore function in that feature )",
            "line": " assets\\ui-grid.js:20793"
        },
        {
            "message": "Missing item type\nClear any grouped columns and any aggregations.  Doesn't remove sorting,\nas we don't know whether that sorting was added by grouping or was there beforehand",
            "line": " assets\\ui-grid.js:20837"
        },
        {
            "message": "Missing item type\nRenumbers groupPriority and sortPriority such that\ngroupPriority is contiguous, and sortPriority either matches\ngroupPriority (for group columns), and otherwise is contiguous and\nhigher than groupPriority.",
            "line": " assets\\ui-grid.js:20871"
        },
        {
            "message": "Missing item type\nThe rowProcessor that creates the groupHeaders (i.e. does\nthe actual grouping).\n\nAssumes it is always called after the sorting processor, guaranteed by the priority setting\n\nProcesses all the rows in order, inserting a groupHeader row whenever there is a change\nin value of a grouped row, based on the sortAlgorithm used for the column.  The group header row\nis looked up in the groupHeaderCache, and used from there if there is one. The entity is reset\nto {} if one is found.\n\nAs it processes it maintains a `processingState` array. This records, for each level of grouping we're\nworking with, the following information:\n```\n  {\n    fieldName: name,\n    col: col,\n    initialised: boolean,\n    currentValue: value,\n    currentRow: gridRow,\n  }\n```\nWe look for changes in the currentValue at any of the levels.  Where we find a change we:\n\n- create a new groupHeader row in the array",
            "line": " assets\\ui-grid.js:20919"
        },
        {
            "message": "Missing item type\nCreates the processing state array that is used\nfor groupRows.",
            "line": " assets\\ui-grid.js:20989"
        },
        {
            "message": "Missing item type\nGet the grouping settings from the columns.  As a side effect\nthis always renumbers the grouping starting at 0",
            "line": " assets\\ui-grid.js:21018"
        },
        {
            "message": "Missing item type\nCreate a group header row, and link it to the various configuration\nitems that we use.\n\nLook for the row in the oldGroupingHeaderCache, write the row into the new groupingHeaderCache.",
            "line": " assets\\ui-grid.js:21059"
        },
        {
            "message": "Missing item type\nSet all processing states lower than the one that had a break in value to\nno longer be initialised.  Render the counts into the entity ready for display.",
            "line": " assets\\ui-grid.js:21136"
        },
        {
            "message": "Missing item type\nExtract the groupHeaderCache hash, pulling out only the states.\n\nThe example below shows a grid that is grouped by gender then age\n\n<pre>\n  {\n    male: {\n      state: 'expanded',\n      children: {\n        22: { state: 'expanded' },\n        30: { state: 'collapsed' }\n      }\n    },\n    female: {\n      state: 'expanded',\n      children: {\n        28: { state: 'expanded' },\n        55: { state: 'collapsed' }\n      }\n    }\n  }\n</pre>",
            "line": " assets\\ui-grid.js:21157"
        },
        {
            "message": "Missing item type\nTake a hash in the format as created by getRowExpandedStates,\nand apply it to the grid.grouping.groupHeaderCache.\n\nTakes a treeSubset, and applies to a treeSubset - so can be called\nrecursively.",
            "line": " assets\\ui-grid.js:21207"
        },
        {
            "message": "Missing item type\n# ui.grid.importer\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides the ability to import data into the grid. It\nuses the column defs to work out which data belongs in which column,\nand creates entities from a configured class (typically a $resource).\n\nIf the rowEdit feature is enabled, it also calls save on those newly\ncreated objects, and then displays any errors in the imported data.\n\nCurrently the importer imports only CSV and json files, although provision has been\nmade to process other file formats, and these can be added over time.\n\nFor json files, the properties within each object in the json must match the column names\n(to put it another way, the importer doesn't process the json, it just copies the objects\nwithin the json into a new instance of the specified object type)\n\nFor CSV import, the default column identification relies on each column in the\nheader row matching a column.name or column.displayName. Optionally, a column identification\ncallback can be used.  This allows matching using other attributes, which is particularly\nuseful if your application has internationalised column headings (i.e. the headings that\nthe user sees don't match the column names).\n\nThe importer makes use of the grid menu as the UI for requesting an\nimport.\n\n<div ui-grid-importer></div>",
            "line": " assets\\ui-grid.js:21306"
        },
        {
            "message": "Missing item type\nconstants available in importer module",
            "line": " assets\\ui-grid.js:21343"
        },
        {
            "message": "Missing item type\nServices for importer feature",
            "line": " assets\\ui-grid.js:21354"
        },
        {
            "message": "Missing item type\nPublic Api for importer feature",
            "line": " assets\\ui-grid.js:21374"
        },
        {
            "message": "Missing item type\nImports a file into the grid using the file object\nprovided.  Bypasses the grid menu",
            "line": " assets\\ui-grid.js:21387"
        },
        {
            "message": "Missing item type\nGridOptions for importer feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:21424"
        },
        {
            "message": "Missing item type\nWhether or not importer is enabled.  Automatically set\nto false if the user's browser does not support the required fileApi.\nOtherwise defaults to true.",
            "line": " assets\\ui-grid.js:21432"
        },
        {
            "message": "Missing item type\nA callback function that will process headers using custom\nlogic.  Set this callback function if the headers that your user will provide in their\nimport file don't necessarily match the grid header or field names.  This might commonly\noccur where your application is internationalised, and therefore the field names\nthat the user recognises are in a different language than the field names that\nui-grid knows about.\n\nDefaults to the internal `processHeaders` method, which seeks to match using both\ndisplayName and column.name.  Any non-matching columns are discarded.\n\nYour callback routine should respond by processing the header array, and returning an array\nof matching column names.  A null value in any given position means \"don't import this column\"\n\n<pre>\n     gridOptions.importerProcessHeaders: function( headerArray ) {\n       var myHeaderColumns = [];\n       var thisCol;\n       headerArray.forEach( function( value, index ) {\n         thisCol = mySpecialLookupFunction( value );\n         myHeaderColumns.push( thisCol.name );\n       });\n\n       return myHeaderCols;\n     })\n</pre>",
            "line": " assets\\ui-grid.js:21452"
        },
        {
            "message": "Missing item type\nA callback function that will filter (usually translate) a single\nheader.  Used when you want to match the passed in column names to the column\ndisplayName after the header filter.\n\nYour callback routine needs to return the filtered header value.\n<pre>\n     gridOptions.importerHeaderFilter: function( displayName ) {\n       return $translate.instant( displayName );\n     })\n</pre>\n\nor:\n<pre>\n     gridOptions.importerHeaderFilter: $translate.instant\n</pre>",
            "line": " assets\\ui-grid.js:21489"
        },
        {
            "message": "Missing item type\nA callback function that provides custom error handling, rather\nthan the standard grid behaviour of an alert box and a console message.  You\nmight use this to internationalise the console log messages, or to write to a\ncustom logging routine that returned errors to the server.\n\n<pre>\n     gridOptions.importerErrorCallback: function( grid, errorKey, consoleMessage, context ) {\n       myUserDisplayRoutine( errorKey );\n       myLoggingRoutine( consoleMessage, context );\n     })\n</pre>",
            "line": " assets\\ui-grid.js:21514"
        },
        {
            "message": "Missing item type\nA mandatory callback function that adds data to the source data array.  The grid\ngenerally doesn't add rows to the source data array, it is tidier to handle this through a user\ncallback.\n\n<pre>\n     gridOptions.importerDataAddCallback: function( grid, newObjects ) {\n       $scope.myData = $scope.myData.concat( newObjects );\n     })\n</pre>",
            "line": " assets\\ui-grid.js:21542"
        },
        {
            "message": "Missing item type\nAn object on which we call `new` to create each new row before inserting it into\nthe data array.  Typically this would be a $resource entity, which means that if you're using\nthe rowEdit feature, you can directly call save on this entity when the save event is triggered.\n\nDefaults to a vanilla javascript object",
            "line": " assets\\ui-grid.js:21564"
        },
        {
            "message": "Missing item type\nWhether or not to show an item in the grid menu.  Defaults to true.",
            "line": " assets\\ui-grid.js:21581"
        },
        {
            "message": "Missing item type\nA callback that massages the data for each object.  For example,\nyou might have data stored as a code value, but display the decode.  This callback\ncan be used to change the decoded value back into a code.  Defaults to doing nothing.",
            "line": " assets\\ui-grid.js:21590"
        },
        {
            "message": "Missing item type\nAdds import menu item to the grid menu,\nallowing the user to request import of a file",
            "line": " assets\\ui-grid.js:21620"
        },
        {
            "message": "Missing item type\nImports the provided file into the grid using the file object\nprovided.  Bypasses the grid menu",
            "line": " assets\\ui-grid.js:21645"
        },
        {
            "message": "Missing item type\nCreates a function that imports a json file into the grid.\nThe json data is imported into new objects of type `gridOptions.importerNewObject`,\nand if the rowEdit feature is enabled the rows are marked as dirty",
            "line": " assets\\ui-grid.js:21676"
        },
        {
            "message": "Missing item type\nParses a json file, returns the parsed data.\nDisplays an error if file doesn't parse",
            "line": " assets\\ui-grid.js:21709"
        },
        {
            "message": "Missing item type\nCreates a function that imports a csv file into the grid\n(allowing it to be used in the reader.onload event)",
            "line": " assets\\ui-grid.js:21739"
        },
        {
            "message": "Missing item type\nParses a csv file into an array of arrays, with the first\narray being the headers, and the remaining arrays being the data.\nThe logic for this comes from https://github.com/thetalecrafter/excel.js/blob/master/src/csv.js,\nwhich is noted as being under the MIT license.  The code is modified to pass the jscs yoda condition\nchecker",
            "line": " assets\\ui-grid.js:21768"
        },
        {
            "message": "Missing item type\nConverts an array of arrays (representing the csv file)\ninto a set of objects.  Uses the provided `gridOptions.importerNewObject`\nto create the objects, and maps the header row into the individual columns\nusing either `gridOptions.importerProcessHeaders`, or by using a native method\nof matching to either the displayName, column name or column field of\nthe columns in the column defs.  The resulting objects will have attributes\nthat are named based on the column.field or column.name, in that order.",
            "line": " assets\\ui-grid.js:21788"
        },
        {
            "message": "Missing item type\nDetermines the columns that the header row from\na csv (or other) file represents.",
            "line": " assets\\ui-grid.js:21829"
        },
        {
            "message": "Missing item type\nRuns through the column defs and creates a hash of\nthe displayName, name and field, and of each of those values forced to lower case,\nwith each pointing to the field or name\n(whichever is present).  Used to lookup column headers and decide what\nattribute name to give to the resulting field.",
            "line": " assets\\ui-grid.js:21867"
        },
        {
            "message": "Missing item type\nInserts our new objects into the grid data, and\nsets the rows to dirty if the rowEdit feature is being used\n\nDoes this by registering a watch on dataChanges, which essentially\nis waiting on the result of the grid data watch, and downstream processing.\n\nWhen the callback is called, it deregisters itself - we don't want to run\nagain next time data is added.\n\nIf we never get called, we deregister on destroy.",
            "line": " assets\\ui-grid.js:21908"
        },
        {
            "message": "Missing item type\nMakes a new object based on `gridOptions.importerNewObject`,\nor based on an empty object if not present",
            "line": " assets\\ui-grid.js:21942"
        },
        {
            "message": "Missing item type\nProvides an internationalised user alert for the failure,\nand logs a console message including diagnostic content.\nOptionally, if the the `gridOptions.importerErrorCallback` routine\nis defined, then calls that instead, allowing user specified error routines",
            "line": " assets\\ui-grid.js:21960"
        },
        {
            "message": "Missing item type\n#ui.grid.infiniteScroll\n\n <div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\n This module provides infinite scroll functionality to ui-grid",
            "line": " assets\\ui-grid.js:22055"
        },
        {
            "message": "Missing item type\nService for infinite scroll features",
            "line": " assets\\ui-grid.js:22069"
        },
        {
            "message": "Missing item type\nThis method register events and methods into grid public API",
            "line": " assets\\ui-grid.js:22079"
        },
        {
            "message": "Missing item type\nPublic API for infinite scroll feature",
            "line": " assets\\ui-grid.js:22097"
        },
        {
            "message": "Missing item type\nThis event fires when scroll reaches bottom percentage of grid\nand needs to load data",
            "line": " assets\\ui-grid.js:22107"
        },
        {
            "message": "Missing item type\nThis event fires when scroll reaches top percentage of grid\nand needs to load data",
            "line": " assets\\ui-grid.js:22118"
        },
        {
            "message": "Missing item type\nCall this function when you have loaded the additional data\nrequested.  You should set scrollUp and scrollDown to indicate\nwhether there are still more pages in each direction.\n\nIf you call dataLoaded without first calling `saveScrollPercentage` then we will\nscroll the user to the start of the newly loaded data, which usually gives a smooth scroll\nexperience, but can give a jumpy experience with large `infiniteScrollRowsFromEnd` values, and\non variable speed internet connections.  Using `saveScrollPercentage` as demonstrated in the tutorial\nshould give a smoother scrolling experience for users.\n\nSee infinite_scroll tutorial for example of usage",
            "line": " assets\\ui-grid.js:22133"
        },
        {
            "message": "Missing item type\nCall this function when you have taken some action that makes the current\nscroll position invalid.  For example, if you're using external sorting and you've resorted\nthen you might reset the scroll, or if you've otherwise substantially changed the data, perhaps\nyou've reused an existing grid for a new data set\n\nYou must tell us whether there is data upwards or downwards after the reset",
            "line": " assets\\ui-grid.js:22165"
        },
        {
            "message": "Missing item type\nSaves the scroll percentage and number of visible rows before you adjust the data,\nused if you're subsequently going to call `dataRemovedTop` or `dataRemovedBottom`",
            "line": " assets\\ui-grid.js:22188"
        },
        {
            "message": "Missing item type\nAdjusts the scroll position after you've removed data at the top",
            "line": " assets\\ui-grid.js:22201"
        },
        {
            "message": "Missing item type\nAdjusts the scroll position after you've removed data at the bottom",
            "line": " assets\\ui-grid.js:22215"
        },
        {
            "message": "Missing item type\nSets the scrollUp and scrollDown flags, handling nulls and undefined,\nand also sets the grid.suppressParentScroll",
            "line": " assets\\ui-grid.js:22229"
        },
        {
            "message": "Missing item type\nGridOptions for infinite scroll feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:22252"
        },
        {
            "message": "Missing item type\nEnable infinite scrolling for this grid\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:22260"
        },
        {
            "message": "Missing item type\nThis setting controls how close to the end of the dataset a user gets before\nmore data is requested by the infinite scroll, whether scrolling up or down.  This allows you to\n'prefetch' rows before the user actually runs out of scrolling.\n\nNote that if you set this value too high it may give jumpy scrolling behaviour, if you're getting\nthis behaviour you could use the `saveScrollPercentageMethod` right before loading your data, and we'll\npreserve that scroll position\n\n<br> Defaults to 20",
            "line": " assets\\ui-grid.js:22269"
        },
        {
            "message": "Missing item type\nWhether you allow infinite scroll up, implying that the first page of data\nyou have displayed is in the middle of your data set.  If set to true then we trigger the\nneedMoreDataTop event when the user hits the top of the scrollbar.\n<br> Defaults to false",
            "line": " assets\\ui-grid.js:22285"
        },
        {
            "message": "Missing item type\nWhether you allow infinite scroll down, implying that the first page of data\nyou have displayed is in the middle of your data set.  If set to true then we trigger the\nneedMoreData event when the user hits the bottom of the scrollbar.\n<br> Defaults to true",
            "line": " assets\\ui-grid.js:22296"
        },
        {
            "message": "Missing item type\nSets the scrollUp and scrollDown flags, handling nulls and undefined,\nand also sets the grid.suppressParentScroll",
            "line": " assets\\ui-grid.js:22309"
        },
        {
            "message": "Missing item type\nCalled whenever the grid scrolls, determines whether the scroll should\ntrigger an infinite scroll request for more data",
            "line": " assets\\ui-grid.js:22328"
        },
        {
            "message": "Missing item type\nThis function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection\nand whether there are more pages upwards or downwards.  It also stores the number of rows that we had previously,\nand clears out any saved scroll position so that we know whether or not the user calls `saveScrollPercentage`",
            "line": " assets\\ui-grid.js:22371"
        },
        {
            "message": "Missing item type\nOnce we are informed that data has been loaded, adjust the scroll position to account for that\naddition and to make things look clean.\n\nIf we're scrolling up we scroll to the first row of the old data set -\nso we're assuming that you would have gotten to the top of the grid (from the 20% need more data trigger) by\nthe time the data comes back.  If we're scrolling down we scoll to the last row of the old data set - so we're\nassuming that you would have gotten to the bottom of the grid (from the 80% need more data trigger) by the time\nthe data comes back.\n\nNeither of these are good assumptions, but making this a smoother experience really requires\nthat trigger to not be a percentage, and to be much closer to the end of the data (say, 5 rows off the end).  Even then\nit'd be better still to actually run into the end.  But if the data takes a while to come back, they may have scrolled\nsomewhere else in the mean-time, in which case they'll get a jump back to the new data.  Anyway, this will do for\nnow, until someone wants to do better.",
            "line": " assets\\ui-grid.js:22397"
        },
        {
            "message": "Missing item type\nThis function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection",
            "line": " assets\\ui-grid.js:22461"
        },
        {
            "message": "Missing item type\nAdjusts the scroll position after you've removed data at the top. You should\nhave called `saveScrollPercentage` before you remove the data, and if you're doing this in\nresponse to a `needMoreData` you should wait until the promise from `loadData` has resolved\nbefore you start removing data",
            "line": " assets\\ui-grid.js:22488"
        },
        {
            "message": "Missing item type\nAdjusts the scroll position after you've removed data at the bottom.  You should\nhave called `saveScrollPercentage` before you remove the data, and if you're doing this in\nresponse to a `needMoreData` you should wait until the promise from `loadData` has resolved\nbefore you start removing data",
            "line": " assets\\ui-grid.js:22517"
        },
        {
            "message": "Missing item type\n# ui.grid.moveColumns\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides column moving capability to ui.grid. It enables to change the position of columns.\n<div doc-module-components=\"ui.grid.moveColumns\"></div>",
            "line": " assets\\ui-grid.js:22598"
        },
        {
            "message": "Missing item type\nService for column moving feature.",
            "line": " assets\\ui-grid.js:22612"
        },
        {
            "message": "Missing item type\nPublic Api for column moving feature.",
            "line": " assets\\ui-grid.js:22630"
        },
        {
            "message": "Missing item type\nraised when column is moved\n<pre>\n     gridApi.colMovable.on.columnPositionChanged(scope,function(colDef, originalPosition, newPosition){})\n</pre>",
            "line": " assets\\ui-grid.js:22637"
        },
        {
            "message": "Missing item type\nMethod can be used to change column position.\n<pre>\n     gridApi.colMovable.moveColumn(oldPosition, newPosition)\n</pre>",
            "line": " assets\\ui-grid.js:22655"
        },
        {
            "message": "Missing item type\nOptions for configuring the move column feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:22701"
        },
        {
            "message": "Missing item type\nIf defined, sets the default value for the colMovable flag on each individual colDefs\nif their individual enableColumnMoving configuration is not defined. Defaults to true.",
            "line": " assets\\ui-grid.js:22708"
        },
        {
            "message": "Missing item type\nColumn Definition for move column feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:22719"
        },
        {
            "message": "Missing item type\nEnable column moving for the column.",
            "line": " assets\\ui-grid.js:22726"
        },
        {
            "message": "Missing item type\nCache the current order of columns, so we can restore them after new columnDefs are defined",
            "line": " assets\\ui-grid.js:22736"
        },
        {
            "message": "Missing item type\ndataChangeCallback which uses the cached column order to restore the column order\nwhen it is reset by altering the columnDefs array.",
            "line": " assets\\ui-grid.js:22745"
        },
        {
            "message": "Missing item type\n# ui.grid.pagination\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides pagination support to ui-grid",
            "line": " assets\\ui-grid.js:23175"
        },
        {
            "message": "Missing item type\nService for the pagination feature",
            "line": " assets\\ui-grid.js:23189"
        },
        {
            "message": "Missing item type\nAttaches the service to a certain grid",
            "line": " assets\\ui-grid.js:23198"
        },
        {
            "message": "Missing item type\nPublic API for the pagination feature",
            "line": " assets\\ui-grid.js:23208"
        },
        {
            "message": "Missing item type\nThis event fires when the pageSize or currentPage changes",
            "line": " assets\\ui-grid.js:23217"
        },
        {
            "message": "Missing item type\nReturns the number of the current page",
            "line": " assets\\ui-grid.js:23230"
        },
        {
            "message": "Missing item type\nReturns the index of the first row of the current page.",
            "line": " assets\\ui-grid.js:23239"
        },
        {
            "message": "Missing item type\nReturns the index of the last row of the current page.",
            "line": " assets\\ui-grid.js:23253"
        },
        {
            "message": "Missing item type\nReturns the total number of pages",
            "line": " assets\\ui-grid.js:23265"
        },
        {
            "message": "Missing item type\nMoves to the next page, if possible",
            "line": " assets\\ui-grid.js:23282"
        },
        {
            "message": "Missing item type\nMoves to the previous page, if we're not on the first page",
            "line": " assets\\ui-grid.js:23302"
        },
        {
            "message": "Missing item type\nMoves to the requested page",
            "line": " assets\\ui-grid.js:23315"
        },
        {
            "message": "Missing item type\nGridOptions for the pagination feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:23364"
        },
        {
            "message": "Missing item type\nEnables pagination.  Defaults to true.",
            "line": " assets\\ui-grid.js:23372"
        },
        {
            "message": "Missing item type\nEnables the paginator at the bottom of the grid. Turn this off if you want to implement your\n             own controls outside the grid.",
            "line": " assets\\ui-grid.js:23379"
        },
        {
            "message": "Missing item type\nDisables client side pagination. When true, handle the paginationChanged event and set data\n             and totalItems.  Defaults to `false`",
            "line": " assets\\ui-grid.js:23387"
        },
        {
            "message": "Missing item type\nDisables client-side pagination. When true, handle the `paginationChanged` event and set `data`,\n             `firstRowIndex`, `lastRowIndex`, and `totalItems`.  Defaults to `false`.",
            "line": " assets\\ui-grid.js:23396"
        },
        {
            "message": "Missing item type\nTotal number of items, set automatically when using client side pagination, but needs set by user\n             for server side pagination",
            "line": " assets\\ui-grid.js:23405"
        },
        {
            "message": "Missing item type\nArray of page sizes, defaults to `[250, 500, 1000]`",
            "line": " assets\\ui-grid.js:23415"
        },
        {
            "message": "Missing item type\nPage size, defaults to the first item in paginationPageSizes, or 0 if paginationPageSizes is empty",
            "line": " assets\\ui-grid.js:23424"
        },
        {
            "message": "Missing item type\nCurrent page number, defaults to 1",
            "line": " assets\\ui-grid.js:23437"
        },
        {
            "message": "Missing item type\nA custom template for the pager, defaults to `ui-grid/pagination`",
            "line": " assets\\ui-grid.js:23447"
        },
        {
            "message": "Missing item type\nRaises paginationChanged and calls refresh for client side pagination",
            "line": " assets\\ui-grid.js:23457"
        },
        {
            "message": "Missing item type\n# ui.grid.pinning\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides column pinning to the end user via menu options in the column header\n\n<div doc-module-components=\"ui.grid.pinning\"></div>",
            "line": " assets\\ui-grid.js:23669"
        },
        {
            "message": "Missing item type\nPublic Api for pinning feature",
            "line": " assets\\ui-grid.js:23702"
        },
        {
            "message": "Missing item type\nraised when column pin state has changed\n<pre>\n  gridApi.pinning.on.columnPinned(scope, function(colDef){})\n</pre>",
            "line": " assets\\ui-grid.js:23711"
        },
        {
            "message": "Missing item type\npin column left, right, or none\n<pre>\n  gridApi.pinning.pinColumn(col, uiGridPinningConstants.container.LEFT)\n</pre>",
            "line": " assets\\ui-grid.js:23728"
        },
        {
            "message": "Missing item type\nGridOptions for pinning feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:23753"
        },
        {
            "message": "Missing item type\nEnable pinning for the entire grid.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:23761"
        },
        {
            "message": "Missing item type\nHide Pin Left for the entire grid.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:23769"
        },
        {
            "message": "Missing item type\nHide Pin Right pinning for the entire grid.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:23777"
        },
        {
            "message": "Missing item type\nColumnDef for pinning feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:23790"
        },
        {
            "message": "Missing item type\nEnable pinning for the individual column.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:23798"
        },
        {
            "message": "Missing item type\nHide Pin Left for the individual column.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:23806"
        },
        {
            "message": "Missing item type\nHide Pin Right for the individual column.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:23814"
        },
        {
            "message": "Missing item type\nColumn is pinned left when grid is rendered\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:23823"
        },
        {
            "message": "Missing item type\nColumn is pinned right when grid is rendered\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:23831"
        },
        {
            "message": "Missing item type\n# ui.grid.resizeColumns\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module allows columns to be resized.",
            "line": " assets\\ui-grid.js:23947"
        },
        {
            "message": "Missing item type\nGridOptions for resizeColumns feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:23966"
        },
        {
            "message": "Missing item type\nEnable column resizing on the entire grid\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:23974"
        },
        {
            "message": "Missing item type\nColumnDef for resizeColumns feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:23993"
        },
        {
            "message": "Missing item type\nEnable column resizing on an individual column\n<br/>Defaults to GridOptions.enableColumnResizing",
            "line": " assets\\ui-grid.js:24001"
        },
        {
            "message": "Missing item type\nPublic Api for column resize feature.",
            "line": " assets\\ui-grid.js:24021"
        },
        {
            "message": "Missing item type\nraised when column is resized\n<pre>\n     gridApi.colResizable.on.columnSizeChanged(scope,function(colDef, deltaChange){})\n</pre>",
            "line": " assets\\ui-grid.js:24028"
        },
        {
            "message": "Missing item type\n# ui.grid.rowEdit\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module extends the edit feature to provide tracking and saving of rows\nof data.  The tutorial provides more information on how this feature is best\nused {@link tutorial/205_row_editable here}.\n<br/>\nThis feature depends on usage of the ui-grid-edit feature, and also benefits\nfrom use of ui-grid-cellNav to provide the full spreadsheet-like editing\nexperience",
            "line": " assets\\ui-grid.js:24512"
        },
        {
            "message": "Missing item type\nconstants available in row edit module",
            "line": " assets\\ui-grid.js:24533"
        },
        {
            "message": "Missing item type\nServices for row editing features",
            "line": " assets\\ui-grid.js:24542"
        },
        {
            "message": "Missing item type\nPublic Api for rowEdit feature",
            "line": " assets\\ui-grid.js:24554"
        },
        {
            "message": "Missing item type\nraised when a row is ready for saving.  Once your\nrow has saved you may need to use angular.extend to update the\ndata entity with any changed data from your save (for example,\nlock version information if you're using optimistic locking,\nor last update time/user information).\n\nYour method should call setSavePromise somewhere in the body before\nreturning control.  The feature will then wait, with the gridRow greyed out\nwhilst this promise is being resolved.\n\n<pre>\n     gridApi.rowEdit.on.saveRow(scope,function(rowEntity){})\n</pre>\nand somewhere within the event handler:\n<pre>\n     gridApi.rowEdit.setSavePromise( rowEntity, savePromise)\n</pre>",
            "line": " assets\\ui-grid.js:24566"
        },
        {
            "message": "Missing item type\nSets the promise associated with the row save, mandatory that\nthe saveRow event handler calls this method somewhere before returning.\n<pre>\n     gridApi.rowEdit.setSavePromise(rowEntity, savePromise)\n</pre>",
            "line": " assets\\ui-grid.js:24598"
        },
        {
            "message": "Missing item type\nReturns all currently dirty rows\n<pre>\n     gridApi.rowEdit.getDirtyRows(grid)\n</pre>",
            "line": " assets\\ui-grid.js:24616"
        },
        {
            "message": "Missing item type\nReturns all currently errored rows\n<pre>\n     gridApi.rowEdit.getErrorRows(grid)\n</pre>",
            "line": " assets\\ui-grid.js:24630"
        },
        {
            "message": "Missing item type\nTriggers a save event for all currently dirty rows, could\nbe used where user presses a save button or navigates away from the page\n<pre>\n     gridApi.rowEdit.flushDirtyRows(grid)\n</pre>",
            "line": " assets\\ui-grid.js:24644"
        },
        {
            "message": "Missing item type\nSets each of the rows passed in dataRows\nto be dirty.  note that if you have only just inserted the\nrows into your data you will need to wait for a $digest cycle\nbefore the gridRows are present - so often you would wrap this\ncall in a $interval or $timeout\n<pre>\n     $interval( function() {\n       gridApi.rowEdit.setRowsDirty(myDataRows);\n     }, 0, 1);\n</pre>",
            "line": " assets\\ui-grid.js:24662"
        },
        {
            "message": "Missing item type\nSets each of the rows passed in dataRows\nto be clean, removing them from the dirty cache and the error cache,\nand clearing the error flag and the dirty flag\n<pre>\n     var gridRows = $scope.gridApi.rowEdit.getDirtyRows();\n     var dataRows = gridRows.map( function( gridRow ) { return gridRow.entity; });\n     $scope.gridApi.rowEdit.setRowsClean( dataRows );\n</pre>",
            "line": " assets\\ui-grid.js:24684"
        },
        {
            "message": "Missing item type\nOptions for configuring the rowEdit feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:24724"
        },
        {
            "message": "Missing item type\nReturns a function that saves the specified row from the grid,\nand returns a promise",
            "line": " assets\\ui-grid.js:24735"
        },
        {
            "message": "Missing item type\nSets the promise associated with the row save, mandatory that\nthe saveRow event handler calls this method somewhere before returning.\n<pre>\n     gridApi.rowEdit.setSavePromise(grid, rowEntity)\n</pre>",
            "line": " assets\\ui-grid.js:24769"
        },
        {
            "message": "Missing item type\nReturns a function that processes the successful\nresolution of a save promise",
            "line": " assets\\ui-grid.js:24791"
        },
        {
            "message": "Missing item type\nReturns a function that processes the failed\nresolution of a save promise",
            "line": " assets\\ui-grid.js:24816"
        },
        {
            "message": "Missing item type\nRemoves a row from a cache of rows - either\ngrid.rowEdit.errorRows or grid.rowEdit.dirtyRows.  If the row\nis not present silently does nothing.",
            "line": " assets\\ui-grid.js:24844"
        },
        {
            "message": "Missing item type\nChecks whether a row is already present\nin the given array",
            "line": " assets\\ui-grid.js:24867"
        },
        {
            "message": "Missing item type\nTriggers a save event for all currently dirty rows, could\nbe used where user presses a save button or navigates away from the page\n<pre>\n     gridApi.rowEdit.flushDirtyRows(grid)\n</pre>",
            "line": " assets\\ui-grid.js:24887"
        },
        {
            "message": "Missing item type\nReceives an afterCellEdit event from the edit function,\nand sets flags as appropriate.  Only the rowEntity parameter\nis processed, although other params are available.  Grid\nis automatically provided by the gridApi.",
            "line": " assets\\ui-grid.js:24914"
        },
        {
            "message": "Missing item type\nReceives a beginCellEdit event from the edit function,\nand cancels any rowEditSaveTimers if present, as the user is still editing\nthis row.  Only the rowEntity parameter\nis processed, although other params are available.  Grid\nis automatically provided by the gridApi.",
            "line": " assets\\ui-grid.js:24947"
        },
        {
            "message": "Missing item type\nReceives a cancelCellEdit event from the edit function,\nand if the row was already dirty, restarts the save timer.  If the row\nwas not already dirty, then it's not dirty now either and does nothing.\n\nOnly the rowEntity parameter\nis processed, although other params are available.  Grid\nis automatically provided by the gridApi.",
            "line": " assets\\ui-grid.js:24968"
        },
        {
            "message": "Missing item type\ncellNav tells us that the selected cell has changed.  If\nthe new row had a timer running, then stop it similar to in a beginCellEdit\ncall.  If the old row is dirty and not the same as the new row, then\nstart a timer on it.",
            "line": " assets\\ui-grid.js:24992"
        },
        {
            "message": "Missing item type\nHow long the grid should wait for another change on this row\nbefore triggering a save (in milliseconds).  If set to -1, then saves are\nnever triggered by timer (implying that the user will call flushDirtyRows()\nmanually)",
            "line": " assets\\ui-grid.js:25016"
        },
        {
            "message": "Missing item type\nConsider setting a timer on this row (if it is dirty).  if there is a timer running\non the row and the row isn't currently saving, cancel it, using cancelTimer, then if the row is\ndirty and not currently saving then set a new timer",
            "line": " assets\\ui-grid.js:25032"
        },
        {
            "message": "Missing item type\ncancel the $interval for any timer running on this row\nthen delete the timer itself",
            "line": " assets\\ui-grid.js:25055"
        },
        {
            "message": "Missing item type\nSets each of the rows passed in dataRows\nto be dirty.  note that if you have only just inserted the\nrows into your data you will need to wait for a $digest cycle\nbefore the gridRows are present - so often you would wrap this\ncall in a $interval or $timeout\n<pre>\n     $interval( function() {\n       gridApi.rowEdit.setRowsDirty( myDataRows);\n     }, 0, 1);\n</pre>",
            "line": " assets\\ui-grid.js:25073"
        },
        {
            "message": "Missing item type\nSets each of the rows passed in dataRows\nto be clean, clearing the dirty flag and the error flag, and removing\nthe rows from the dirty and error caches.",
            "line": " assets\\ui-grid.js:25116"
        },
        {
            "message": "Missing item type\n# ui.grid.saveState\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\nThis module provides the ability to save the grid state, and restore\nit when the user returns to the page.\n\nNo UI is provided, the caller should provide their own UI/buttons\nas appropriate. Usually the navigate events would be used to save\nthe grid state and restore it.\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.save-state\"></div>",
            "line": " assets\\ui-grid.js:25223"
        },
        {
            "message": "Missing item type\nconstants available in save state module",
            "line": " assets\\ui-grid.js:25247"
        },
        {
            "message": "Missing item type\nServices for saveState feature",
            "line": " assets\\ui-grid.js:25258"
        },
        {
            "message": "Missing item type\nPublic Api for saveState feature",
            "line": " assets\\ui-grid.js:25275"
        },
        {
            "message": "Missing item type\nPackages the current state of the grid into\nan object, and provides it to the user for saving",
            "line": " assets\\ui-grid.js:25288"
        },
        {
            "message": "Missing item type\nRestores the provided state into the grid",
            "line": " assets\\ui-grid.js:25299"
        },
        {
            "message": "Missing item type\nGridOptions for saveState feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:25323"
        },
        {
            "message": "Missing item type\nSave the current column widths.  Note that unless\nyou've provided the user with some way to resize their columns (say\nthe resize columns feature), then this makes little sense.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25330"
        },
        {
            "message": "Missing item type\nRestore the current column order.  Note that unless\nyou've provided the user with some way to reorder their columns (for\nexample the move columns feature), this makes little sense.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25340"
        },
        {
            "message": "Missing item type\nSave the current scroll position.  Note that this\nis saved as the percentage of the grid scrolled - so if your\nuser returns to a grid with a significantly different number of\nrows (perhaps some data has been deleted) then the scroll won't\nactually show the same rows as before.  If you want to scroll to\na specific row then you should instead use the saveFocus option, which\nis the default.\n\nNote that this element will only be saved if the cellNav feature is\nenabled\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:25350"
        },
        {
            "message": "Missing item type\nSave the current focused cell.  On returning\nto this focused cell we'll also scroll.  This option is\npreferred to the saveScroll option, so is set to true by\ndefault.  If saveScroll is set to true then this option will\nbe disabled.\n\nBy default this option saves the current row number and column\nnumber, and returns to that row and column.  However, if you define\na saveRowIdentity function, then it will return you to the currently\nselected column within that row (in a business sense - so if some\nrows have been deleted, it will still find the same data, presuming it\nstill exists in the list.  If it isn't in the list then it will instead\nreturn to the same row number - i.e. scroll percentage)\n\nNote that this option will do nothing if the cellNav\nfeature is not enabled.\n\n<br/>Defaults to true (unless saveScroll is true)",
            "line": " assets\\ui-grid.js:25367"
        },
        {
            "message": "Missing item type\nA function that can be called, passing in a rowEntity,\nand that will return a unique id for that row.  This might simply\nreturn the `id` field from that row (if you have one), or it might\nconcatenate some fields within the row to make a unique value.\n\nThis value will be used to find the same row again and set the focus\nto it, if it exists when we return.\n\n<br/>Defaults to undefined",
            "line": " assets\\ui-grid.js:25391"
        },
        {
            "message": "Missing item type\nSave whether or not columns are visible.\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25405"
        },
        {
            "message": "Missing item type\nSave the current sort state for each column\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25414"
        },
        {
            "message": "Missing item type\nSave the current filter state for each column\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25423"
        },
        {
            "message": "Missing item type\nSave the currently selected rows.  If the `saveRowIdentity` callback\nis defined, then it will save the id of the row and select that.  If not, then\nit will attempt to select the rows by row number, which will give the wrong results\nif the data set has changed in the mean-time.\n\nNote that this option only does anything\nif the selection feature is enabled.\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25432"
        },
        {
            "message": "Missing item type\nSave the grouping configuration.  If set to true and the\ngrouping feature is not enabled then does nothing.\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25447"
        },
        {
            "message": "Missing item type\nSave the grouping row expanded states.  If set to true and the\ngrouping feature is not enabled then does nothing.\n\nThis can be quite a bit of data, in many cases you wouldn't want to save this\ninformation.\n\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:25457"
        },
        {
            "message": "Missing item type\nSave pinning state for columns.\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25470"
        },
        {
            "message": "Missing item type\nSave the treeView configuration.  If set to true and the\ntreeView feature is not enabled then does nothing.\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:25479"
        },
        {
            "message": "Missing item type\nSaves the current grid state into an object, and\npasses that object back to the caller",
            "line": " assets\\ui-grid.js:25493"
        },
        {
            "message": "Missing item type\nApplies the provided state to the grid",
            "line": " assets\\ui-grid.js:25516"
        },
        {
            "message": "Missing item type\nSaves the column setup, including sort, filters, ordering,\npinning and column widths.\n\nWorks through the current columns, storing them in order.  Stores the\ncolumn name, then the visible flag, width, sort and filters for each column.",
            "line": " assets\\ui-grid.js:25556"
        },
        {
            "message": "Missing item type\nSaves the currently scroll or focus.\n\nIf cellNav isn't present then does nothing - we can't return\nto the scroll position without cellNav anyway.\n\nIf the cellNav module is present, and saveFocus is true, then\nit saves the currently focused cell.  If rowIdentity is present\nthen saves using rowIdentity, otherwise saves visibleRowNum.\n\nIf the cellNav module is not present, and saveScroll is true, then\nit approximates the current scroll row and column, and saves that.",
            "line": " assets\\ui-grid.js:25612"
        },
        {
            "message": "Missing item type\nSaves the currently selected rows, if the selection feature is enabled",
            "line": " assets\\ui-grid.js:25665"
        },
        {
            "message": "Missing item type\nSaves the grouping state, if the grouping feature is enabled",
            "line": " assets\\ui-grid.js:25686"
        },
        {
            "message": "Missing item type\nSaves the pagination state, if the pagination feature is enabled",
            "line": " assets\\ui-grid.js:25703"
        },
        {
            "message": "Missing item type\nSaves the tree view state, if the tree feature is enabled",
            "line": " assets\\ui-grid.js:25723"
        },
        {
            "message": "Missing item type\nHelper function that gets either the rowNum or\nthe saveRowIdentity, given a gridRow",
            "line": " assets\\ui-grid.js:25740"
        },
        {
            "message": "Missing item type\nRestores the columns, including order, visible, width,\npinning, sort and filters.",
            "line": " assets\\ui-grid.js:25768"
        },
        {
            "message": "Missing item type\nScrolls to the position that was saved.  If focus is true, then\nsets focus to the specified row/col.  If focus is false, then scrolls to the\nspecified row/col.",
            "line": " assets\\ui-grid.js:25836"
        },
        {
            "message": "Missing item type\nSelects the rows that are provided in the selection\nstate.  If you are using `saveRowIdentity` and more than one row matches the identity\nfunction then only the first is selected.",
            "line": " assets\\ui-grid.js:25881"
        },
        {
            "message": "Missing item type\nRestores the grouping configuration, if the grouping feature\nis enabled.",
            "line": " assets\\ui-grid.js:25913"
        },
        {
            "message": "Missing item type\nRestores the tree view configuration, if the tree view feature\nis enabled.",
            "line": " assets\\ui-grid.js:25930"
        },
        {
            "message": "Missing item type\nRestores the pagination information, if pagination is enabled.",
            "line": " assets\\ui-grid.js:25947"
        },
        {
            "message": "Missing item type\nFinds a row given it's identity value, returns the first found row\nif any are found, otherwise returns null if no rows are found.",
            "line": " assets\\ui-grid.js:25966"
        },
        {
            "message": "Missing item type\n# ui.grid.selection\nThis module provides row selection\n\n<div class=\"alert alert-success\" role=\"alert\"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>\n\n<div doc-module-components=\"ui.grid.selection\"></div>",
            "line": " assets\\ui-grid.js:26055"
        },
        {
            "message": "Missing item type\nconstants available in selection module",
            "line": " assets\\ui-grid.js:26070"
        },
        {
            "message": "Missing item type\nGridRow prototype functions added for selection",
            "line": " assets\\ui-grid.js:26085"
        },
        {
            "message": "Missing item type\nEnable row selection for this row, only settable by internal code.\n\nThe grouping feature, for example, might set group header rows to not be selectable.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:26092"
        },
        {
            "message": "Missing item type\nSelected state of row.  Should be readonly. Make any changes to selected state using setSelected().\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:26102"
        },
        {
            "message": "Missing item type\nSets the isSelected property and updates the selectedCount\nChanges to isSelected state should only be made via this function",
            "line": " assets\\ui-grid.js:26111"
        },
        {
            "message": "Missing item type\nServices for selection features",
            "line": " assets\\ui-grid.js:26130"
        },
        {
            "message": "Missing item type\nGrid properties and functions added for selection",
            "line": " assets\\ui-grid.js:26144"
        },
        {
            "message": "Missing item type\nCurrent count of selected rows",
            "line": " assets\\ui-grid.js:26155"
        },
        {
            "message": "Missing item type\nPublic Api for selection feature",
            "line": " assets\\ui-grid.js:26167"
        },
        {
            "message": "Missing item type\nis raised after the row.isSelected state is changed",
            "line": " assets\\ui-grid.js:26176"
        },
        {
            "message": "Missing item type\nis raised after the row.isSelected state is changed\nin bulk, if the `enableSelectionBatchEvent` option is set to true\n(which it is by default).  This allows more efficient processing\nof bulk events.",
            "line": " assets\\ui-grid.js:26186"
        },
        {
            "message": "Missing item type\nToggles data row as selected or unselected",
            "line": " assets\\ui-grid.js:26203"
        },
        {
            "message": "Missing item type\nSelect the data row",
            "line": " assets\\ui-grid.js:26217"
        },
        {
            "message": "Missing item type\nSelect the specified row by visible index (i.e. if you\nspecify row 0 you'll get the first visible row selected).  In this context\nvisible means of those rows that are theoretically visible (i.e. not filtered),\nrather than rows currently rendered on the screen.",
            "line": " assets\\ui-grid.js:26231"
        },
        {
            "message": "Missing item type\nUnSelect the data row",
            "line": " assets\\ui-grid.js:26248"
        },
        {
            "message": "Missing item type\nSelects all rows.  Does nothing if multiSelect = false",
            "line": " assets\\ui-grid.js:26262"
        },
        {
            "message": "Missing item type\nSelects all visible rows.  Does nothing if multiSelect = false",
            "line": " assets\\ui-grid.js:26284"
        },
        {
            "message": "Missing item type\nUnselects all rows",
            "line": " assets\\ui-grid.js:26313"
        },
        {
            "message": "Missing item type\nreturns all selectedRow's entity references",
            "line": " assets\\ui-grid.js:26323"
        },
        {
            "message": "Missing item type\nreturns all selectedRow's as gridRows",
            "line": " assets\\ui-grid.js:26334"
        },
        {
            "message": "Missing item type\nreturns the number of rows selected",
            "line": " assets\\ui-grid.js:26343"
        },
        {
            "message": "Missing item type\nSets the current gridOption.multiSelect to true or false",
            "line": " assets\\ui-grid.js:26352"
        },
        {
            "message": "Missing item type\nSets the current gridOption.modifierKeysToMultiSelect to true or false",
            "line": " assets\\ui-grid.js:26362"
        },
        {
            "message": "Missing item type\nReturns whether or not the selectAll checkbox is currently ticked.  The\ngrid doesn't automatically select rows when you add extra data - so when you add data\nyou need to explicitly check whether the selectAll is set, and then call setVisible rows\nif it is",
            "line": " assets\\ui-grid.js:26372"
        },
        {
            "message": "Missing item type\nGridOptions for selection feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:26397"
        },
        {
            "message": "Missing item type\nEnable row selection for entire grid.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:26405"
        },
        {
            "message": "Missing item type\nEnable multiple row selection for entire grid\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:26413"
        },
        {
            "message": "Missing item type\nPrevent a row from being unselected.  Works in conjunction\nwith `multiselect = false` and `gridApi.selection.selectRow()` to allow\nyou to create a single selection only grid - a row is always selected, you\ncan only select different rows, you can't unselect the row.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:26421"
        },
        {
            "message": "Missing item type\nEnable multiple row selection only when using the ctrlKey or shiftKey. Requires multiSelect to be true.\n<br/>Defaults to false",
            "line": " assets\\ui-grid.js:26432"
        },
        {
            "message": "Missing item type\nEnable a row header to be used for selection\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:26440"
        },
        {
            "message": "Missing item type\nEnable selection by clicking anywhere on the row.  Defaults to\nfalse if `enableRowHeaderSelection` is true, otherwise defaults to false.",
            "line": " assets\\ui-grid.js:26448"
        },
        {
            "message": "Missing item type\nEnable the select all checkbox at the top of the selectionRowHeader\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:26458"
        },
        {
            "message": "Missing item type\nIf selected rows are changed in bulk, either via the API or\nvia the selectAll checkbox, then a separate event is fired.  Setting this\noption to false will cause the rowSelectionChanged event to be called multiple times\ninstead\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:26466"
        },
        {
            "message": "Missing item type\ncan be used to set a custom width for the row header selection column\n<br/>Defaults to 30px",
            "line": " assets\\ui-grid.js:26477"
        },
        {
            "message": "Missing item type\nShows the total number of selected items in footer if true.\n<br/>Defaults to true.\n<br/>GridOptions.showGridFooter must also be set to true.",
            "line": " assets\\ui-grid.js:26486"
        },
        {
            "message": "Missing item type\nMakes it possible to specify a method that evaluates for each row and sets its \"enableSelection\" property.",
            "line": " assets\\ui-grid.js:26496"
        },
        {
            "message": "Missing item type\nToggles row as selected or unselected",
            "line": " assets\\ui-grid.js:26506"
        },
        {
            "message": "Missing item type\nselects a group of rows from the last selected row using the shift key",
            "line": " assets\\ui-grid.js:26549"
        },
        {
            "message": "Missing item type\nReturns all the selected rows",
            "line": " assets\\ui-grid.js:26586"
        },
        {
            "message": "Missing item type\nClears all selected rows",
            "line": " assets\\ui-grid.js:26599"
        },
        {
            "message": "Missing item type\nDecides whether to raise a single event or a batch event",
            "line": " assets\\ui-grid.js:26620"
        },
        {
            "message": "Missing item type\nDecides whether we need to raise a batch event, and\nraises it if we do.",
            "line": " assets\\ui-grid.js:26639"
        },
        {
            "message": "Missing item type\n# ui.grid.treeBase\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides base tree handling functions that are shared by other features, notably grouping\nand treeView.  It provides a tree view of the data, with nodes in that\ntree and leaves.\n\nDesign information:\n-------------------\n\nThe raw data that is provided must come with a $$treeLevel on any non-leaf node.  Grouping will create\nthese on all the group header rows, treeView will expect these to be set in the raw data by the user.\nTreeBase will run a rowsProcessor that:\n - builds `treeBase.tree` out of the provided rows\n - permits a recursive sort of the tree\n - maintains the expand/collapse state of each node\n - provides the expand/collapse all button and the expand/collapse buttons\n - maintains the count of children for each node\n\nEach row is updated with a link to the tree node that represents it.  Refer {@link ui.grid.treeBase.grid:treeBase.tree tree documentation}\nfor information.\n\n TreeBase adds information to the rows\n - treeLevel: if present and > -1 tells us the level (level 0 is the top level)\n - treeNode: pointer to the node in the grid.treeBase.tree that refers\n   to this row, allowing us to manipulate the state\n\nSince the logic is baked into the rowsProcessors, it should get triggered whenever\nrow order or filtering or anything like that is changed.  We recall the expanded state\nacross invocations of the rowsProcessors by the reference to the treeNode on the individual\nrows.  We rebuild the tree itself quite frequently, when we do this we use the saved treeNodes to\nget the state, but we overwrite the other data in that treeNode.\n\nBy default rows are collapsed, which means all data rows have their visible property\nset to false, and only level 0 group rows are set to visible.\n\nWe rely on the rowsProcessors to do the actual expanding and collapsing, so we set the flags we want into\ngrid.treeBase.tree, then call refresh.  This is because we can't easily change the visible\nrow cache without calling the processors, and once we've built the logic into the rowProcessors we may as\nwell use it all the time.\n\nTree base provides sorting (on non-grouped columns).\n\nSorting works in two passes.  The standard sorting is performed for any columns that are important to building\nthe tree (for example, any grouped columns).  Then after the tree is built, a recursive tree sort is performed\nfor the remaining sort columns (including the original sort) - these columns are sorted within each tree level\n(so all the level 1 nodes are sorted, then all the level 2 nodes within each level 1 node etc).\n\nTo achieve this we make use of the `ignoreSort` property on the sort configuration.  The parent feature (treeView or grouping)\nmust provide a rowsProcessor that runs with very low priority (typically in the 60-65 range), and that sets\nthe `ignoreSort`on any sort that it wants to run on the tree.  TreeBase will clear the ignoreSort on all sorts - so it\nwill turn on any sorts that haven't run.  It will then call a recursive sort on the tree.\n\nTree base provides treeAggregation.  It checks the treeAggregation configuration on each column, and aggregates based on\nthe logic provided as it builds the tree. Footer aggregation from the uiGrid core should not be used with treeBase aggregation,\nsince it operates on all visible rows, as opposed to to leaf nodes only. Setting `showColumnFooter: true` will show the\ntreeAggregations in the column footer.  Aggregation information will be collected in the format:\n\n```\n  {\n    type: 'count',\n    value: 4,\n    label: 'count: ',\n    rendered: 'count: 4'\n  }\n```\n\nA callback is provided to format the value once it is finalised (aka a valueFilter).\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.treeBase\"></div>",
            "line": " assets\\ui-grid.js:27060"
        },
        {
            "message": "Missing item type\nconstants available in treeBase module.\n\nThese constants are manually copied into grouping and treeView,\nas I haven't found a way to simply include them, and it's not worth\ninvesting time in for something that changes very infrequently.",
            "line": " assets\\ui-grid.js:27143"
        },
        {
            "message": "Missing item type\nServices for treeBase feature",
            "line": " assets\\ui-grid.js:27168"
        },
        {
            "message": "Missing item type\nColumnDef for tree feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}",
            "line": " assets\\ui-grid.js:27174"
        },
        {
            "message": "Missing item type\nGrid properties and functions added for treeBase",
            "line": " assets\\ui-grid.js:27190"
        },
        {
            "message": "Missing item type\nTotal number of tree levels currently used, calculated by the rowsProcessor by\nretaining the highest tree level it sees",
            "line": " assets\\ui-grid.js:27198"
        },
        {
            "message": "Missing item type\nWhether or not the expandAll box is selected",
            "line": " assets\\ui-grid.js:27208"
        },
        {
            "message": "Missing item type\nTree represented as a nested array that holds the state of each node, along with a\npointer to the row.  The array order is material - we will display the children in the order\nthey are stored in the array\n\nEach node stores:\n\n  - the state of this node\n  - an array of children of this node\n  - a pointer to the parent of this node (reverse pointer, allowing us to walk up the tree)\n  - the number of children of this node\n  - aggregation information calculated from the nodes\n\n```\n  [{\n    state: 'expanded',\n    row: <reference to row>,\n    parentRow: null,\n    aggregations: [{\n      type: 'count',\n      col: <gridCol>,\n      value: 2,\n      label: 'count: ',\n      rendered: 'count: 2'\n    }],\n    children: [\n      {\n        state: 'expanded',\n        row: <reference to row>,\n        parentRow: <reference to row>,\n        aggregations: [{\n          type: 'count',\n          col: '<gridCol>,\n          value: 4,\n          label: 'count: ',\n          rendered: 'count: 4'\n        }],\n        children: [\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> }\n        ]\n      },\n      {\n        state: 'collapsed',\n        row: <reference to row>,\n        parentRow: <reference to row>,\n        aggregations: [{\n          type: 'count',\n          col: <gridCol>,\n          value: 3,\n          label: 'count: ',\n          rendered: 'count: 3'\n        }],\n        children: [\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },\n          { state: 'expanded', row: <reference to row>, parentRow: <reference to row> }\n        ]\n      }\n    ]\n  }, {<another level 0 node maybe>} ]\n```\nMissing state values are false - meaning they aren't expanded.\n\nThis is used because the rowProcessors run every time the grid is refreshed, so\nwe'd lose the expanded state every time the grid was refreshed.  This instead gives\nus a reliable lookup that persists across rowProcessors.\n\nThis tree is rebuilt every time we run the rowsProcessors.  Since each row holds a pointer\nto it's tree node we can persist expand/collapse state across calls to rowsProcessor, we discard\nall transient information on the tree (children, childCount) and recalculate it",
            "line": " assets\\ui-grid.js:27217"
        },
        {
            "message": "Missing item type\nPublic Api for treeBase feature",
            "line": " assets\\ui-grid.js:27306"
        },
        {
            "message": "Missing item type\nraised whenever a row is expanded.  If you are dynamically\nrendering your tree you can listen to this event, and then retrieve\nthe children of this row and load them into the grid data.\n\nWhen the data is loaded the grid will automatically refresh to show these new rows\n\n<pre>\n     gridApi.treeBase.on.rowExpanded(scope,function(row){})\n</pre>",
            "line": " assets\\ui-grid.js:27315"
        },
        {
            "message": "Missing item type\nraised whenever a row is collapsed.  Doesn't really have\na purpose at the moment, included for symmetry\n\n<pre>\n     gridApi.treeBase.on.rowCollapsed(scope,function(row){})\n</pre>",
            "line": " assets\\ui-grid.js:27333"
        },
        {
            "message": "Missing item type\nExpands all tree rows",
            "line": " assets\\ui-grid.js:27352"
        },
        {
            "message": "Missing item type\ncollapse all tree rows",
            "line": " assets\\ui-grid.js:27362"
        },
        {
            "message": "Missing item type\ncall expand if the row is collapsed, collapse if it is expanded",
            "line": " assets\\ui-grid.js:27372"
        },
        {
            "message": "Missing item type\nexpand the immediate children of the specified row",
            "line": " assets\\ui-grid.js:27383"
        },
        {
            "message": "Missing item type\nexpand all children of the specified row",
            "line": " assets\\ui-grid.js:27395"
        },
        {
            "message": "Missing item type\ncollapse  the specified row.  When\nyou expand the row again, all grandchildren will retain their state",
            "line": " assets\\ui-grid.js:27406"
        },
        {
            "message": "Missing item type\ncollapse all children of the specified row.  When\nyou expand the row again, all grandchildren will be collapsed",
            "line": " assets\\ui-grid.js:27418"
        },
        {
            "message": "Missing item type\nGet the tree state for this grid,\nused by the saveState feature\nReturned treeState as an object\n  `{ expandedState: { uid: 'expanded', uid: 'collapsed' } }`\nwhere expandedState is a hash of row uid and the current expanded state",
            "line": " assets\\ui-grid.js:27430"
        },
        {
            "message": "Missing item type\nSet the expanded states of the tree",
            "line": " assets\\ui-grid.js:27451"
        },
        {
            "message": "Missing item type\nGet the children of the specified row",
            "line": " assets\\ui-grid.js:27463"
        },
        {
            "message": "Missing item type\nGridOptions for treeBase feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}",
            "line": " assets\\ui-grid.js:27489"
        },
        {
            "message": "Missing item type\nBase width of the tree header, provides for a single level of tree.  This\nis incremented by `treeIndent` for each extra level\n<br/>Defaults to 30",
            "line": " assets\\ui-grid.js:27497"
        },
        {
            "message": "Missing item type\nNumber of pixels of indent for the icon at each tree level, wider indents are visually more pleasing,\nbut will make the tree row header wider\n<br/>Defaults to 10",
            "line": " assets\\ui-grid.js:27507"
        },
        {
            "message": "Missing item type\nIf set to false, don't create the row header.  You'll need to programmatically control the expand\nstates\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:27517"
        },
        {
            "message": "Missing item type\nIf set to true, show the expand/collapse button even if there are no\nchildren of a node.  You'd use this if you're planning to dynamically load the children\n\n<br/>Defaults to true, grouping overrides to false",
            "line": " assets\\ui-grid.js:27527"
        },
        {
            "message": "Missing item type\nIf set to true, row header even if there are no tree nodes\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:27538"
        },
        {
            "message": "Missing item type\nDefine custom aggregation functions. The properties of this object will be\naggregation types available for use on columnDef with {@link ui.grid.treeBase.api:ColumnDef treeAggregationType} or through the column menu.\nIf a function defined here uses the same name as one of the native aggregations, this one will take precedence.\nThe object format is:\n\n<pre>\n  {\n    aggregationName: {\n      label: (optional) string,\n      aggregationFn: function( aggregation, fieldValue, numValue, row ){...},\n      finalizerFn: (optional) function( aggregation ){...}\n      },\n    mean: {\n      label: 'mean',\n      aggregationFn: function( aggregation, fieldValue, numValue ){\n          aggregation.count = (aggregation.count || 1) + 1;\n        aggregation.sum = (aggregation.sum || 0) + numValue;\n      },\n      finalizerFn: function( aggregation ){\n        aggregation.value = aggregation.sum / aggregation.count\n      }\n    }\n  }\n</pre>\n\n<br/>The `finalizerFn` may be used to manipulate the value before rendering, or to\napply a custom rendered value. If `aggregation.rendered` is left undefined, the value will be\nrendered. Note that the native aggregation functions use an `finalizerFn` to concatenate\nthe label and the value.\n\n<br/>Defaults to {}",
            "line": " assets\\ui-grid.js:27548"
        },
        {
            "message": "Missing item type\nEnable the expand all button at the top of the row header\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:27586"
        },
        {
            "message": "Missing item type\nSets the tree defaults based on the columnDefs",
            "line": " assets\\ui-grid.js:27598"
        },
        {
            "message": "Missing item type\nA custom function that aggregates rows into some form of\ntotal.  Aggregations run row-by-row, the function needs to be capable of\ncreating a running total.\n\nThe function will be provided the aggregation item (in which you can store running\ntotals), the row value that is to be aggregated, and that same row value converted to\na number (most aggregations work on numbers)",
            "line": " assets\\ui-grid.js:27612"
        },
        {
            "message": "Missing item type\nUse one of the native or grid-level aggregation methods for calculating aggregations on this column.\nNative method are in the constants file and include: SUM, COUNT, MIN, MAX, AVG. This may also be the property the\nname of an aggregation function defined with {@link ui.grid.treeBase.api:GridOptions treeCustomAggregations}.\n\n<pre>\n    treeAggregationType = uiGridTreeBaseConstants.aggregation.SUM,\n  }\n</pre>\n\nIf you are using aggregations you should either:\n\n - also use grouping, in which case the aggregations are displayed in the group header, OR\n - use treeView, in which case you can set `treeAggregationUpdateEntity: true` in the colDef, and\n   treeBase will store the aggregation information in the entity, or you can set `treeAggregationUpdateEntity: false`\n   in the colDef, and you need to manual retrieve the calculated aggregations from the row.treeNode.aggregations\n\n<br/>Takes precendence over a treeAggregationFn, the two options should not be used together.\n<br/>Defaults to undefined.",
            "line": " assets\\ui-grid.js:27648"
        },
        {
            "message": "Missing item type\nA custom label to use for this aggregation. If provided we don't use native i18n.",
            "line": " assets\\ui-grid.js:27683"
        },
        {
            "message": "Missing item type\nStore calculated aggregations into the entity, allowing them\nto be displayed in the grid using a standard cellTemplate.  This defaults to true,\nif you are using grouping then you shouldn't set it to false, as then the aggregations won't\ndisplay.\n\nIf you are using treeView in most cases you'll want to set this to true.  This will result in\ngetCellValue returning the aggregation rather than whatever was stored in the cell attribute on\nthe entity.  If you want to render the underlying entity value (and do something else with the aggregation)\nthen you could use a custom cellTemplate to display `row.entity.myAttribute`, rather than using getCellValue.\n\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:27696"
        },
        {
            "message": "Missing item type\nA custom function that populates aggregation.rendered, this is called when\na particular aggregation has been fully calculated, and we want to render the value.\n\nWith the native aggregation options we just concatenate `aggregation.label` and\n`aggregation.value`, but if you wanted to apply a filter or otherwise manipulate the label\nor the value, you can do so with this function. This function will be called after the\nthe default `finalizerFn`.",
            "line": " assets\\ui-grid.js:27724"
        },
        {
            "message": "Missing item type\nCreate the rowHeader.  If treeRowHeaderAlwaysVisible then\nset it to visible, otherwise set it to invisible",
            "line": " assets\\ui-grid.js:27751"
        },
        {
            "message": "Missing item type\nExpands all nodes in the tree",
            "line": " assets\\ui-grid.js:27779"
        },
        {
            "message": "Missing item type\nCollapses all nodes in the tree",
            "line": " assets\\ui-grid.js:27796"
        },
        {
            "message": "Missing item type\nWorks through a subset of grid.treeBase.rowExpandedStates, setting\nall child nodes (and their descendents) of the provided node to the given state.\n\nCalls itself recursively on all nodes so as to achieve this.",
            "line": " assets\\ui-grid.js:27813"
        },
        {
            "message": "Missing item type\nToggles the expand or collapse state of this grouped row, if\nit's a parent row",
            "line": " assets\\ui-grid.js:27846"
        },
        {
            "message": "Missing item type\nExpands this specific row, showing only immediate children.",
            "line": " assets\\ui-grid.js:27871"
        },
        {
            "message": "Missing item type\nExpands this specific row, showing all children.",
            "line": " assets\\ui-grid.js:27915"
        },
        {
            "message": "Missing item type\nCollapses this specific row",
            "line": " assets\\ui-grid.js:27935"
        },
        {
            "message": "Missing item type\nCollapses this specific row and all children",
            "line": " assets\\ui-grid.js:27958"
        },
        {
            "message": "Missing item type\nReturns true if all rows are expanded, false\nif they're not.  Walks the tree to determine this.  Used\nto set the expandAll state.\n\nIf the node has no children, then return true (it's immaterial\nwhether it is expanded).  If the node has children, then return\nfalse if this node is collapsed, or if any child node is not all expanded",
            "line": " assets\\ui-grid.js:27978"
        },
        {
            "message": "Missing item type\nThe rowProcessor that adds the nodes to the tree, and sets the visible\nstate of each row based on it's parent state\n\nAssumes it is always called after the sorting processor, and the grouping processor if there is one.\nPerforms any tree sorts itself after having built the tree\n\nProcesses all the rows in order, setting the group level based on the $$treeLevel in the associated\nentity, and setting the visible state based on the parent's state.\n\nCalculates the deepest level of tree whilst it goes, and updates that so that the header column can be correctly\nsized.\n\nAggregates if necessary along the way.",
            "line": " assets\\ui-grid.js:28021"
        },
        {
            "message": "Missing item type\nCalculates the rowHeader width.\n\nIf rowHeader is always present, updates the width.\n\nIf rowHeader is only sometimes present (`treeRowHeaderAlwaysVisible: false`), determines whether there\nshould be one, then creates or removes it as appropriate, with the created rowHeader having the\nright width.\n\nIf there's never a rowHeader then never creates one: `showTreeRowHeader: false`",
            "line": " assets\\ui-grid.js:28062"
        },
        {
            "message": "Missing item type\nCreates an array of rows based on the tree, exporting only\nthe visible nodes and leaves",
            "line": " assets\\ui-grid.js:28102"
        },
        {
            "message": "Missing item type\nCreates a tree from the renderableRows",
            "line": " assets\\ui-grid.js:28128"
        },
        {
            "message": "Missing item type\nCreates a tree node for this row.  If this row already has a treeNode\nrecorded against it, preserves the state, but otherwise overwrites the data.",
            "line": " assets\\ui-grid.js:28199"
        },
        {
            "message": "Missing item type\nLooks at the parents array to determine our current state.\nIf any node in the hierarchy is collapsed, then return collapsed, otherwise return\nexpanded.",
            "line": " assets\\ui-grid.js:28236"
        },
        {
            "message": "Missing item type\nPerforms a recursive sort on the tree nodes, sorting the\nchildren of each node and putting them back into the children array.\n\nBefore doing this it turns back on all the sortIgnore - things that were previously\nignored we process now.  Since we're sorting within the nodes, presumably anything\nthat was already sorted is how we derived the nodes, we can keep those sorts too.\n\nWe only sort tree nodes that are expanded - no point in wasting effort sorting collapsed\nnodes",
            "line": " assets\\ui-grid.js:28258"
        },
        {
            "message": "Missing item type\nAfter filtering has run, we need to go back through the tree\nand make sure the parent rows are always visible if any of the child rows\nare visible (filtering may make a child visible, but the parent may not\nmatch the filter criteria)\n\nThis has a risk of being computationally expensive, we do it by walking\nthe tree and remembering whether there are any invisible nodes on the\nway down.",
            "line": " assets\\ui-grid.js:28305"
        },
        {
            "message": "Missing item type\nBuild the object which is stored on the column for holding meta-data about the aggregation.\nThis method should only be called with columns which have an aggregation.",
            "line": " assets\\ui-grid.js:28355"
        },
        {
            "message": "Missing item type\nLooks through the grid columns to find those with aggregations,\nand collates the aggregation information into an array, returns that array",
            "line": " assets\\ui-grid.js:28379"
        },
        {
            "message": "Missing item type\nAccumulate the data from this row onto the aggregations for each parent\n\nIterate over the parents, then iterate over the aggregations for each of those parents,\nand perform the aggregation for each individual aggregation",
            "line": " assets\\ui-grid.js:28407"
        },
        {
            "message": "Missing item type\nHelper function used to finalize aggregation nodes and footer cells",
            "line": " assets\\ui-grid.js:28532"
        },
        {
            "message": "Missing item type\nFormat the data from the aggregation into the rendered text\ne.g. if we had label: 'sum: ' and value: 25, we'd create 'sum: 25'.\n\nAs part of this we call any formatting callback routines we've been provided.\n\nWe write our aggregation out to the row.entity if treeAggregationUpdateEntity is\nset on the column - we don't overwrite any information that's already there, we append\nto it so that grouping can have set the groupVal beforehand without us overwriting it.\n\nWe need to copy the data from the row.entity first before we finalise the aggregation,\nwe need that information for the finaliserFn",
            "line": " assets\\ui-grid.js:28557"
        },
        {
            "message": "Missing item type\nUses the tree aggregation functions and finalizers to set the\ncolumn footer aggregations.",
            "line": " assets\\ui-grid.js:28596"
        },
        {
            "message": "Missing item type\n# ui.grid.treeView\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>\n\nThis module provides a tree view of the data that it is provided, with nodes in that\ntree and leaves.  Unlike grouping, the tree is an inherent property of the data and must\nbe provided with your data array.\n\nDesign information:\n-------------------\n\nTreeView uses treeBase for the underlying functionality, and is a very thin wrapper around\nthat logic.  Most of the design information has now moved to treebase.\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.treeView\"></div>",
            "line": " assets\\ui-grid.js:28715"
        },
        {
            "message": "Missing item type\nconstants available in treeView module, this includes\nall the constants declared in the treeBase module (these are manually copied\nas there isn't an easy way to include constants in another constants file, and\nwe don't want to make users include treeBase)",
            "line": " assets\\ui-grid.js:28741"
        },
        {
            "message": "Missing item type\nServices for treeView features",
            "line": " assets\\ui-grid.js:28765"
        },
        {
            "message": "Missing item type\nGrid properties and functions added for treeView",
            "line": " assets\\ui-grid.js:28779"
        },
        {
            "message": "Missing item type\nPublic Api for treeView feature",
            "line": " assets\\ui-grid.js:28789"
        },
        {
            "message": "Missing item type\nGridOptions for treeView feature, these are available to be\nset using the ui-grid {@link ui.grid.class:GridOptions gridOptions}\n\nMany tree options are set on treeBase, make sure to look at that feature in\nconjunction with these options.",
            "line": " assets\\ui-grid.js:28814"
        },
        {
            "message": "Missing item type\nEnable row tree view for entire grid.\n<br/>Defaults to true",
            "line": " assets\\ui-grid.js:28825"
        },
        {
            "message": "Missing item type\nTrees cannot be sorted the same as flat lists of rows -\ntrees are sorted recursively within each level - so the children of each\nnode are sorted, but not the full set of rows.\n\nTo achieve this, we suppress the normal sorting by setting ignoreSort on\neach of the sort columns.  When the treeBase rowsProcessor runs it will then\nunignore these, and will perform a recursive sort against the tree that it builds.",
            "line": " assets\\ui-grid.js:28837"
        },
        {
            "message": "Missing item type\n# ui.grid.validate\n\n<div class=\"alert alert-warning\" role=\"alert\"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>\n\nThis module provides the ability to validate cells upon change.\n\nDesign information:\n-------------------\n\nValidation is not based on angularjs validation, since it would work only when editing the field.\n\nInstead it adds custom properties to any field considered as invalid.\n\n<br/>\n<br/>\n\n<div doc-module-components=\"ui.grid.expandable\"></div>",
            "line": " assets\\ui-grid.js:28930"
        },
        {
            "message": "Missing item type\nServices for validation features",
            "line": " assets\\ui-grid.js:28957"
        },
        {
            "message": "Missing item type\nobject containing all the factories used to validate data.<br/>\nThese factories will be in the form <br/>\n```\n{\n  validatorFactory: function(argument) {\n                      return function(newValue, oldValue, rowEntity, colDef) {\n                        return true || false || promise\n                      }\n                    },\n  messageFunction: function(argument) {\n                     return string\n                   }\n}\n```\n\n Promises should return true or false as result according to the result of validation.",
            "line": " assets\\ui-grid.js:28967"
        },
        {
            "message": "Missing item type\nAdds a way to retrieve validators from an external service\n<p>Validators from this external service have a higher priority than default\nones",
            "line": " assets\\ui-grid.js:28991"
        },
        {
            "message": "Missing item type\nRemoves any link to external factory from this service",
            "line": " assets\\ui-grid.js:29006"
        },
        {
            "message": "Missing item type\nRetrieves a validator by executing a validatorFactory\nstored in an external service.",
            "line": " assets\\ui-grid.js:29016"
        },
        {
            "message": "Missing item type\nRetrieves a message stored in an external service.",
            "line": " assets\\ui-grid.js:29029"
        },
        {
            "message": "Missing item type\nAdds a new validator to the service",
            "line": " assets\\ui-grid.js:29041"
        },
        {
            "message": "Missing item type\nReturns a validator registered to the service\nor retrieved from the external factory",
            "line": " assets\\ui-grid.js:29057"
        },
        {
            "message": "Missing item type\nReturns the error message related to the validator",
            "line": " assets\\ui-grid.js:29080"
        },
        {
            "message": "Missing item type\nReturns true if the cell (identified by rowEntity, colDef) is invalid",
            "line": " assets\\ui-grid.js:29099"
        },
        {
            "message": "Missing item type\nMakes the cell invalid by adding the proper field to the entity",
            "line": " assets\\ui-grid.js:29112"
        },
        {
            "message": "Missing item type\nMakes the cell valid by removing the proper error field from the entity",
            "line": " assets\\ui-grid.js:29124"
        },
        {
            "message": "Missing item type\nAdds the proper error to the entity errors field",
            "line": " assets\\ui-grid.js:29136"
        },
        {
            "message": "Missing item type\nRemoves the proper error from the entity errors field",
            "line": " assets\\ui-grid.js:29152"
        },
        {
            "message": "Missing item type\nreturns an array of i18n-ed error messages.",
            "line": " assets\\ui-grid.js:29170"
        },
        {
            "message": "Missing item type\nreturns the error i18n-ed and formatted in html to be shown inside the page.",
            "line": " assets\\ui-grid.js:29193"
        },
        {
            "message": "Missing item type\nreturns the error i18n-ed and formatted in javaScript to be shown inside an html \ntitle attribute.",
            "line": " assets\\ui-grid.js:29220"
        },
        {
            "message": "Missing item type\nExecutes all validators on a cell (identified by row entity and column definition) and sets or clears errors",
            "line": " assets\\ui-grid.js:29250"
        },
        {
            "message": "Missing item type\nadds the basic validators to the list of service validators",
            "line": " assets\\ui-grid.js:29302"
        },
        {
            "message": "Missing item type\nPublic Api for validation feature",
            "line": " assets\\ui-grid.js:29361"
        },
        {
            "message": "Missing item type\nraised when one or more failure happened during validation \n<pre>\n     gridApi.validate.on.validationFailed(scope, function(rowEntity, colDef, newValue, oldValue){...})\n</pre>",
            "line": " assets\\ui-grid.js:29370"
        },
        {
            "message": "Missing item type\nchecks if a cell (identified by rowEntity, colDef) is invalid",
            "line": " assets\\ui-grid.js:29389"
        },
        {
            "message": "Missing item type\nreturns an array of i18n-ed error messages.",
            "line": " assets\\ui-grid.js:29401"
        },
        {
            "message": "Missing item type\nreturns the error i18n-ed and formatted in html to be shown inside the page.",
            "line": " assets\\ui-grid.js:29413"
        },
        {
            "message": "Missing item type\nreturns the error i18n-ed and formatted in javaScript to be shown inside an html \ntitle attribute.",
            "line": " assets\\ui-grid.js:29426"
        }
    ]
}